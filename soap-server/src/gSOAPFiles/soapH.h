/* soapH.h
   Generated by gSOAP 2.8.75 for ipaws.h

gSOAP XML Web services tools
Copyright (C) 2000-2018, Robert van Engelen, Genivia Inc. All Rights Reserved.
The soapcpp2 tool and its generated software are released under the GPL.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial use license is available from Genivia Inc., contact@genivia.com
--------------------------------------------------------------------------------
*/

#ifndef soapH_H
#define soapH_H
#include "soapStub.h"
#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_markelement(struct soap*, const void*, int);

#ifdef __cplusplus
}
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_putindependent(struct soap*);
SOAP_FMAC3 int SOAP_FMAC4 soap_getindependent(struct soap*);
#endif

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void * SOAP_FMAC4 soap_getelement(struct soap*, const char*, int*);
SOAP_FMAC3 int SOAP_FMAC4 soap_putelement(struct soap*, const void*, const char*, int, int);
SOAP_FMAC3 void * SOAP_FMAC4 soap_dupelement(struct soap*, const void*, int);
SOAP_FMAC3 void SOAP_FMAC4 soap_delelement(const void*, int);

#ifdef __cplusplus
}
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_ignore_element(struct soap*);

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultcode(struct soap *soap);
SOAP_FMAC3 void * SOAP_FMAC4 soap_instantiate(struct soap*, int, const char*, const char*, size_t*);
SOAP_FMAC3 int SOAP_FMAC4 soap_fdelete(struct soap *soap, struct soap_clist*);
SOAP_FMAC3 int SOAP_FMAC4 soap_fbase(int, int);
SOAP_FMAC3 void SOAP_FMAC4 soap_finsert(struct soap*, int, int, void*, size_t, const void*, void**);

#ifndef SOAP_TYPE_byte_DEFINED
#define SOAP_TYPE_byte_DEFINED

inline void soap_default_byte(struct soap *soap, char *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_byte
	*a = SOAP_DEFAULT_byte;
#else
	*a = (char)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_byte(struct soap*, const char*, int, const char *, const char*);
SOAP_FMAC3 char * SOAP_FMAC4 soap_in_byte(struct soap*, const char*, char *, const char*);

SOAP_FMAC3 char * SOAP_FMAC4 soap_new_byte(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_byte(struct soap*, const char *, const char*, const char*);

inline int soap_write_byte(struct soap *soap, char const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_byte(soap, p, "byte", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_byte(struct soap *soap, const char *URL, char const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_byte(soap, p, "byte", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_byte(struct soap *soap, const char *URL, char const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_byte(soap, p, "byte", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_byte(struct soap *soap, const char *URL, char const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_byte(soap, p, "byte", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 char * SOAP_FMAC4 soap_get_byte(struct soap*, char *, const char*, const char*);

inline int soap_read_byte(struct soap *soap, char *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_byte(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_byte(struct soap *soap, const char *URL, char *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_byte(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_byte(struct soap *soap, char *p)
{
	if (::soap_read_byte(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_int_DEFINED
#define SOAP_TYPE_int_DEFINED

inline void soap_default_int(struct soap *soap, int *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_int
	*a = SOAP_DEFAULT_int;
#else
	*a = (int)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_int(struct soap*, const char*, int, const int *, const char*);
SOAP_FMAC3 int * SOAP_FMAC4 soap_in_int(struct soap*, const char*, int *, const char*);

SOAP_FMAC3 int * SOAP_FMAC4 soap_new_int(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_int(struct soap*, const int *, const char*, const char*);

inline int soap_write_int(struct soap *soap, int const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_int(soap, p, "int", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_int(struct soap *soap, const char *URL, int const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_int(soap, p, "int", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_int(struct soap *soap, const char *URL, int const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_int(soap, p, "int", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_int(struct soap *soap, const char *URL, int const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_int(soap, p, "int", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 int * SOAP_FMAC4 soap_get_int(struct soap*, int *, const char*, const char*);

inline int soap_read_int(struct soap *soap, int *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_int(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_int(struct soap *soap, const char *URL, int *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_int(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_int(struct soap *soap, int *p)
{
	if (::soap_read_int(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_dateTime_DEFINED
#define SOAP_TYPE_dateTime_DEFINED

inline void soap_default_dateTime(struct soap *soap, time_t *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_dateTime
	*a = SOAP_DEFAULT_dateTime;
#else
	*a = (time_t)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_dateTime(struct soap*, const char*, int, const time_t *, const char*);
SOAP_FMAC3 time_t * SOAP_FMAC4 soap_in_dateTime(struct soap*, const char*, time_t *, const char*);

SOAP_FMAC3 time_t * SOAP_FMAC4 soap_new_dateTime(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_dateTime(struct soap*, const time_t *, const char*, const char*);

inline int soap_write_dateTime(struct soap *soap, time_t const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_dateTime(soap, p, "dateTime", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_dateTime(struct soap *soap, const char *URL, time_t const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_dateTime(soap, p, "dateTime", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_dateTime(struct soap *soap, const char *URL, time_t const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_dateTime(soap, p, "dateTime", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_dateTime(struct soap *soap, const char *URL, time_t const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_dateTime(soap, p, "dateTime", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 time_t * SOAP_FMAC4 soap_get_dateTime(struct soap*, time_t *, const char*, const char*);

inline int soap_read_dateTime(struct soap *soap, time_t *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_dateTime(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_dateTime(struct soap *soap, const char *URL, time_t *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_dateTime(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_dateTime(struct soap *soap, time_t *p)
{
	if (::soap_read_dateTime(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__ns4__alert_info_certainty_DEFINED
#define SOAP_TYPE__ns4__alert_info_certainty_DEFINED

inline void soap_default__ns4__alert_info_certainty(struct soap *soap, enum _ns4__alert_info_certainty *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT__ns4__alert_info_certainty
	*a = SOAP_DEFAULT__ns4__alert_info_certainty;
#else
	*a = (enum _ns4__alert_info_certainty)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns4__alert_info_certainty(struct soap*, const char*, int, const enum _ns4__alert_info_certainty *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap__ns4__alert_info_certainty2s(struct soap*, enum _ns4__alert_info_certainty);
SOAP_FMAC3 enum _ns4__alert_info_certainty * SOAP_FMAC4 soap_in__ns4__alert_info_certainty(struct soap*, const char*, enum _ns4__alert_info_certainty *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2_ns4__alert_info_certainty(struct soap*, const char*, enum _ns4__alert_info_certainty *);

SOAP_FMAC3 enum _ns4__alert_info_certainty * SOAP_FMAC4 soap_new__ns4__alert_info_certainty(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put__ns4__alert_info_certainty(struct soap*, const enum _ns4__alert_info_certainty *, const char*, const char*);

inline int soap_write__ns4__alert_info_certainty(struct soap *soap, enum _ns4__alert_info_certainty const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put__ns4__alert_info_certainty(soap, p, "ns4:alert-info-certainty", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT__ns4__alert_info_certainty(struct soap *soap, const char *URL, enum _ns4__alert_info_certainty const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__ns4__alert_info_certainty(soap, p, "ns4:alert-info-certainty", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__ns4__alert_info_certainty(struct soap *soap, const char *URL, enum _ns4__alert_info_certainty const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__ns4__alert_info_certainty(soap, p, "ns4:alert-info-certainty", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns4__alert_info_certainty(struct soap *soap, const char *URL, enum _ns4__alert_info_certainty const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__ns4__alert_info_certainty(soap, p, "ns4:alert-info-certainty", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum _ns4__alert_info_certainty * SOAP_FMAC4 soap_get__ns4__alert_info_certainty(struct soap*, enum _ns4__alert_info_certainty *, const char*, const char*);

inline int soap_read__ns4__alert_info_certainty(struct soap *soap, enum _ns4__alert_info_certainty *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get__ns4__alert_info_certainty(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns4__alert_info_certainty(struct soap *soap, const char *URL, enum _ns4__alert_info_certainty *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__ns4__alert_info_certainty(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__ns4__alert_info_certainty(struct soap *soap, enum _ns4__alert_info_certainty *p)
{
	if (::soap_read__ns4__alert_info_certainty(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__ns4__alert_info_severity_DEFINED
#define SOAP_TYPE__ns4__alert_info_severity_DEFINED

inline void soap_default__ns4__alert_info_severity(struct soap *soap, enum _ns4__alert_info_severity *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT__ns4__alert_info_severity
	*a = SOAP_DEFAULT__ns4__alert_info_severity;
#else
	*a = (enum _ns4__alert_info_severity)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns4__alert_info_severity(struct soap*, const char*, int, const enum _ns4__alert_info_severity *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap__ns4__alert_info_severity2s(struct soap*, enum _ns4__alert_info_severity);
SOAP_FMAC3 enum _ns4__alert_info_severity * SOAP_FMAC4 soap_in__ns4__alert_info_severity(struct soap*, const char*, enum _ns4__alert_info_severity *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2_ns4__alert_info_severity(struct soap*, const char*, enum _ns4__alert_info_severity *);

SOAP_FMAC3 enum _ns4__alert_info_severity * SOAP_FMAC4 soap_new__ns4__alert_info_severity(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put__ns4__alert_info_severity(struct soap*, const enum _ns4__alert_info_severity *, const char*, const char*);

inline int soap_write__ns4__alert_info_severity(struct soap *soap, enum _ns4__alert_info_severity const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put__ns4__alert_info_severity(soap, p, "ns4:alert-info-severity", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT__ns4__alert_info_severity(struct soap *soap, const char *URL, enum _ns4__alert_info_severity const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__ns4__alert_info_severity(soap, p, "ns4:alert-info-severity", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__ns4__alert_info_severity(struct soap *soap, const char *URL, enum _ns4__alert_info_severity const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__ns4__alert_info_severity(soap, p, "ns4:alert-info-severity", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns4__alert_info_severity(struct soap *soap, const char *URL, enum _ns4__alert_info_severity const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__ns4__alert_info_severity(soap, p, "ns4:alert-info-severity", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum _ns4__alert_info_severity * SOAP_FMAC4 soap_get__ns4__alert_info_severity(struct soap*, enum _ns4__alert_info_severity *, const char*, const char*);

inline int soap_read__ns4__alert_info_severity(struct soap *soap, enum _ns4__alert_info_severity *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get__ns4__alert_info_severity(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns4__alert_info_severity(struct soap *soap, const char *URL, enum _ns4__alert_info_severity *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__ns4__alert_info_severity(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__ns4__alert_info_severity(struct soap *soap, enum _ns4__alert_info_severity *p)
{
	if (::soap_read__ns4__alert_info_severity(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__ns4__alert_info_urgency_DEFINED
#define SOAP_TYPE__ns4__alert_info_urgency_DEFINED

inline void soap_default__ns4__alert_info_urgency(struct soap *soap, enum _ns4__alert_info_urgency *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT__ns4__alert_info_urgency
	*a = SOAP_DEFAULT__ns4__alert_info_urgency;
#else
	*a = (enum _ns4__alert_info_urgency)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns4__alert_info_urgency(struct soap*, const char*, int, const enum _ns4__alert_info_urgency *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap__ns4__alert_info_urgency2s(struct soap*, enum _ns4__alert_info_urgency);
SOAP_FMAC3 enum _ns4__alert_info_urgency * SOAP_FMAC4 soap_in__ns4__alert_info_urgency(struct soap*, const char*, enum _ns4__alert_info_urgency *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2_ns4__alert_info_urgency(struct soap*, const char*, enum _ns4__alert_info_urgency *);

SOAP_FMAC3 enum _ns4__alert_info_urgency * SOAP_FMAC4 soap_new__ns4__alert_info_urgency(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put__ns4__alert_info_urgency(struct soap*, const enum _ns4__alert_info_urgency *, const char*, const char*);

inline int soap_write__ns4__alert_info_urgency(struct soap *soap, enum _ns4__alert_info_urgency const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put__ns4__alert_info_urgency(soap, p, "ns4:alert-info-urgency", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT__ns4__alert_info_urgency(struct soap *soap, const char *URL, enum _ns4__alert_info_urgency const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__ns4__alert_info_urgency(soap, p, "ns4:alert-info-urgency", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__ns4__alert_info_urgency(struct soap *soap, const char *URL, enum _ns4__alert_info_urgency const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__ns4__alert_info_urgency(soap, p, "ns4:alert-info-urgency", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns4__alert_info_urgency(struct soap *soap, const char *URL, enum _ns4__alert_info_urgency const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__ns4__alert_info_urgency(soap, p, "ns4:alert-info-urgency", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum _ns4__alert_info_urgency * SOAP_FMAC4 soap_get__ns4__alert_info_urgency(struct soap*, enum _ns4__alert_info_urgency *, const char*, const char*);

inline int soap_read__ns4__alert_info_urgency(struct soap *soap, enum _ns4__alert_info_urgency *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get__ns4__alert_info_urgency(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns4__alert_info_urgency(struct soap *soap, const char *URL, enum _ns4__alert_info_urgency *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__ns4__alert_info_urgency(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__ns4__alert_info_urgency(struct soap *soap, enum _ns4__alert_info_urgency *p)
{
	if (::soap_read__ns4__alert_info_urgency(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__ns4__alert_info_responseType_DEFINED
#define SOAP_TYPE__ns4__alert_info_responseType_DEFINED

inline void soap_default__ns4__alert_info_responseType(struct soap *soap, enum _ns4__alert_info_responseType *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT__ns4__alert_info_responseType
	*a = SOAP_DEFAULT__ns4__alert_info_responseType;
#else
	*a = (enum _ns4__alert_info_responseType)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns4__alert_info_responseType(struct soap*, const char*, int, const enum _ns4__alert_info_responseType *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap__ns4__alert_info_responseType2s(struct soap*, enum _ns4__alert_info_responseType);
SOAP_FMAC3 enum _ns4__alert_info_responseType * SOAP_FMAC4 soap_in__ns4__alert_info_responseType(struct soap*, const char*, enum _ns4__alert_info_responseType *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2_ns4__alert_info_responseType(struct soap*, const char*, enum _ns4__alert_info_responseType *);

SOAP_FMAC3 enum _ns4__alert_info_responseType * SOAP_FMAC4 soap_new__ns4__alert_info_responseType(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put__ns4__alert_info_responseType(struct soap*, const enum _ns4__alert_info_responseType *, const char*, const char*);

inline int soap_write__ns4__alert_info_responseType(struct soap *soap, enum _ns4__alert_info_responseType const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put__ns4__alert_info_responseType(soap, p, "ns4:alert-info-responseType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT__ns4__alert_info_responseType(struct soap *soap, const char *URL, enum _ns4__alert_info_responseType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__ns4__alert_info_responseType(soap, p, "ns4:alert-info-responseType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__ns4__alert_info_responseType(struct soap *soap, const char *URL, enum _ns4__alert_info_responseType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__ns4__alert_info_responseType(soap, p, "ns4:alert-info-responseType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns4__alert_info_responseType(struct soap *soap, const char *URL, enum _ns4__alert_info_responseType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__ns4__alert_info_responseType(soap, p, "ns4:alert-info-responseType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum _ns4__alert_info_responseType * SOAP_FMAC4 soap_get__ns4__alert_info_responseType(struct soap*, enum _ns4__alert_info_responseType *, const char*, const char*);

inline int soap_read__ns4__alert_info_responseType(struct soap *soap, enum _ns4__alert_info_responseType *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get__ns4__alert_info_responseType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns4__alert_info_responseType(struct soap *soap, const char *URL, enum _ns4__alert_info_responseType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__ns4__alert_info_responseType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__ns4__alert_info_responseType(struct soap *soap, enum _ns4__alert_info_responseType *p)
{
	if (::soap_read__ns4__alert_info_responseType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__ns4__alert_info_category_DEFINED
#define SOAP_TYPE__ns4__alert_info_category_DEFINED

inline void soap_default__ns4__alert_info_category(struct soap *soap, enum _ns4__alert_info_category *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT__ns4__alert_info_category
	*a = SOAP_DEFAULT__ns4__alert_info_category;
#else
	*a = (enum _ns4__alert_info_category)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns4__alert_info_category(struct soap*, const char*, int, const enum _ns4__alert_info_category *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap__ns4__alert_info_category2s(struct soap*, enum _ns4__alert_info_category);
SOAP_FMAC3 enum _ns4__alert_info_category * SOAP_FMAC4 soap_in__ns4__alert_info_category(struct soap*, const char*, enum _ns4__alert_info_category *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2_ns4__alert_info_category(struct soap*, const char*, enum _ns4__alert_info_category *);

SOAP_FMAC3 enum _ns4__alert_info_category * SOAP_FMAC4 soap_new__ns4__alert_info_category(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put__ns4__alert_info_category(struct soap*, const enum _ns4__alert_info_category *, const char*, const char*);

inline int soap_write__ns4__alert_info_category(struct soap *soap, enum _ns4__alert_info_category const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put__ns4__alert_info_category(soap, p, "ns4:alert-info-category", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT__ns4__alert_info_category(struct soap *soap, const char *URL, enum _ns4__alert_info_category const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__ns4__alert_info_category(soap, p, "ns4:alert-info-category", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__ns4__alert_info_category(struct soap *soap, const char *URL, enum _ns4__alert_info_category const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__ns4__alert_info_category(soap, p, "ns4:alert-info-category", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns4__alert_info_category(struct soap *soap, const char *URL, enum _ns4__alert_info_category const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__ns4__alert_info_category(soap, p, "ns4:alert-info-category", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum _ns4__alert_info_category * SOAP_FMAC4 soap_get__ns4__alert_info_category(struct soap*, enum _ns4__alert_info_category *, const char*, const char*);

inline int soap_read__ns4__alert_info_category(struct soap *soap, enum _ns4__alert_info_category *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get__ns4__alert_info_category(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns4__alert_info_category(struct soap *soap, const char *URL, enum _ns4__alert_info_category *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__ns4__alert_info_category(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__ns4__alert_info_category(struct soap *soap, enum _ns4__alert_info_category *p)
{
	if (::soap_read__ns4__alert_info_category(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__ns4__alert_scope_DEFINED
#define SOAP_TYPE__ns4__alert_scope_DEFINED

inline void soap_default__ns4__alert_scope(struct soap *soap, enum _ns4__alert_scope *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT__ns4__alert_scope
	*a = SOAP_DEFAULT__ns4__alert_scope;
#else
	*a = (enum _ns4__alert_scope)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns4__alert_scope(struct soap*, const char*, int, const enum _ns4__alert_scope *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap__ns4__alert_scope2s(struct soap*, enum _ns4__alert_scope);
SOAP_FMAC3 enum _ns4__alert_scope * SOAP_FMAC4 soap_in__ns4__alert_scope(struct soap*, const char*, enum _ns4__alert_scope *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2_ns4__alert_scope(struct soap*, const char*, enum _ns4__alert_scope *);

SOAP_FMAC3 enum _ns4__alert_scope * SOAP_FMAC4 soap_new__ns4__alert_scope(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put__ns4__alert_scope(struct soap*, const enum _ns4__alert_scope *, const char*, const char*);

inline int soap_write__ns4__alert_scope(struct soap *soap, enum _ns4__alert_scope const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put__ns4__alert_scope(soap, p, "ns4:alert-scope", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT__ns4__alert_scope(struct soap *soap, const char *URL, enum _ns4__alert_scope const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__ns4__alert_scope(soap, p, "ns4:alert-scope", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__ns4__alert_scope(struct soap *soap, const char *URL, enum _ns4__alert_scope const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__ns4__alert_scope(soap, p, "ns4:alert-scope", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns4__alert_scope(struct soap *soap, const char *URL, enum _ns4__alert_scope const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__ns4__alert_scope(soap, p, "ns4:alert-scope", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum _ns4__alert_scope * SOAP_FMAC4 soap_get__ns4__alert_scope(struct soap*, enum _ns4__alert_scope *, const char*, const char*);

inline int soap_read__ns4__alert_scope(struct soap *soap, enum _ns4__alert_scope *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get__ns4__alert_scope(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns4__alert_scope(struct soap *soap, const char *URL, enum _ns4__alert_scope *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__ns4__alert_scope(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__ns4__alert_scope(struct soap *soap, enum _ns4__alert_scope *p)
{
	if (::soap_read__ns4__alert_scope(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__ns4__alert_msgType_DEFINED
#define SOAP_TYPE__ns4__alert_msgType_DEFINED

inline void soap_default__ns4__alert_msgType(struct soap *soap, enum _ns4__alert_msgType *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT__ns4__alert_msgType
	*a = SOAP_DEFAULT__ns4__alert_msgType;
#else
	*a = (enum _ns4__alert_msgType)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns4__alert_msgType(struct soap*, const char*, int, const enum _ns4__alert_msgType *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap__ns4__alert_msgType2s(struct soap*, enum _ns4__alert_msgType);
SOAP_FMAC3 enum _ns4__alert_msgType * SOAP_FMAC4 soap_in__ns4__alert_msgType(struct soap*, const char*, enum _ns4__alert_msgType *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2_ns4__alert_msgType(struct soap*, const char*, enum _ns4__alert_msgType *);

SOAP_FMAC3 enum _ns4__alert_msgType * SOAP_FMAC4 soap_new__ns4__alert_msgType(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put__ns4__alert_msgType(struct soap*, const enum _ns4__alert_msgType *, const char*, const char*);

inline int soap_write__ns4__alert_msgType(struct soap *soap, enum _ns4__alert_msgType const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put__ns4__alert_msgType(soap, p, "ns4:alert-msgType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT__ns4__alert_msgType(struct soap *soap, const char *URL, enum _ns4__alert_msgType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__ns4__alert_msgType(soap, p, "ns4:alert-msgType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__ns4__alert_msgType(struct soap *soap, const char *URL, enum _ns4__alert_msgType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__ns4__alert_msgType(soap, p, "ns4:alert-msgType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns4__alert_msgType(struct soap *soap, const char *URL, enum _ns4__alert_msgType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__ns4__alert_msgType(soap, p, "ns4:alert-msgType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum _ns4__alert_msgType * SOAP_FMAC4 soap_get__ns4__alert_msgType(struct soap*, enum _ns4__alert_msgType *, const char*, const char*);

inline int soap_read__ns4__alert_msgType(struct soap *soap, enum _ns4__alert_msgType *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get__ns4__alert_msgType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns4__alert_msgType(struct soap *soap, const char *URL, enum _ns4__alert_msgType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__ns4__alert_msgType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__ns4__alert_msgType(struct soap *soap, enum _ns4__alert_msgType *p)
{
	if (::soap_read__ns4__alert_msgType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__ns4__alert_status_DEFINED
#define SOAP_TYPE__ns4__alert_status_DEFINED

inline void soap_default__ns4__alert_status(struct soap *soap, enum _ns4__alert_status *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT__ns4__alert_status
	*a = SOAP_DEFAULT__ns4__alert_status;
#else
	*a = (enum _ns4__alert_status)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns4__alert_status(struct soap*, const char*, int, const enum _ns4__alert_status *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap__ns4__alert_status2s(struct soap*, enum _ns4__alert_status);
SOAP_FMAC3 enum _ns4__alert_status * SOAP_FMAC4 soap_in__ns4__alert_status(struct soap*, const char*, enum _ns4__alert_status *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2_ns4__alert_status(struct soap*, const char*, enum _ns4__alert_status *);

SOAP_FMAC3 enum _ns4__alert_status * SOAP_FMAC4 soap_new__ns4__alert_status(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put__ns4__alert_status(struct soap*, const enum _ns4__alert_status *, const char*, const char*);

inline int soap_write__ns4__alert_status(struct soap *soap, enum _ns4__alert_status const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put__ns4__alert_status(soap, p, "ns4:alert-status", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT__ns4__alert_status(struct soap *soap, const char *URL, enum _ns4__alert_status const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__ns4__alert_status(soap, p, "ns4:alert-status", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__ns4__alert_status(struct soap *soap, const char *URL, enum _ns4__alert_status const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__ns4__alert_status(soap, p, "ns4:alert-status", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns4__alert_status(struct soap *soap, const char *URL, enum _ns4__alert_status const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__ns4__alert_status(soap, p, "ns4:alert-status", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum _ns4__alert_status * SOAP_FMAC4 soap_get__ns4__alert_status(struct soap*, enum _ns4__alert_status *, const char*, const char*);

inline int soap_read__ns4__alert_status(struct soap *soap, enum _ns4__alert_status *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get__ns4__alert_status(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns4__alert_status(struct soap *soap, const char *URL, enum _ns4__alert_status *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__ns4__alert_status(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__ns4__alert_status(struct soap *soap, enum _ns4__alert_status *p)
{
	if (::soap_read__ns4__alert_status(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__ns4__alert_info_area_geocode_DEFINED
#define SOAP_TYPE__ns4__alert_info_area_geocode_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns4__alert_info_area_geocode(struct soap*, const char*, int, const _ns4__alert_info_area_geocode *, const char*);
SOAP_FMAC3 _ns4__alert_info_area_geocode * SOAP_FMAC4 soap_in__ns4__alert_info_area_geocode(struct soap*, const char*, _ns4__alert_info_area_geocode *, const char*);
SOAP_FMAC1 _ns4__alert_info_area_geocode * SOAP_FMAC2 soap_instantiate__ns4__alert_info_area_geocode(struct soap*, int, const char*, const char*, size_t*);

inline _ns4__alert_info_area_geocode * soap_new__ns4__alert_info_area_geocode(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns4__alert_info_area_geocode(soap, n, NULL, NULL, NULL);
}

inline _ns4__alert_info_area_geocode * soap_new_req__ns4__alert_info_area_geocode(
	struct soap *soap,
	const std::string& valueName,
	const std::string& value)
{
	_ns4__alert_info_area_geocode *_p = ::soap_new__ns4__alert_info_area_geocode(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns4__alert_info_area_geocode::valueName = valueName;
		_p->_ns4__alert_info_area_geocode::value = value;
	}
	return _p;
}

inline _ns4__alert_info_area_geocode * soap_new_set__ns4__alert_info_area_geocode(
	struct soap *soap,
	const std::string& valueName,
	const std::string& value)
{
	_ns4__alert_info_area_geocode *_p = ::soap_new__ns4__alert_info_area_geocode(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns4__alert_info_area_geocode::valueName = valueName;
		_p->_ns4__alert_info_area_geocode::value = value;
	}
	return _p;
}

inline int soap_write__ns4__alert_info_area_geocode(struct soap *soap, _ns4__alert_info_area_geocode const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns4:alert-info-area-geocode", p->soap_type() == SOAP_TYPE__ns4__alert_info_area_geocode ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns4__alert_info_area_geocode(struct soap *soap, const char *URL, _ns4__alert_info_area_geocode const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns4:alert-info-area-geocode", p->soap_type() == SOAP_TYPE__ns4__alert_info_area_geocode ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__ns4__alert_info_area_geocode(struct soap *soap, const char *URL, _ns4__alert_info_area_geocode const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns4:alert-info-area-geocode", p->soap_type() == SOAP_TYPE__ns4__alert_info_area_geocode ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns4__alert_info_area_geocode(struct soap *soap, const char *URL, _ns4__alert_info_area_geocode const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns4:alert-info-area-geocode", p->soap_type() == SOAP_TYPE__ns4__alert_info_area_geocode ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns4__alert_info_area_geocode * SOAP_FMAC4 soap_get__ns4__alert_info_area_geocode(struct soap*, _ns4__alert_info_area_geocode *, const char*, const char*);

inline int soap_read__ns4__alert_info_area_geocode(struct soap *soap, _ns4__alert_info_area_geocode *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__ns4__alert_info_area_geocode(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns4__alert_info_area_geocode(struct soap *soap, const char *URL, _ns4__alert_info_area_geocode *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__ns4__alert_info_area_geocode(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__ns4__alert_info_area_geocode(struct soap *soap, _ns4__alert_info_area_geocode *p)
{
	if (::soap_read__ns4__alert_info_area_geocode(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__ns4__alert_info_area_DEFINED
#define SOAP_TYPE__ns4__alert_info_area_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns4__alert_info_area(struct soap*, const char*, int, const _ns4__alert_info_area *, const char*);
SOAP_FMAC3 _ns4__alert_info_area * SOAP_FMAC4 soap_in__ns4__alert_info_area(struct soap*, const char*, _ns4__alert_info_area *, const char*);
SOAP_FMAC1 _ns4__alert_info_area * SOAP_FMAC2 soap_instantiate__ns4__alert_info_area(struct soap*, int, const char*, const char*, size_t*);

inline _ns4__alert_info_area * soap_new__ns4__alert_info_area(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns4__alert_info_area(soap, n, NULL, NULL, NULL);
}

inline _ns4__alert_info_area * soap_new_req__ns4__alert_info_area(
	struct soap *soap,
	const std::string& areaDesc)
{
	_ns4__alert_info_area *_p = ::soap_new__ns4__alert_info_area(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns4__alert_info_area::areaDesc = areaDesc;
	}
	return _p;
}

inline _ns4__alert_info_area * soap_new_set__ns4__alert_info_area(
	struct soap *soap,
	const std::string& areaDesc,
	const std::vector<std::string> & polygon,
	const std::vector<std::string> & circle,
	const std::vector<_ns4__alert_info_area_geocode> & geocode,
	std::string *altitude,
	std::string *ceiling)
{
	_ns4__alert_info_area *_p = ::soap_new__ns4__alert_info_area(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns4__alert_info_area::areaDesc = areaDesc;
		_p->_ns4__alert_info_area::polygon = polygon;
		_p->_ns4__alert_info_area::circle = circle;
		_p->_ns4__alert_info_area::geocode = geocode;
		_p->_ns4__alert_info_area::altitude = altitude;
		_p->_ns4__alert_info_area::ceiling = ceiling;
	}
	return _p;
}

inline int soap_write__ns4__alert_info_area(struct soap *soap, _ns4__alert_info_area const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns4:alert-info-area", p->soap_type() == SOAP_TYPE__ns4__alert_info_area ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns4__alert_info_area(struct soap *soap, const char *URL, _ns4__alert_info_area const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns4:alert-info-area", p->soap_type() == SOAP_TYPE__ns4__alert_info_area ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__ns4__alert_info_area(struct soap *soap, const char *URL, _ns4__alert_info_area const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns4:alert-info-area", p->soap_type() == SOAP_TYPE__ns4__alert_info_area ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns4__alert_info_area(struct soap *soap, const char *URL, _ns4__alert_info_area const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns4:alert-info-area", p->soap_type() == SOAP_TYPE__ns4__alert_info_area ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns4__alert_info_area * SOAP_FMAC4 soap_get__ns4__alert_info_area(struct soap*, _ns4__alert_info_area *, const char*, const char*);

inline int soap_read__ns4__alert_info_area(struct soap *soap, _ns4__alert_info_area *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__ns4__alert_info_area(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns4__alert_info_area(struct soap *soap, const char *URL, _ns4__alert_info_area *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__ns4__alert_info_area(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__ns4__alert_info_area(struct soap *soap, _ns4__alert_info_area *p)
{
	if (::soap_read__ns4__alert_info_area(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__ns4__alert_info_resource_DEFINED
#define SOAP_TYPE__ns4__alert_info_resource_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns4__alert_info_resource(struct soap*, const char*, int, const _ns4__alert_info_resource *, const char*);
SOAP_FMAC3 _ns4__alert_info_resource * SOAP_FMAC4 soap_in__ns4__alert_info_resource(struct soap*, const char*, _ns4__alert_info_resource *, const char*);
SOAP_FMAC1 _ns4__alert_info_resource * SOAP_FMAC2 soap_instantiate__ns4__alert_info_resource(struct soap*, int, const char*, const char*, size_t*);

inline _ns4__alert_info_resource * soap_new__ns4__alert_info_resource(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns4__alert_info_resource(soap, n, NULL, NULL, NULL);
}

inline _ns4__alert_info_resource * soap_new_req__ns4__alert_info_resource(
	struct soap *soap,
	const std::string& resourceDesc,
	const std::string& mimeType)
{
	_ns4__alert_info_resource *_p = ::soap_new__ns4__alert_info_resource(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns4__alert_info_resource::resourceDesc = resourceDesc;
		_p->_ns4__alert_info_resource::mimeType = mimeType;
	}
	return _p;
}

inline _ns4__alert_info_resource * soap_new_set__ns4__alert_info_resource(
	struct soap *soap,
	const std::string& resourceDesc,
	const std::string& mimeType,
	std::string *size,
	std::string *uri,
	std::string *derefUri,
	std::string *digest)
{
	_ns4__alert_info_resource *_p = ::soap_new__ns4__alert_info_resource(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns4__alert_info_resource::resourceDesc = resourceDesc;
		_p->_ns4__alert_info_resource::mimeType = mimeType;
		_p->_ns4__alert_info_resource::size = size;
		_p->_ns4__alert_info_resource::uri = uri;
		_p->_ns4__alert_info_resource::derefUri = derefUri;
		_p->_ns4__alert_info_resource::digest = digest;
	}
	return _p;
}

inline int soap_write__ns4__alert_info_resource(struct soap *soap, _ns4__alert_info_resource const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns4:alert-info-resource", p->soap_type() == SOAP_TYPE__ns4__alert_info_resource ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns4__alert_info_resource(struct soap *soap, const char *URL, _ns4__alert_info_resource const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns4:alert-info-resource", p->soap_type() == SOAP_TYPE__ns4__alert_info_resource ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__ns4__alert_info_resource(struct soap *soap, const char *URL, _ns4__alert_info_resource const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns4:alert-info-resource", p->soap_type() == SOAP_TYPE__ns4__alert_info_resource ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns4__alert_info_resource(struct soap *soap, const char *URL, _ns4__alert_info_resource const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns4:alert-info-resource", p->soap_type() == SOAP_TYPE__ns4__alert_info_resource ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns4__alert_info_resource * SOAP_FMAC4 soap_get__ns4__alert_info_resource(struct soap*, _ns4__alert_info_resource *, const char*, const char*);

inline int soap_read__ns4__alert_info_resource(struct soap *soap, _ns4__alert_info_resource *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__ns4__alert_info_resource(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns4__alert_info_resource(struct soap *soap, const char *URL, _ns4__alert_info_resource *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__ns4__alert_info_resource(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__ns4__alert_info_resource(struct soap *soap, _ns4__alert_info_resource *p)
{
	if (::soap_read__ns4__alert_info_resource(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__ns4__alert_info_parameter_DEFINED
#define SOAP_TYPE__ns4__alert_info_parameter_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns4__alert_info_parameter(struct soap*, const char*, int, const _ns4__alert_info_parameter *, const char*);
SOAP_FMAC3 _ns4__alert_info_parameter * SOAP_FMAC4 soap_in__ns4__alert_info_parameter(struct soap*, const char*, _ns4__alert_info_parameter *, const char*);
SOAP_FMAC1 _ns4__alert_info_parameter * SOAP_FMAC2 soap_instantiate__ns4__alert_info_parameter(struct soap*, int, const char*, const char*, size_t*);

inline _ns4__alert_info_parameter * soap_new__ns4__alert_info_parameter(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns4__alert_info_parameter(soap, n, NULL, NULL, NULL);
}

inline _ns4__alert_info_parameter * soap_new_req__ns4__alert_info_parameter(
	struct soap *soap,
	const std::string& valueName,
	const std::string& value)
{
	_ns4__alert_info_parameter *_p = ::soap_new__ns4__alert_info_parameter(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns4__alert_info_parameter::valueName = valueName;
		_p->_ns4__alert_info_parameter::value = value;
	}
	return _p;
}

inline _ns4__alert_info_parameter * soap_new_set__ns4__alert_info_parameter(
	struct soap *soap,
	const std::string& valueName,
	const std::string& value)
{
	_ns4__alert_info_parameter *_p = ::soap_new__ns4__alert_info_parameter(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns4__alert_info_parameter::valueName = valueName;
		_p->_ns4__alert_info_parameter::value = value;
	}
	return _p;
}

inline int soap_write__ns4__alert_info_parameter(struct soap *soap, _ns4__alert_info_parameter const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns4:alert-info-parameter", p->soap_type() == SOAP_TYPE__ns4__alert_info_parameter ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns4__alert_info_parameter(struct soap *soap, const char *URL, _ns4__alert_info_parameter const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns4:alert-info-parameter", p->soap_type() == SOAP_TYPE__ns4__alert_info_parameter ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__ns4__alert_info_parameter(struct soap *soap, const char *URL, _ns4__alert_info_parameter const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns4:alert-info-parameter", p->soap_type() == SOAP_TYPE__ns4__alert_info_parameter ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns4__alert_info_parameter(struct soap *soap, const char *URL, _ns4__alert_info_parameter const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns4:alert-info-parameter", p->soap_type() == SOAP_TYPE__ns4__alert_info_parameter ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns4__alert_info_parameter * SOAP_FMAC4 soap_get__ns4__alert_info_parameter(struct soap*, _ns4__alert_info_parameter *, const char*, const char*);

inline int soap_read__ns4__alert_info_parameter(struct soap *soap, _ns4__alert_info_parameter *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__ns4__alert_info_parameter(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns4__alert_info_parameter(struct soap *soap, const char *URL, _ns4__alert_info_parameter *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__ns4__alert_info_parameter(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__ns4__alert_info_parameter(struct soap *soap, _ns4__alert_info_parameter *p)
{
	if (::soap_read__ns4__alert_info_parameter(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__ns4__alert_info_eventCode_DEFINED
#define SOAP_TYPE__ns4__alert_info_eventCode_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns4__alert_info_eventCode(struct soap*, const char*, int, const _ns4__alert_info_eventCode *, const char*);
SOAP_FMAC3 _ns4__alert_info_eventCode * SOAP_FMAC4 soap_in__ns4__alert_info_eventCode(struct soap*, const char*, _ns4__alert_info_eventCode *, const char*);
SOAP_FMAC1 _ns4__alert_info_eventCode * SOAP_FMAC2 soap_instantiate__ns4__alert_info_eventCode(struct soap*, int, const char*, const char*, size_t*);

inline _ns4__alert_info_eventCode * soap_new__ns4__alert_info_eventCode(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns4__alert_info_eventCode(soap, n, NULL, NULL, NULL);
}

inline _ns4__alert_info_eventCode * soap_new_req__ns4__alert_info_eventCode(
	struct soap *soap,
	const std::string& valueName,
	const std::string& value)
{
	_ns4__alert_info_eventCode *_p = ::soap_new__ns4__alert_info_eventCode(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns4__alert_info_eventCode::valueName = valueName;
		_p->_ns4__alert_info_eventCode::value = value;
	}
	return _p;
}

inline _ns4__alert_info_eventCode * soap_new_set__ns4__alert_info_eventCode(
	struct soap *soap,
	const std::string& valueName,
	const std::string& value)
{
	_ns4__alert_info_eventCode *_p = ::soap_new__ns4__alert_info_eventCode(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns4__alert_info_eventCode::valueName = valueName;
		_p->_ns4__alert_info_eventCode::value = value;
	}
	return _p;
}

inline int soap_write__ns4__alert_info_eventCode(struct soap *soap, _ns4__alert_info_eventCode const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns4:alert-info-eventCode", p->soap_type() == SOAP_TYPE__ns4__alert_info_eventCode ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns4__alert_info_eventCode(struct soap *soap, const char *URL, _ns4__alert_info_eventCode const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns4:alert-info-eventCode", p->soap_type() == SOAP_TYPE__ns4__alert_info_eventCode ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__ns4__alert_info_eventCode(struct soap *soap, const char *URL, _ns4__alert_info_eventCode const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns4:alert-info-eventCode", p->soap_type() == SOAP_TYPE__ns4__alert_info_eventCode ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns4__alert_info_eventCode(struct soap *soap, const char *URL, _ns4__alert_info_eventCode const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns4:alert-info-eventCode", p->soap_type() == SOAP_TYPE__ns4__alert_info_eventCode ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns4__alert_info_eventCode * SOAP_FMAC4 soap_get__ns4__alert_info_eventCode(struct soap*, _ns4__alert_info_eventCode *, const char*, const char*);

inline int soap_read__ns4__alert_info_eventCode(struct soap *soap, _ns4__alert_info_eventCode *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__ns4__alert_info_eventCode(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns4__alert_info_eventCode(struct soap *soap, const char *URL, _ns4__alert_info_eventCode *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__ns4__alert_info_eventCode(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__ns4__alert_info_eventCode(struct soap *soap, _ns4__alert_info_eventCode *p)
{
	if (::soap_read__ns4__alert_info_eventCode(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__ns4__alert_info_DEFINED
#define SOAP_TYPE__ns4__alert_info_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns4__alert_info(struct soap*, const char*, int, const _ns4__alert_info *, const char*);
SOAP_FMAC3 _ns4__alert_info * SOAP_FMAC4 soap_in__ns4__alert_info(struct soap*, const char*, _ns4__alert_info *, const char*);
SOAP_FMAC1 _ns4__alert_info * SOAP_FMAC2 soap_instantiate__ns4__alert_info(struct soap*, int, const char*, const char*, size_t*);

inline _ns4__alert_info * soap_new__ns4__alert_info(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns4__alert_info(soap, n, NULL, NULL, NULL);
}

inline _ns4__alert_info * soap_new_req__ns4__alert_info(
	struct soap *soap,
	const std::vector<enum _ns4__alert_info_category> & category,
	const std::string& event,
	enum _ns4__alert_info_urgency urgency,
	enum _ns4__alert_info_severity severity,
	enum _ns4__alert_info_certainty certainty)
{
	_ns4__alert_info *_p = ::soap_new__ns4__alert_info(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns4__alert_info::category = category;
		_p->_ns4__alert_info::event = event;
		_p->_ns4__alert_info::urgency = urgency;
		_p->_ns4__alert_info::severity = severity;
		_p->_ns4__alert_info::certainty = certainty;
	}
	return _p;
}

inline _ns4__alert_info * soap_new_set__ns4__alert_info(
	struct soap *soap,
	std::string *language,
	const std::vector<enum _ns4__alert_info_category> & category,
	const std::string& event,
	const std::vector<enum _ns4__alert_info_responseType> & responseType,
	enum _ns4__alert_info_urgency urgency,
	enum _ns4__alert_info_severity severity,
	enum _ns4__alert_info_certainty certainty,
	std::string *audience,
	const std::vector<_ns4__alert_info_eventCode> & eventCode,
	time_t *effective,
	time_t *onset,
	time_t *expires,
	std::string *senderName,
	std::string *headline,
	std::string *description,
	std::string *instruction,
	std::string *web,
	std::string *contact,
	const std::vector<_ns4__alert_info_parameter> & parameter,
	const std::vector<_ns4__alert_info_resource> & resource,
	const std::vector<_ns4__alert_info_area> & area)
{
	_ns4__alert_info *_p = ::soap_new__ns4__alert_info(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns4__alert_info::language = language;
		_p->_ns4__alert_info::category = category;
		_p->_ns4__alert_info::event = event;
		_p->_ns4__alert_info::responseType = responseType;
		_p->_ns4__alert_info::urgency = urgency;
		_p->_ns4__alert_info::severity = severity;
		_p->_ns4__alert_info::certainty = certainty;
		_p->_ns4__alert_info::audience = audience;
		_p->_ns4__alert_info::eventCode = eventCode;
		_p->_ns4__alert_info::effective = effective;
		_p->_ns4__alert_info::onset = onset;
		_p->_ns4__alert_info::expires = expires;
		_p->_ns4__alert_info::senderName = senderName;
		_p->_ns4__alert_info::headline = headline;
		_p->_ns4__alert_info::description = description;
		_p->_ns4__alert_info::instruction = instruction;
		_p->_ns4__alert_info::web = web;
		_p->_ns4__alert_info::contact = contact;
		_p->_ns4__alert_info::parameter = parameter;
		_p->_ns4__alert_info::resource = resource;
		_p->_ns4__alert_info::area = area;
	}
	return _p;
}

inline int soap_write__ns4__alert_info(struct soap *soap, _ns4__alert_info const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns4:alert-info", p->soap_type() == SOAP_TYPE__ns4__alert_info ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns4__alert_info(struct soap *soap, const char *URL, _ns4__alert_info const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns4:alert-info", p->soap_type() == SOAP_TYPE__ns4__alert_info ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__ns4__alert_info(struct soap *soap, const char *URL, _ns4__alert_info const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns4:alert-info", p->soap_type() == SOAP_TYPE__ns4__alert_info ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns4__alert_info(struct soap *soap, const char *URL, _ns4__alert_info const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns4:alert-info", p->soap_type() == SOAP_TYPE__ns4__alert_info ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns4__alert_info * SOAP_FMAC4 soap_get__ns4__alert_info(struct soap*, _ns4__alert_info *, const char*, const char*);

inline int soap_read__ns4__alert_info(struct soap *soap, _ns4__alert_info *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__ns4__alert_info(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns4__alert_info(struct soap *soap, const char *URL, _ns4__alert_info *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__ns4__alert_info(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__ns4__alert_info(struct soap *soap, _ns4__alert_info *p)
{
	if (::soap_read__ns4__alert_info(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__ns1__CAPHeaderTypeDef_DEFINED
#define SOAP_TYPE__ns1__CAPHeaderTypeDef_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__CAPHeaderTypeDef(struct soap*, const char*, int, const _ns1__CAPHeaderTypeDef *, const char*);
SOAP_FMAC3 _ns1__CAPHeaderTypeDef * SOAP_FMAC4 soap_in__ns1__CAPHeaderTypeDef(struct soap*, const char*, _ns1__CAPHeaderTypeDef *, const char*);
SOAP_FMAC1 _ns1__CAPHeaderTypeDef * SOAP_FMAC2 soap_instantiate__ns1__CAPHeaderTypeDef(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__CAPHeaderTypeDef * soap_new__ns1__CAPHeaderTypeDef(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__CAPHeaderTypeDef(soap, n, NULL, NULL, NULL);
}

inline _ns1__CAPHeaderTypeDef * soap_new_req__ns1__CAPHeaderTypeDef(
	struct soap *soap)
{
	_ns1__CAPHeaderTypeDef *_p = ::soap_new__ns1__CAPHeaderTypeDef(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__CAPHeaderTypeDef * soap_new_set__ns1__CAPHeaderTypeDef(
	struct soap *soap,
	std::string *logonUser,
	int *logonCogId)
{
	_ns1__CAPHeaderTypeDef *_p = ::soap_new__ns1__CAPHeaderTypeDef(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__CAPHeaderTypeDef::logonUser = logonUser;
		_p->_ns1__CAPHeaderTypeDef::logonCogId = logonCogId;
	}
	return _p;
}

inline int soap_write__ns1__CAPHeaderTypeDef(struct soap *soap, _ns1__CAPHeaderTypeDef const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:CAPHeaderTypeDef", p->soap_type() == SOAP_TYPE__ns1__CAPHeaderTypeDef ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__CAPHeaderTypeDef(struct soap *soap, const char *URL, _ns1__CAPHeaderTypeDef const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:CAPHeaderTypeDef", p->soap_type() == SOAP_TYPE__ns1__CAPHeaderTypeDef ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__ns1__CAPHeaderTypeDef(struct soap *soap, const char *URL, _ns1__CAPHeaderTypeDef const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:CAPHeaderTypeDef", p->soap_type() == SOAP_TYPE__ns1__CAPHeaderTypeDef ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns1__CAPHeaderTypeDef(struct soap *soap, const char *URL, _ns1__CAPHeaderTypeDef const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:CAPHeaderTypeDef", p->soap_type() == SOAP_TYPE__ns1__CAPHeaderTypeDef ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__CAPHeaderTypeDef * SOAP_FMAC4 soap_get__ns1__CAPHeaderTypeDef(struct soap*, _ns1__CAPHeaderTypeDef *, const char*, const char*);

inline int soap_read__ns1__CAPHeaderTypeDef(struct soap *soap, _ns1__CAPHeaderTypeDef *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__ns1__CAPHeaderTypeDef(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__CAPHeaderTypeDef(struct soap *soap, const char *URL, _ns1__CAPHeaderTypeDef *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__ns1__CAPHeaderTypeDef(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__ns1__CAPHeaderTypeDef(struct soap *soap, _ns1__CAPHeaderTypeDef *p)
{
	if (::soap_read__ns1__CAPHeaderTypeDef(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__ns1__messageResponseTypeDef_DEFINED
#define SOAP_TYPE__ns1__messageResponseTypeDef_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__messageResponseTypeDef(struct soap*, const char*, int, const _ns1__messageResponseTypeDef *, const char*);
SOAP_FMAC3 _ns1__messageResponseTypeDef * SOAP_FMAC4 soap_in__ns1__messageResponseTypeDef(struct soap*, const char*, _ns1__messageResponseTypeDef *, const char*);
SOAP_FMAC1 _ns1__messageResponseTypeDef * SOAP_FMAC2 soap_instantiate__ns1__messageResponseTypeDef(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__messageResponseTypeDef * soap_new__ns1__messageResponseTypeDef(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__messageResponseTypeDef(soap, n, NULL, NULL, NULL);
}

inline _ns1__messageResponseTypeDef * soap_new_req__ns1__messageResponseTypeDef(
	struct soap *soap)
{
	_ns1__messageResponseTypeDef *_p = ::soap_new__ns1__messageResponseTypeDef(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__messageResponseTypeDef * soap_new_set__ns1__messageResponseTypeDef(
	struct soap *soap,
	const std::vector<_ns4__alert *> & ns4__alert)
{
	_ns1__messageResponseTypeDef *_p = ::soap_new__ns1__messageResponseTypeDef(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__messageResponseTypeDef::ns4__alert = ns4__alert;
	}
	return _p;
}

inline int soap_write__ns1__messageResponseTypeDef(struct soap *soap, _ns1__messageResponseTypeDef const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:messageResponseTypeDef", p->soap_type() == SOAP_TYPE__ns1__messageResponseTypeDef ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__messageResponseTypeDef(struct soap *soap, const char *URL, _ns1__messageResponseTypeDef const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:messageResponseTypeDef", p->soap_type() == SOAP_TYPE__ns1__messageResponseTypeDef ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__ns1__messageResponseTypeDef(struct soap *soap, const char *URL, _ns1__messageResponseTypeDef const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:messageResponseTypeDef", p->soap_type() == SOAP_TYPE__ns1__messageResponseTypeDef ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns1__messageResponseTypeDef(struct soap *soap, const char *URL, _ns1__messageResponseTypeDef const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:messageResponseTypeDef", p->soap_type() == SOAP_TYPE__ns1__messageResponseTypeDef ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__messageResponseTypeDef * SOAP_FMAC4 soap_get__ns1__messageResponseTypeDef(struct soap*, _ns1__messageResponseTypeDef *, const char*, const char*);

inline int soap_read__ns1__messageResponseTypeDef(struct soap *soap, _ns1__messageResponseTypeDef *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__ns1__messageResponseTypeDef(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__messageResponseTypeDef(struct soap *soap, const char *URL, _ns1__messageResponseTypeDef *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__ns1__messageResponseTypeDef(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__ns1__messageResponseTypeDef(struct soap *soap, _ns1__messageResponseTypeDef *p)
{
	if (::soap_read__ns1__messageResponseTypeDef(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__ns1__postCAPResponseTypeDef_DEFINED
#define SOAP_TYPE__ns1__postCAPResponseTypeDef_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__postCAPResponseTypeDef(struct soap*, const char*, int, const _ns1__postCAPResponseTypeDef *, const char*);
SOAP_FMAC3 _ns1__postCAPResponseTypeDef * SOAP_FMAC4 soap_in__ns1__postCAPResponseTypeDef(struct soap*, const char*, _ns1__postCAPResponseTypeDef *, const char*);
SOAP_FMAC1 _ns1__postCAPResponseTypeDef * SOAP_FMAC2 soap_instantiate__ns1__postCAPResponseTypeDef(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__postCAPResponseTypeDef * soap_new__ns1__postCAPResponseTypeDef(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__postCAPResponseTypeDef(soap, n, NULL, NULL, NULL);
}

inline _ns1__postCAPResponseTypeDef * soap_new_req__ns1__postCAPResponseTypeDef(
	struct soap *soap,
	std::string *postCAPReturn)
{
	_ns1__postCAPResponseTypeDef *_p = ::soap_new__ns1__postCAPResponseTypeDef(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__postCAPResponseTypeDef::postCAPReturn = postCAPReturn;
	}
	return _p;
}

inline _ns1__postCAPResponseTypeDef * soap_new_set__ns1__postCAPResponseTypeDef(
	struct soap *soap,
	std::string *postCAPReturn)
{
	_ns1__postCAPResponseTypeDef *_p = ::soap_new__ns1__postCAPResponseTypeDef(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__postCAPResponseTypeDef::postCAPReturn = postCAPReturn;
	}
	return _p;
}

inline int soap_write__ns1__postCAPResponseTypeDef(struct soap *soap, _ns1__postCAPResponseTypeDef const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:postCAPResponseTypeDef", p->soap_type() == SOAP_TYPE__ns1__postCAPResponseTypeDef ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__postCAPResponseTypeDef(struct soap *soap, const char *URL, _ns1__postCAPResponseTypeDef const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:postCAPResponseTypeDef", p->soap_type() == SOAP_TYPE__ns1__postCAPResponseTypeDef ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__ns1__postCAPResponseTypeDef(struct soap *soap, const char *URL, _ns1__postCAPResponseTypeDef const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:postCAPResponseTypeDef", p->soap_type() == SOAP_TYPE__ns1__postCAPResponseTypeDef ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns1__postCAPResponseTypeDef(struct soap *soap, const char *URL, _ns1__postCAPResponseTypeDef const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:postCAPResponseTypeDef", p->soap_type() == SOAP_TYPE__ns1__postCAPResponseTypeDef ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__postCAPResponseTypeDef * SOAP_FMAC4 soap_get__ns1__postCAPResponseTypeDef(struct soap*, _ns1__postCAPResponseTypeDef *, const char*, const char*);

inline int soap_read__ns1__postCAPResponseTypeDef(struct soap *soap, _ns1__postCAPResponseTypeDef *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__ns1__postCAPResponseTypeDef(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__postCAPResponseTypeDef(struct soap *soap, const char *URL, _ns1__postCAPResponseTypeDef *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__ns1__postCAPResponseTypeDef(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__ns1__postCAPResponseTypeDef(struct soap *soap, _ns1__postCAPResponseTypeDef *p)
{
	if (::soap_read__ns1__postCAPResponseTypeDef(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__ns1__CAPServiceException_DEFINED
#define SOAP_TYPE__ns1__CAPServiceException_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__CAPServiceException(struct soap*, const char*, int, const _ns1__CAPServiceException *, const char*);
SOAP_FMAC3 _ns1__CAPServiceException * SOAP_FMAC4 soap_in__ns1__CAPServiceException(struct soap*, const char*, _ns1__CAPServiceException *, const char*);
SOAP_FMAC1 _ns1__CAPServiceException * SOAP_FMAC2 soap_instantiate__ns1__CAPServiceException(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__CAPServiceException * soap_new__ns1__CAPServiceException(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__CAPServiceException(soap, n, NULL, NULL, NULL);
}

inline _ns1__CAPServiceException * soap_new_req__ns1__CAPServiceException(
	struct soap *soap,
	std::string *errorCode,
	std::string *message)
{
	_ns1__CAPServiceException *_p = ::soap_new__ns1__CAPServiceException(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__CAPServiceException::errorCode = errorCode;
		_p->_ns1__CAPServiceException::message = message;
	}
	return _p;
}

inline _ns1__CAPServiceException * soap_new_set__ns1__CAPServiceException(
	struct soap *soap,
	std::string *errorCode,
	std::string *message)
{
	_ns1__CAPServiceException *_p = ::soap_new__ns1__CAPServiceException(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__CAPServiceException::errorCode = errorCode;
		_p->_ns1__CAPServiceException::message = message;
	}
	return _p;
}

inline int soap_write__ns1__CAPServiceException(struct soap *soap, _ns1__CAPServiceException const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:CAPServiceException", p->soap_type() == SOAP_TYPE__ns1__CAPServiceException ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__CAPServiceException(struct soap *soap, const char *URL, _ns1__CAPServiceException const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:CAPServiceException", p->soap_type() == SOAP_TYPE__ns1__CAPServiceException ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__ns1__CAPServiceException(struct soap *soap, const char *URL, _ns1__CAPServiceException const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:CAPServiceException", p->soap_type() == SOAP_TYPE__ns1__CAPServiceException ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns1__CAPServiceException(struct soap *soap, const char *URL, _ns1__CAPServiceException const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:CAPServiceException", p->soap_type() == SOAP_TYPE__ns1__CAPServiceException ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__CAPServiceException * SOAP_FMAC4 soap_get__ns1__CAPServiceException(struct soap*, _ns1__CAPServiceException *, const char*, const char*);

inline int soap_read__ns1__CAPServiceException(struct soap *soap, _ns1__CAPServiceException *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__ns1__CAPServiceException(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__CAPServiceException(struct soap *soap, const char *URL, _ns1__CAPServiceException *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__ns1__CAPServiceException(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__ns1__CAPServiceException(struct soap *soap, _ns1__CAPServiceException *p)
{
	if (::soap_read__ns1__CAPServiceException(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__ns1__postCAPRequestTypeDef_DEFINED
#define SOAP_TYPE__ns1__postCAPRequestTypeDef_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__postCAPRequestTypeDef(struct soap*, const char*, int, const _ns1__postCAPRequestTypeDef *, const char*);
SOAP_FMAC3 _ns1__postCAPRequestTypeDef * SOAP_FMAC4 soap_in__ns1__postCAPRequestTypeDef(struct soap*, const char*, _ns1__postCAPRequestTypeDef *, const char*);
SOAP_FMAC1 _ns1__postCAPRequestTypeDef * SOAP_FMAC2 soap_instantiate__ns1__postCAPRequestTypeDef(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__postCAPRequestTypeDef * soap_new__ns1__postCAPRequestTypeDef(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__postCAPRequestTypeDef(soap, n, NULL, NULL, NULL);
}

inline _ns1__postCAPRequestTypeDef * soap_new_req__ns1__postCAPRequestTypeDef(
	struct soap *soap,
	_ns4__alert *ns4__alert)
{
	_ns1__postCAPRequestTypeDef *_p = ::soap_new__ns1__postCAPRequestTypeDef(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__postCAPRequestTypeDef::ns4__alert = ns4__alert;
	}
	return _p;
}

inline _ns1__postCAPRequestTypeDef * soap_new_set__ns1__postCAPRequestTypeDef(
	struct soap *soap,
	_ns4__alert *ns4__alert)
{
	_ns1__postCAPRequestTypeDef *_p = ::soap_new__ns1__postCAPRequestTypeDef(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__postCAPRequestTypeDef::ns4__alert = ns4__alert;
	}
	return _p;
}

inline int soap_write__ns1__postCAPRequestTypeDef(struct soap *soap, _ns1__postCAPRequestTypeDef const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:postCAPRequestTypeDef", p->soap_type() == SOAP_TYPE__ns1__postCAPRequestTypeDef ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__postCAPRequestTypeDef(struct soap *soap, const char *URL, _ns1__postCAPRequestTypeDef const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:postCAPRequestTypeDef", p->soap_type() == SOAP_TYPE__ns1__postCAPRequestTypeDef ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__ns1__postCAPRequestTypeDef(struct soap *soap, const char *URL, _ns1__postCAPRequestTypeDef const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:postCAPRequestTypeDef", p->soap_type() == SOAP_TYPE__ns1__postCAPRequestTypeDef ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns1__postCAPRequestTypeDef(struct soap *soap, const char *URL, _ns1__postCAPRequestTypeDef const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:postCAPRequestTypeDef", p->soap_type() == SOAP_TYPE__ns1__postCAPRequestTypeDef ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__postCAPRequestTypeDef * SOAP_FMAC4 soap_get__ns1__postCAPRequestTypeDef(struct soap*, _ns1__postCAPRequestTypeDef *, const char*, const char*);

inline int soap_read__ns1__postCAPRequestTypeDef(struct soap *soap, _ns1__postCAPRequestTypeDef *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__ns1__postCAPRequestTypeDef(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__postCAPRequestTypeDef(struct soap *soap, const char *URL, _ns1__postCAPRequestTypeDef *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__ns1__postCAPRequestTypeDef(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__ns1__postCAPRequestTypeDef(struct soap *soap, _ns1__postCAPRequestTypeDef *p)
{
	if (::soap_read__ns1__postCAPRequestTypeDef(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__ns4__alert_DEFINED
#define SOAP_TYPE__ns4__alert_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns4__alert(struct soap*, const char*, int, const _ns4__alert *, const char*);
SOAP_FMAC3 _ns4__alert * SOAP_FMAC4 soap_in__ns4__alert(struct soap*, const char*, _ns4__alert *, const char*);
SOAP_FMAC1 _ns4__alert * SOAP_FMAC2 soap_instantiate__ns4__alert(struct soap*, int, const char*, const char*, size_t*);

inline _ns4__alert * soap_new__ns4__alert(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns4__alert(soap, n, NULL, NULL, NULL);
}

inline _ns4__alert * soap_new_req__ns4__alert(
	struct soap *soap,
	const std::string& identifier,
	const std::string& sender,
	time_t sent,
	enum _ns4__alert_status status,
	enum _ns4__alert_msgType msgType,
	enum _ns4__alert_scope scope)
{
	_ns4__alert *_p = ::soap_new__ns4__alert(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns4__alert::identifier = identifier;
		_p->_ns4__alert::sender = sender;
		_p->_ns4__alert::sent = sent;
		_p->_ns4__alert::status = status;
		_p->_ns4__alert::msgType = msgType;
		_p->_ns4__alert::scope = scope;
	}
	return _p;
}

inline _ns4__alert * soap_new_set__ns4__alert(
	struct soap *soap,
	const std::string& identifier,
	const std::string& sender,
	time_t sent,
	enum _ns4__alert_status status,
	enum _ns4__alert_msgType msgType,
	std::string *source,
	enum _ns4__alert_scope scope,
	std::string *restriction,
	std::string *addresses,
	const std::vector<std::string> & code,
	std::string *note,
	std::string *references,
	std::string *incidents,
	const std::vector<_ns4__alert_info> & info,
	const std::vector<char *> & __any)
{
	_ns4__alert *_p = ::soap_new__ns4__alert(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns4__alert::identifier = identifier;
		_p->_ns4__alert::sender = sender;
		_p->_ns4__alert::sent = sent;
		_p->_ns4__alert::status = status;
		_p->_ns4__alert::msgType = msgType;
		_p->_ns4__alert::source = source;
		_p->_ns4__alert::scope = scope;
		_p->_ns4__alert::restriction = restriction;
		_p->_ns4__alert::addresses = addresses;
		_p->_ns4__alert::code = code;
		_p->_ns4__alert::note = note;
		_p->_ns4__alert::references = references;
		_p->_ns4__alert::incidents = incidents;
		_p->_ns4__alert::info = info;
		_p->_ns4__alert::__any = __any;
	}
	return _p;
}

inline int soap_write__ns4__alert(struct soap *soap, _ns4__alert const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns4:alert", p->soap_type() == SOAP_TYPE__ns4__alert ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns4__alert(struct soap *soap, const char *URL, _ns4__alert const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns4:alert", p->soap_type() == SOAP_TYPE__ns4__alert ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__ns4__alert(struct soap *soap, const char *URL, _ns4__alert const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns4:alert", p->soap_type() == SOAP_TYPE__ns4__alert ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns4__alert(struct soap *soap, const char *URL, _ns4__alert const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns4:alert", p->soap_type() == SOAP_TYPE__ns4__alert ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns4__alert * SOAP_FMAC4 soap_get__ns4__alert(struct soap*, _ns4__alert *, const char*, const char*);

inline int soap_read__ns4__alert(struct soap *soap, _ns4__alert *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__ns4__alert(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns4__alert(struct soap *soap, const char *URL, _ns4__alert *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__ns4__alert(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__ns4__alert(struct soap *soap, _ns4__alert *p)
{
	if (::soap_read__ns4__alert(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__ns3__parameterListItem_DEFINED
#define SOAP_TYPE__ns3__parameterListItem_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns3__parameterListItem(struct soap*, const char*, int, const _ns3__parameterListItem *, const char*);
SOAP_FMAC3 _ns3__parameterListItem * SOAP_FMAC4 soap_in__ns3__parameterListItem(struct soap*, const char*, _ns3__parameterListItem *, const char*);
SOAP_FMAC1 _ns3__parameterListItem * SOAP_FMAC2 soap_instantiate__ns3__parameterListItem(struct soap*, int, const char*, const char*, size_t*);

inline _ns3__parameterListItem * soap_new__ns3__parameterListItem(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns3__parameterListItem(soap, n, NULL, NULL, NULL);
}

inline _ns3__parameterListItem * soap_new_req__ns3__parameterListItem(
	struct soap *soap)
{
	_ns3__parameterListItem *_p = ::soap_new__ns3__parameterListItem(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns3__parameterListItem * soap_new_set__ns3__parameterListItem(
	struct soap *soap,
	std::string *parameterName,
	std::string *parameterValue,
	const std::vector<ns3__subParameterListItem *> & subParaListItem)
{
	_ns3__parameterListItem *_p = ::soap_new__ns3__parameterListItem(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns3__parameterListItem::parameterName = parameterName;
		_p->_ns3__parameterListItem::parameterValue = parameterValue;
		_p->_ns3__parameterListItem::subParaListItem = subParaListItem;
	}
	return _p;
}

inline int soap_write__ns3__parameterListItem(struct soap *soap, _ns3__parameterListItem const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:parameterListItem", p->soap_type() == SOAP_TYPE__ns3__parameterListItem ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns3__parameterListItem(struct soap *soap, const char *URL, _ns3__parameterListItem const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:parameterListItem", p->soap_type() == SOAP_TYPE__ns3__parameterListItem ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__ns3__parameterListItem(struct soap *soap, const char *URL, _ns3__parameterListItem const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:parameterListItem", p->soap_type() == SOAP_TYPE__ns3__parameterListItem ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns3__parameterListItem(struct soap *soap, const char *URL, _ns3__parameterListItem const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:parameterListItem", p->soap_type() == SOAP_TYPE__ns3__parameterListItem ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns3__parameterListItem * SOAP_FMAC4 soap_get__ns3__parameterListItem(struct soap*, _ns3__parameterListItem *, const char*, const char*);

inline int soap_read__ns3__parameterListItem(struct soap *soap, _ns3__parameterListItem *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__ns3__parameterListItem(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns3__parameterListItem(struct soap *soap, const char *URL, _ns3__parameterListItem *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__ns3__parameterListItem(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__ns3__parameterListItem(struct soap *soap, _ns3__parameterListItem *p)
{
	if (::soap_read__ns3__parameterListItem(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns3__subParameterListItem_DEFINED
#define SOAP_TYPE_ns3__subParameterListItem_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__subParameterListItem(struct soap*, const char*, int, const ns3__subParameterListItem *, const char*);
SOAP_FMAC3 ns3__subParameterListItem * SOAP_FMAC4 soap_in_ns3__subParameterListItem(struct soap*, const char*, ns3__subParameterListItem *, const char*);
SOAP_FMAC1 ns3__subParameterListItem * SOAP_FMAC2 soap_instantiate_ns3__subParameterListItem(struct soap*, int, const char*, const char*, size_t*);

inline ns3__subParameterListItem * soap_new_ns3__subParameterListItem(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__subParameterListItem(soap, n, NULL, NULL, NULL);
}

inline ns3__subParameterListItem * soap_new_req_ns3__subParameterListItem(
	struct soap *soap)
{
	ns3__subParameterListItem *_p = ::soap_new_ns3__subParameterListItem(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns3__subParameterListItem * soap_new_set_ns3__subParameterListItem(
	struct soap *soap,
	std::string *subParameterName,
	std::string *subParameterValue)
{
	ns3__subParameterListItem *_p = ::soap_new_ns3__subParameterListItem(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__subParameterListItem::subParameterName = subParameterName;
		_p->ns3__subParameterListItem::subParameterValue = subParameterValue;
	}
	return _p;
}

inline int soap_write_ns3__subParameterListItem(struct soap *soap, ns3__subParameterListItem const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:subParameterListItem", p->soap_type() == SOAP_TYPE_ns3__subParameterListItem ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__subParameterListItem(struct soap *soap, const char *URL, ns3__subParameterListItem const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:subParameterListItem", p->soap_type() == SOAP_TYPE_ns3__subParameterListItem ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns3__subParameterListItem(struct soap *soap, const char *URL, ns3__subParameterListItem const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:subParameterListItem", p->soap_type() == SOAP_TYPE_ns3__subParameterListItem ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__subParameterListItem(struct soap *soap, const char *URL, ns3__subParameterListItem const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:subParameterListItem", p->soap_type() == SOAP_TYPE_ns3__subParameterListItem ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns3__subParameterListItem * SOAP_FMAC4 soap_get_ns3__subParameterListItem(struct soap*, ns3__subParameterListItem *, const char*, const char*);

inline int soap_read_ns3__subParameterListItem(struct soap *soap, ns3__subParameterListItem *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns3__subParameterListItem(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__subParameterListItem(struct soap *soap, const char *URL, ns3__subParameterListItem *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns3__subParameterListItem(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns3__subParameterListItem(struct soap *soap, ns3__subParameterListItem *p)
{
	if (::soap_read_ns3__subParameterListItem(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns3__responseParameterList_DEFINED
#define SOAP_TYPE_ns3__responseParameterList_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__responseParameterList(struct soap*, const char*, int, const ns3__responseParameterList *, const char*);
SOAP_FMAC3 ns3__responseParameterList * SOAP_FMAC4 soap_in_ns3__responseParameterList(struct soap*, const char*, ns3__responseParameterList *, const char*);
SOAP_FMAC1 ns3__responseParameterList * SOAP_FMAC2 soap_instantiate_ns3__responseParameterList(struct soap*, int, const char*, const char*, size_t*);

inline ns3__responseParameterList * soap_new_ns3__responseParameterList(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__responseParameterList(soap, n, NULL, NULL, NULL);
}

inline ns3__responseParameterList * soap_new_req_ns3__responseParameterList(
	struct soap *soap)
{
	ns3__responseParameterList *_p = ::soap_new_ns3__responseParameterList(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns3__responseParameterList * soap_new_set_ns3__responseParameterList(
	struct soap *soap,
	const std::vector<_ns3__parameterListItem *> & parameterListItem,
	std::string *ResponseOperation,
	std::string *ResponseType)
{
	ns3__responseParameterList *_p = ::soap_new_ns3__responseParameterList(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__responseParameterList::parameterListItem = parameterListItem;
		_p->ns3__responseParameterList::ResponseOperation = ResponseOperation;
		_p->ns3__responseParameterList::ResponseType = ResponseType;
	}
	return _p;
}

inline int soap_write_ns3__responseParameterList(struct soap *soap, ns3__responseParameterList const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:responseParameterList", p->soap_type() == SOAP_TYPE_ns3__responseParameterList ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__responseParameterList(struct soap *soap, const char *URL, ns3__responseParameterList const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:responseParameterList", p->soap_type() == SOAP_TYPE_ns3__responseParameterList ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns3__responseParameterList(struct soap *soap, const char *URL, ns3__responseParameterList const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:responseParameterList", p->soap_type() == SOAP_TYPE_ns3__responseParameterList ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__responseParameterList(struct soap *soap, const char *URL, ns3__responseParameterList const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:responseParameterList", p->soap_type() == SOAP_TYPE_ns3__responseParameterList ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns3__responseParameterList * SOAP_FMAC4 soap_get_ns3__responseParameterList(struct soap*, ns3__responseParameterList *, const char*, const char*);

inline int soap_read_ns3__responseParameterList(struct soap *soap, ns3__responseParameterList *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns3__responseParameterList(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__responseParameterList(struct soap *soap, const char *URL, ns3__responseParameterList *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns3__responseParameterList(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns3__responseParameterList(struct soap *soap, ns3__responseParameterList *p)
{
	if (::soap_read_ns3__responseParameterList(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__parameterListItem_DEFINED
#define SOAP_TYPE_ns2__parameterListItem_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__parameterListItem(struct soap*, const char*, int, const ns2__parameterListItem *, const char*);
SOAP_FMAC3 ns2__parameterListItem * SOAP_FMAC4 soap_in_ns2__parameterListItem(struct soap*, const char*, ns2__parameterListItem *, const char*);
SOAP_FMAC1 ns2__parameterListItem * SOAP_FMAC2 soap_instantiate_ns2__parameterListItem(struct soap*, int, const char*, const char*, size_t*);

inline ns2__parameterListItem * soap_new_ns2__parameterListItem(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__parameterListItem(soap, n, NULL, NULL, NULL);
}

inline ns2__parameterListItem * soap_new_req_ns2__parameterListItem(
	struct soap *soap)
{
	ns2__parameterListItem *_p = ::soap_new_ns2__parameterListItem(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns2__parameterListItem * soap_new_set_ns2__parameterListItem(
	struct soap *soap,
	std::string *parameterName,
	std::string *comparisonOp,
	const std::vector<std::string> & parameterValue,
	std::string *logicalOp)
{
	ns2__parameterListItem *_p = ::soap_new_ns2__parameterListItem(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__parameterListItem::parameterName = parameterName;
		_p->ns2__parameterListItem::comparisonOp = comparisonOp;
		_p->ns2__parameterListItem::parameterValue = parameterValue;
		_p->ns2__parameterListItem::logicalOp = logicalOp;
	}
	return _p;
}

inline int soap_write_ns2__parameterListItem(struct soap *soap, ns2__parameterListItem const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:parameterListItem", p->soap_type() == SOAP_TYPE_ns2__parameterListItem ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__parameterListItem(struct soap *soap, const char *URL, ns2__parameterListItem const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:parameterListItem", p->soap_type() == SOAP_TYPE_ns2__parameterListItem ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__parameterListItem(struct soap *soap, const char *URL, ns2__parameterListItem const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:parameterListItem", p->soap_type() == SOAP_TYPE_ns2__parameterListItem ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__parameterListItem(struct soap *soap, const char *URL, ns2__parameterListItem const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:parameterListItem", p->soap_type() == SOAP_TYPE_ns2__parameterListItem ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__parameterListItem * SOAP_FMAC4 soap_get_ns2__parameterListItem(struct soap*, ns2__parameterListItem *, const char*, const char*);

inline int soap_read_ns2__parameterListItem(struct soap *soap, ns2__parameterListItem *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__parameterListItem(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__parameterListItem(struct soap *soap, const char *URL, ns2__parameterListItem *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__parameterListItem(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__parameterListItem(struct soap *soap, ns2__parameterListItem *p)
{
	if (::soap_read_ns2__parameterListItem(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns2__requestParameterList_DEFINED
#define SOAP_TYPE_ns2__requestParameterList_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__requestParameterList(struct soap*, const char*, int, const ns2__requestParameterList *, const char*);
SOAP_FMAC3 ns2__requestParameterList * SOAP_FMAC4 soap_in_ns2__requestParameterList(struct soap*, const char*, ns2__requestParameterList *, const char*);
SOAP_FMAC1 ns2__requestParameterList * SOAP_FMAC2 soap_instantiate_ns2__requestParameterList(struct soap*, int, const char*, const char*, size_t*);

inline ns2__requestParameterList * soap_new_ns2__requestParameterList(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__requestParameterList(soap, n, NULL, NULL, NULL);
}

inline ns2__requestParameterList * soap_new_req_ns2__requestParameterList(
	struct soap *soap)
{
	ns2__requestParameterList *_p = ::soap_new_ns2__requestParameterList(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns2__requestParameterList * soap_new_set_ns2__requestParameterList(
	struct soap *soap,
	std::string *requestAPI,
	std::string *requestOperation,
	const std::vector<ns2__parameterListItem *> & parameters)
{
	ns2__requestParameterList *_p = ::soap_new_ns2__requestParameterList(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__requestParameterList::requestAPI = requestAPI;
		_p->ns2__requestParameterList::requestOperation = requestOperation;
		_p->ns2__requestParameterList::parameters = parameters;
	}
	return _p;
}

inline int soap_write_ns2__requestParameterList(struct soap *soap, ns2__requestParameterList const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:requestParameterList", p->soap_type() == SOAP_TYPE_ns2__requestParameterList ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__requestParameterList(struct soap *soap, const char *URL, ns2__requestParameterList const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:requestParameterList", p->soap_type() == SOAP_TYPE_ns2__requestParameterList ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__requestParameterList(struct soap *soap, const char *URL, ns2__requestParameterList const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:requestParameterList", p->soap_type() == SOAP_TYPE_ns2__requestParameterList ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__requestParameterList(struct soap *soap, const char *URL, ns2__requestParameterList const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:requestParameterList", p->soap_type() == SOAP_TYPE_ns2__requestParameterList ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__requestParameterList * SOAP_FMAC4 soap_get_ns2__requestParameterList(struct soap*, ns2__requestParameterList *, const char*, const char*);

inline int soap_read_ns2__requestParameterList(struct soap *soap, ns2__requestParameterList *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns2__requestParameterList(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__requestParameterList(struct soap *soap, const char *URL, ns2__requestParameterList *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__requestParameterList(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__requestParameterList(struct soap *soap, ns2__requestParameterList *p)
{
	if (::soap_read_ns2__requestParameterList(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_xsd__language_DEFINED
#define SOAP_TYPE_xsd__language_DEFINED

inline void soap_default_xsd__language(struct soap *soap, std::string *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->erase();
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__language(struct soap*, const std::string *);

#define soap_xsd__language2s(soap, a) ((a).c_str())
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__language(struct soap*, const char*, int, const std::string*, const char*);

#define soap_s2xsd__language(soap, s, a) soap_s2stdchar((soap), (s), (a), 5, 0, -1, "([a-zA-Z]{2}|[iI]-[a-zA-Z]+|[xX]-[a-zA-Z]{1,8})(-[a-zA-Z]{1,8})*")
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_xsd__language(struct soap*, const char*, std::string*, const char*);

#define soap_instantiate_xsd__language soap_instantiate_std__string


#define soap_new_xsd__language soap_new_std__string

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__language(struct soap*, const std::string *, const char*, const char*);

inline int soap_write_xsd__language(struct soap *soap, std::string const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_xsd__language(soap, p, "xsd:language", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_xsd__language(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_xsd__language(soap, p, "xsd:language", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_xsd__language(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_xsd__language(soap, p, "xsd:language", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_xsd__language(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_xsd__language(soap, p, "xsd:language", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_xsd__language(struct soap*, std::string *, const char*, const char*);

inline int soap_read_xsd__language(struct soap *soap, std::string *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_xsd__language(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_xsd__language(struct soap *soap, const char *URL, std::string *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_xsd__language(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_xsd__language(struct soap *soap, std::string *p)
{
	if (::soap_read_xsd__language(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_xsd__integer_DEFINED
#define SOAP_TYPE_xsd__integer_DEFINED

inline void soap_default_xsd__integer(struct soap *soap, std::string *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->erase();
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__integer(struct soap*, const std::string *);

#define soap_xsd__integer2s(soap, a) ((a).c_str())
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__integer(struct soap*, const char*, int, const std::string*, const char*);

#define soap_s2xsd__integer(soap, s, a) soap_s2stdchar((soap), (s), (a), 5, 0, -1, "[-+]?\\d+")
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_xsd__integer(struct soap*, const char*, std::string*, const char*);

#define soap_instantiate_xsd__integer soap_instantiate_std__string


#define soap_new_xsd__integer soap_new_std__string

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__integer(struct soap*, const std::string *, const char*, const char*);

inline int soap_write_xsd__integer(struct soap *soap, std::string const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_xsd__integer(soap, p, "xsd:integer", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_xsd__integer(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_xsd__integer(soap, p, "xsd:integer", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_xsd__integer(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_xsd__integer(soap, p, "xsd:integer", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_xsd__integer(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_xsd__integer(soap, p, "xsd:integer", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_xsd__integer(struct soap*, std::string *, const char*, const char*);

inline int soap_read_xsd__integer(struct soap *soap, std::string *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_xsd__integer(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_xsd__integer(struct soap *soap, const char *URL, std::string *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_xsd__integer(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_xsd__integer(struct soap *soap, std::string *p)
{
	if (::soap_read_xsd__integer(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_xsd__decimal_DEFINED
#define SOAP_TYPE_xsd__decimal_DEFINED

inline void soap_default_xsd__decimal(struct soap *soap, std::string *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->erase();
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__decimal(struct soap*, const std::string *);

#define soap_xsd__decimal2s(soap, a) ((a).c_str())
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__decimal(struct soap*, const char*, int, const std::string*, const char*);

#define soap_s2xsd__decimal(soap, s, a) soap_s2stdchar((soap), (s), (a), 5, 0, -1, "[-+]?(\\d+|\\d*\\.\\d*)")
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_xsd__decimal(struct soap*, const char*, std::string*, const char*);

#define soap_instantiate_xsd__decimal soap_instantiate_std__string


#define soap_new_xsd__decimal soap_new_std__string

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__decimal(struct soap*, const std::string *, const char*, const char*);

inline int soap_write_xsd__decimal(struct soap *soap, std::string const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_xsd__decimal(soap, p, "xsd:decimal", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_xsd__decimal(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_xsd__decimal(soap, p, "xsd:decimal", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_xsd__decimal(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_xsd__decimal(soap, p, "xsd:decimal", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_xsd__decimal(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_xsd__decimal(soap, p, "xsd:decimal", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_xsd__decimal(struct soap*, std::string *, const char*, const char*);

inline int soap_read_xsd__decimal(struct soap *soap, std::string *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_xsd__decimal(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_xsd__decimal(struct soap *soap, const char *URL, std::string *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_xsd__decimal(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_xsd__decimal(struct soap *soap, std::string *p)
{
	if (::soap_read_xsd__decimal(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_xsd__anyURI_DEFINED
#define SOAP_TYPE_xsd__anyURI_DEFINED

inline void soap_default_xsd__anyURI(struct soap *soap, std::string *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->erase();
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__anyURI(struct soap*, const std::string *);

#define soap_xsd__anyURI2s(soap, a) ((a).c_str())
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__anyURI(struct soap*, const char*, int, const std::string*, const char*);

#define soap_s2xsd__anyURI(soap, s, a) soap_s2stdchar((soap), (s), (a), 4, 0, -1, NULL)
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_xsd__anyURI(struct soap*, const char*, std::string*, const char*);

#define soap_instantiate_xsd__anyURI soap_instantiate_std__string


#define soap_new_xsd__anyURI soap_new_std__string

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__anyURI(struct soap*, const std::string *, const char*, const char*);

inline int soap_write_xsd__anyURI(struct soap *soap, std::string const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_xsd__anyURI(soap, p, "xsd:anyURI", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_xsd__anyURI(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_xsd__anyURI(soap, p, "xsd:anyURI", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_xsd__anyURI(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_xsd__anyURI(soap, p, "xsd:anyURI", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_xsd__anyURI(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_xsd__anyURI(soap, p, "xsd:anyURI", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_xsd__anyURI(struct soap*, std::string *, const char*, const char*);

inline int soap_read_xsd__anyURI(struct soap *soap, std::string *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_xsd__anyURI(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_xsd__anyURI(struct soap *soap, const char *URL, std::string *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_xsd__anyURI(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_xsd__anyURI(struct soap *soap, std::string *p)
{
	if (::soap_read_xsd__anyURI(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_std__string_DEFINED
#define SOAP_TYPE_std__string_DEFINED

inline void soap_default_std__string(struct soap *soap, std::string *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->erase();
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__string(struct soap*, const std::string *);

#define soap_std__string2s(soap, a) ((a).c_str())
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__string(struct soap*, const char*, int, const std::string*, const char*);

#define soap_s2std__string(soap, s, a) soap_s2stdchar((soap), (s), (a), 1, 0, -1, NULL)
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_std__string(struct soap*, const char*, std::string*, const char*);
SOAP_FMAC1 std::string * SOAP_FMAC2 soap_instantiate_std__string(struct soap*, int, const char*, const char*, size_t*);

inline std::string * soap_new_std__string(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__string(soap, n, NULL, NULL, NULL);
}

inline std::string * soap_new_req_std__string(
	struct soap *soap)
{
	std::string *_p = ::soap_new_std__string(soap);
	if (_p)
	{	::soap_default_std__string(soap, _p);
	}
	return _p;
}

inline std::string * soap_new_set_std__string(
	struct soap *soap)
{
	std::string *_p = ::soap_new_std__string(soap);
	if (_p)
	{	::soap_default_std__string(soap, _p);
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_std__string(struct soap*, const std::string *, const char*, const char*);

inline int soap_write_std__string(struct soap *soap, std::string const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_std__string(soap, p, "string", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_std__string(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_std__string(soap, p, "string", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_std__string(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_std__string(soap, p, "string", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_std__string(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_std__string(soap, p, "string", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_std__string(struct soap*, std::string *, const char*, const char*);

inline int soap_read_std__string(struct soap *soap, std::string *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_std__string(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_std__string(struct soap *soap, const char *URL, std::string *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_std__string(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_std__string(struct soap *soap, std::string *p)
{
	if (::soap_read_std__string(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Fault_DEFINED
#define SOAP_TYPE_SOAP_ENV__Fault_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Fault(struct soap*, struct SOAP_ENV__Fault *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Fault(struct soap*, const struct SOAP_ENV__Fault *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Fault(struct soap*, const char*, int, const struct SOAP_ENV__Fault *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_in_SOAP_ENV__Fault(struct soap*, const char*, struct SOAP_ENV__Fault *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Fault * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Fault(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Fault * soap_new_SOAP_ENV__Fault(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Fault(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Fault * soap_new_req_SOAP_ENV__Fault(
	struct soap *soap)
{
	struct SOAP_ENV__Fault *_p = ::soap_new_SOAP_ENV__Fault(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Fault(soap, _p);
	}
	return _p;
}

inline struct SOAP_ENV__Fault * soap_new_set_SOAP_ENV__Fault(
	struct soap *soap,
	char *faultcode,
	char *faultstring,
	char *faultactor,
	struct SOAP_ENV__Detail *detail,
	struct SOAP_ENV__Code *SOAP_ENV__Code,
	struct SOAP_ENV__Reason *SOAP_ENV__Reason,
	char *SOAP_ENV__Node,
	char *SOAP_ENV__Role,
	struct SOAP_ENV__Detail *SOAP_ENV__Detail)
{
	struct SOAP_ENV__Fault *_p = ::soap_new_SOAP_ENV__Fault(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Fault(soap, _p);
		_p->faultcode = faultcode;
		_p->faultstring = faultstring;
		_p->faultactor = faultactor;
		_p->detail = detail;
		_p->SOAP_ENV__Code = SOAP_ENV__Code;
		_p->SOAP_ENV__Reason = SOAP_ENV__Reason;
		_p->SOAP_ENV__Node = SOAP_ENV__Node;
		_p->SOAP_ENV__Role = SOAP_ENV__Role;
		_p->SOAP_ENV__Detail = SOAP_ENV__Detail;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Fault(struct soap*, const struct SOAP_ENV__Fault *, const char*, const char*);

inline int soap_write_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_SOAP_ENV__Fault(soap, p), 0) || ::soap_put_SOAP_ENV__Fault(soap, p, "SOAP-ENV:Fault", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SOAP_ENV__Fault(struct soap *soap, const char *URL, struct SOAP_ENV__Fault const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Fault(soap, p), 0) || ::soap_put_SOAP_ENV__Fault(soap, p, "SOAP-ENV:Fault", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_SOAP_ENV__Fault(struct soap *soap, const char *URL, struct SOAP_ENV__Fault const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Fault(soap, p), 0) || ::soap_put_SOAP_ENV__Fault(soap, p, "SOAP-ENV:Fault", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_SOAP_ENV__Fault(struct soap *soap, const char *URL, struct SOAP_ENV__Fault const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Fault(soap, p), 0) || ::soap_put_SOAP_ENV__Fault(soap, p, "SOAP-ENV:Fault", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_get_SOAP_ENV__Fault(struct soap*, struct SOAP_ENV__Fault *, const char*, const char*);

inline int soap_read_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p)
{
	if (p)
	{	::soap_default_SOAP_ENV__Fault(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_SOAP_ENV__Fault(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SOAP_ENV__Fault(struct soap *soap, const char *URL, struct SOAP_ENV__Fault *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_SOAP_ENV__Fault(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p)
{
	if (::soap_read_SOAP_ENV__Fault(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Reason_DEFINED
#define SOAP_TYPE_SOAP_ENV__Reason_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Reason(struct soap*, const struct SOAP_ENV__Reason *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Reason(struct soap*, const char*, int, const struct SOAP_ENV__Reason *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_in_SOAP_ENV__Reason(struct soap*, const char*, struct SOAP_ENV__Reason *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Reason * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Reason(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Reason * soap_new_SOAP_ENV__Reason(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Reason(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Reason * soap_new_req_SOAP_ENV__Reason(
	struct soap *soap)
{
	struct SOAP_ENV__Reason *_p = ::soap_new_SOAP_ENV__Reason(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Reason(soap, _p);
	}
	return _p;
}

inline struct SOAP_ENV__Reason * soap_new_set_SOAP_ENV__Reason(
	struct soap *soap,
	char *SOAP_ENV__Text)
{
	struct SOAP_ENV__Reason *_p = ::soap_new_SOAP_ENV__Reason(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Reason(soap, _p);
		_p->SOAP_ENV__Text = SOAP_ENV__Text;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Reason(struct soap*, const struct SOAP_ENV__Reason *, const char*, const char*);

inline int soap_write_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_SOAP_ENV__Reason(soap, p), 0) || ::soap_put_SOAP_ENV__Reason(soap, p, "SOAP-ENV:Reason", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SOAP_ENV__Reason(struct soap *soap, const char *URL, struct SOAP_ENV__Reason const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Reason(soap, p), 0) || ::soap_put_SOAP_ENV__Reason(soap, p, "SOAP-ENV:Reason", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_SOAP_ENV__Reason(struct soap *soap, const char *URL, struct SOAP_ENV__Reason const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Reason(soap, p), 0) || ::soap_put_SOAP_ENV__Reason(soap, p, "SOAP-ENV:Reason", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_SOAP_ENV__Reason(struct soap *soap, const char *URL, struct SOAP_ENV__Reason const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Reason(soap, p), 0) || ::soap_put_SOAP_ENV__Reason(soap, p, "SOAP-ENV:Reason", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_get_SOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *, const char*, const char*);

inline int soap_read_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p)
{
	if (p)
	{	::soap_default_SOAP_ENV__Reason(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_SOAP_ENV__Reason(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SOAP_ENV__Reason(struct soap *soap, const char *URL, struct SOAP_ENV__Reason *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_SOAP_ENV__Reason(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p)
{
	if (::soap_read_SOAP_ENV__Reason(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Code_DEFINED
#define SOAP_TYPE_SOAP_ENV__Code_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Code(struct soap*, const struct SOAP_ENV__Code *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Code(struct soap*, const char*, int, const struct SOAP_ENV__Code *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_in_SOAP_ENV__Code(struct soap*, const char*, struct SOAP_ENV__Code *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Code * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Code(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Code * soap_new_SOAP_ENV__Code(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Code(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Code * soap_new_req_SOAP_ENV__Code(
	struct soap *soap)
{
	struct SOAP_ENV__Code *_p = ::soap_new_SOAP_ENV__Code(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Code(soap, _p);
	}
	return _p;
}

inline struct SOAP_ENV__Code * soap_new_set_SOAP_ENV__Code(
	struct soap *soap,
	char *SOAP_ENV__Value,
	struct SOAP_ENV__Code *SOAP_ENV__Subcode)
{
	struct SOAP_ENV__Code *_p = ::soap_new_SOAP_ENV__Code(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Code(soap, _p);
		_p->SOAP_ENV__Value = SOAP_ENV__Value;
		_p->SOAP_ENV__Subcode = SOAP_ENV__Subcode;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Code(struct soap*, const struct SOAP_ENV__Code *, const char*, const char*);

inline int soap_write_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_SOAP_ENV__Code(soap, p), 0) || ::soap_put_SOAP_ENV__Code(soap, p, "SOAP-ENV:Code", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SOAP_ENV__Code(struct soap *soap, const char *URL, struct SOAP_ENV__Code const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Code(soap, p), 0) || ::soap_put_SOAP_ENV__Code(soap, p, "SOAP-ENV:Code", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_SOAP_ENV__Code(struct soap *soap, const char *URL, struct SOAP_ENV__Code const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Code(soap, p), 0) || ::soap_put_SOAP_ENV__Code(soap, p, "SOAP-ENV:Code", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_SOAP_ENV__Code(struct soap *soap, const char *URL, struct SOAP_ENV__Code const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Code(soap, p), 0) || ::soap_put_SOAP_ENV__Code(soap, p, "SOAP-ENV:Code", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_get_SOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *, const char*, const char*);

inline int soap_read_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p)
{
	if (p)
	{	::soap_default_SOAP_ENV__Code(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_SOAP_ENV__Code(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SOAP_ENV__Code(struct soap *soap, const char *URL, struct SOAP_ENV__Code *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_SOAP_ENV__Code(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p)
{
	if (::soap_read_SOAP_ENV__Code(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#endif

#ifndef SOAP_TYPE___ns1__getMessage_DEFINED
#define SOAP_TYPE___ns1__getMessage_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__getMessage(struct soap*, struct __ns1__getMessage *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__getMessage(struct soap*, const struct __ns1__getMessage *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__getMessage(struct soap*, const char*, int, const struct __ns1__getMessage *, const char*);
SOAP_FMAC3 struct __ns1__getMessage * SOAP_FMAC4 soap_in___ns1__getMessage(struct soap*, const char*, struct __ns1__getMessage *, const char*);
SOAP_FMAC1 struct __ns1__getMessage * SOAP_FMAC2 soap_instantiate___ns1__getMessage(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__getMessage * soap_new___ns1__getMessage(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__getMessage(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__getMessage * soap_new_req___ns1__getMessage(
	struct soap *soap)
{
	struct __ns1__getMessage *_p = ::soap_new___ns1__getMessage(soap);
	if (_p)
	{	::soap_default___ns1__getMessage(soap, _p);
	}
	return _p;
}

inline struct __ns1__getMessage * soap_new_set___ns1__getMessage(
	struct soap *soap,
	ns2__requestParameterList *ns1__getMessageTypeDef)
{
	struct __ns1__getMessage *_p = ::soap_new___ns1__getMessage(soap);
	if (_p)
	{	::soap_default___ns1__getMessage(soap, _p);
		_p->ns1__getMessageTypeDef = ns1__getMessageTypeDef;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__getMessage(struct soap*, const struct __ns1__getMessage *, const char*, const char*);

inline int soap_write___ns1__getMessage(struct soap *soap, struct __ns1__getMessage const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___ns1__getMessage(soap, p), 0) || ::soap_put___ns1__getMessage(soap, p, "-ns1:getMessage", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__getMessage(struct soap *soap, const char *URL, struct __ns1__getMessage const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__getMessage(soap, p), 0) || ::soap_put___ns1__getMessage(soap, p, "-ns1:getMessage", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___ns1__getMessage(struct soap *soap, const char *URL, struct __ns1__getMessage const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__getMessage(soap, p), 0) || ::soap_put___ns1__getMessage(soap, p, "-ns1:getMessage", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__getMessage(struct soap *soap, const char *URL, struct __ns1__getMessage const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__getMessage(soap, p), 0) || ::soap_put___ns1__getMessage(soap, p, "-ns1:getMessage", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__getMessage * SOAP_FMAC4 soap_get___ns1__getMessage(struct soap*, struct __ns1__getMessage *, const char*, const char*);

inline int soap_read___ns1__getMessage(struct soap *soap, struct __ns1__getMessage *p)
{
	if (p)
	{	::soap_default___ns1__getMessage(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___ns1__getMessage(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__getMessage(struct soap *soap, const char *URL, struct __ns1__getMessage *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___ns1__getMessage(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___ns1__getMessage(struct soap *soap, struct __ns1__getMessage *p)
{
	if (::soap_read___ns1__getMessage(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___ns1__postCAP_DEFINED
#define SOAP_TYPE___ns1__postCAP_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__postCAP(struct soap*, struct __ns1__postCAP *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__postCAP(struct soap*, const struct __ns1__postCAP *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__postCAP(struct soap*, const char*, int, const struct __ns1__postCAP *, const char*);
SOAP_FMAC3 struct __ns1__postCAP * SOAP_FMAC4 soap_in___ns1__postCAP(struct soap*, const char*, struct __ns1__postCAP *, const char*);
SOAP_FMAC1 struct __ns1__postCAP * SOAP_FMAC2 soap_instantiate___ns1__postCAP(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__postCAP * soap_new___ns1__postCAP(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__postCAP(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__postCAP * soap_new_req___ns1__postCAP(
	struct soap *soap)
{
	struct __ns1__postCAP *_p = ::soap_new___ns1__postCAP(soap);
	if (_p)
	{	::soap_default___ns1__postCAP(soap, _p);
	}
	return _p;
}

inline struct __ns1__postCAP * soap_new_set___ns1__postCAP(
	struct soap *soap,
	_ns1__postCAPRequestTypeDef *ns1__postCAPRequestTypeDef)
{
	struct __ns1__postCAP *_p = ::soap_new___ns1__postCAP(soap);
	if (_p)
	{	::soap_default___ns1__postCAP(soap, _p);
		_p->ns1__postCAPRequestTypeDef = ns1__postCAPRequestTypeDef;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__postCAP(struct soap*, const struct __ns1__postCAP *, const char*, const char*);

inline int soap_write___ns1__postCAP(struct soap *soap, struct __ns1__postCAP const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___ns1__postCAP(soap, p), 0) || ::soap_put___ns1__postCAP(soap, p, "-ns1:postCAP", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__postCAP(struct soap *soap, const char *URL, struct __ns1__postCAP const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__postCAP(soap, p), 0) || ::soap_put___ns1__postCAP(soap, p, "-ns1:postCAP", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___ns1__postCAP(struct soap *soap, const char *URL, struct __ns1__postCAP const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__postCAP(soap, p), 0) || ::soap_put___ns1__postCAP(soap, p, "-ns1:postCAP", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__postCAP(struct soap *soap, const char *URL, struct __ns1__postCAP const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__postCAP(soap, p), 0) || ::soap_put___ns1__postCAP(soap, p, "-ns1:postCAP", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__postCAP * SOAP_FMAC4 soap_get___ns1__postCAP(struct soap*, struct __ns1__postCAP *, const char*, const char*);

inline int soap_read___ns1__postCAP(struct soap *soap, struct __ns1__postCAP *p)
{
	if (p)
	{	::soap_default___ns1__postCAP(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___ns1__postCAP(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__postCAP(struct soap *soap, const char *URL, struct __ns1__postCAP *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___ns1__postCAP(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___ns1__postCAP(struct soap *soap, struct __ns1__postCAP *p)
{
	if (::soap_read___ns1__postCAP(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___ns1__getRequest_DEFINED
#define SOAP_TYPE___ns1__getRequest_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__getRequest(struct soap*, struct __ns1__getRequest *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__getRequest(struct soap*, const struct __ns1__getRequest *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__getRequest(struct soap*, const char*, int, const struct __ns1__getRequest *, const char*);
SOAP_FMAC3 struct __ns1__getRequest * SOAP_FMAC4 soap_in___ns1__getRequest(struct soap*, const char*, struct __ns1__getRequest *, const char*);
SOAP_FMAC1 struct __ns1__getRequest * SOAP_FMAC2 soap_instantiate___ns1__getRequest(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__getRequest * soap_new___ns1__getRequest(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__getRequest(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__getRequest * soap_new_req___ns1__getRequest(
	struct soap *soap)
{
	struct __ns1__getRequest *_p = ::soap_new___ns1__getRequest(soap);
	if (_p)
	{	::soap_default___ns1__getRequest(soap, _p);
	}
	return _p;
}

inline struct __ns1__getRequest * soap_new_set___ns1__getRequest(
	struct soap *soap,
	ns2__requestParameterList *ns1__getRequestTypeDef)
{
	struct __ns1__getRequest *_p = ::soap_new___ns1__getRequest(soap);
	if (_p)
	{	::soap_default___ns1__getRequest(soap, _p);
		_p->ns1__getRequestTypeDef = ns1__getRequestTypeDef;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__getRequest(struct soap*, const struct __ns1__getRequest *, const char*, const char*);

inline int soap_write___ns1__getRequest(struct soap *soap, struct __ns1__getRequest const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___ns1__getRequest(soap, p), 0) || ::soap_put___ns1__getRequest(soap, p, "-ns1:getRequest", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__getRequest(struct soap *soap, const char *URL, struct __ns1__getRequest const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__getRequest(soap, p), 0) || ::soap_put___ns1__getRequest(soap, p, "-ns1:getRequest", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___ns1__getRequest(struct soap *soap, const char *URL, struct __ns1__getRequest const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__getRequest(soap, p), 0) || ::soap_put___ns1__getRequest(soap, p, "-ns1:getRequest", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__getRequest(struct soap *soap, const char *URL, struct __ns1__getRequest const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__getRequest(soap, p), 0) || ::soap_put___ns1__getRequest(soap, p, "-ns1:getRequest", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__getRequest * SOAP_FMAC4 soap_get___ns1__getRequest(struct soap*, struct __ns1__getRequest *, const char*, const char*);

inline int soap_read___ns1__getRequest(struct soap *soap, struct __ns1__getRequest *p)
{
	if (p)
	{	::soap_default___ns1__getRequest(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___ns1__getRequest(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__getRequest(struct soap *soap, const char *URL, struct __ns1__getRequest *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___ns1__getRequest(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___ns1__getRequest(struct soap *soap, struct __ns1__getRequest *p)
{
	if (::soap_read___ns1__getRequest(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Detail_DEFINED
#define SOAP_TYPE_SOAP_ENV__Detail_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Detail(struct soap*, const struct SOAP_ENV__Detail *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Detail(struct soap*, const char*, int, const struct SOAP_ENV__Detail *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_in_SOAP_ENV__Detail(struct soap*, const char*, struct SOAP_ENV__Detail *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Detail * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Detail(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Detail * soap_new_SOAP_ENV__Detail(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Detail(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Detail * soap_new_req_SOAP_ENV__Detail(
	struct soap *soap,
	int __type,
	void *fault)
{
	struct SOAP_ENV__Detail *_p = ::soap_new_SOAP_ENV__Detail(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Detail(soap, _p);
		_p->__type = __type;
		_p->fault = fault;
	}
	return _p;
}

inline struct SOAP_ENV__Detail * soap_new_set_SOAP_ENV__Detail(
	struct soap *soap,
	_ns1__CAPServiceException *ns1__CAPServiceException,
	int __type,
	void *fault,
	char *__any)
{
	struct SOAP_ENV__Detail *_p = ::soap_new_SOAP_ENV__Detail(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Detail(soap, _p);
		_p->ns1__CAPServiceException = ns1__CAPServiceException;
		_p->__type = __type;
		_p->fault = fault;
		_p->__any = __any;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Detail(struct soap*, const struct SOAP_ENV__Detail *, const char*, const char*);

inline int soap_write_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_SOAP_ENV__Detail(soap, p), 0) || ::soap_put_SOAP_ENV__Detail(soap, p, "SOAP-ENV:Detail", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SOAP_ENV__Detail(struct soap *soap, const char *URL, struct SOAP_ENV__Detail const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Detail(soap, p), 0) || ::soap_put_SOAP_ENV__Detail(soap, p, "SOAP-ENV:Detail", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_SOAP_ENV__Detail(struct soap *soap, const char *URL, struct SOAP_ENV__Detail const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Detail(soap, p), 0) || ::soap_put_SOAP_ENV__Detail(soap, p, "SOAP-ENV:Detail", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_SOAP_ENV__Detail(struct soap *soap, const char *URL, struct SOAP_ENV__Detail const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Detail(soap, p), 0) || ::soap_put_SOAP_ENV__Detail(soap, p, "SOAP-ENV:Detail", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_get_SOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *, const char*, const char*);

inline int soap_read_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p)
{
	if (p)
	{	::soap_default_SOAP_ENV__Detail(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_SOAP_ENV__Detail(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SOAP_ENV__Detail(struct soap *soap, const char *URL, struct SOAP_ENV__Detail *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_SOAP_ENV__Detail(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p)
{
	if (::soap_read_SOAP_ENV__Detail(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Header_DEFINED
#define SOAP_TYPE_SOAP_ENV__Header_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Header(struct soap*, struct SOAP_ENV__Header *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Header(struct soap*, const struct SOAP_ENV__Header *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Header(struct soap*, const char*, int, const struct SOAP_ENV__Header *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_in_SOAP_ENV__Header(struct soap*, const char*, struct SOAP_ENV__Header *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Header * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Header(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Header * soap_new_SOAP_ENV__Header(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Header(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Header * soap_new_req_SOAP_ENV__Header(
	struct soap *soap)
{
	struct SOAP_ENV__Header *_p = ::soap_new_SOAP_ENV__Header(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Header(soap, _p);
	}
	return _p;
}

inline struct SOAP_ENV__Header * soap_new_set_SOAP_ENV__Header(
	struct soap *soap,
	_ns1__CAPHeaderTypeDef *ns1__CAPHeaderTypeDef)
{
	struct SOAP_ENV__Header *_p = ::soap_new_SOAP_ENV__Header(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Header(soap, _p);
		_p->ns1__CAPHeaderTypeDef = ns1__CAPHeaderTypeDef;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Header(struct soap*, const struct SOAP_ENV__Header *, const char*, const char*);

inline int soap_write_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_SOAP_ENV__Header(soap, p), 0) || ::soap_put_SOAP_ENV__Header(soap, p, "SOAP-ENV:Header", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SOAP_ENV__Header(struct soap *soap, const char *URL, struct SOAP_ENV__Header const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Header(soap, p), 0) || ::soap_put_SOAP_ENV__Header(soap, p, "SOAP-ENV:Header", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_SOAP_ENV__Header(struct soap *soap, const char *URL, struct SOAP_ENV__Header const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Header(soap, p), 0) || ::soap_put_SOAP_ENV__Header(soap, p, "SOAP-ENV:Header", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_SOAP_ENV__Header(struct soap *soap, const char *URL, struct SOAP_ENV__Header const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Header(soap, p), 0) || ::soap_put_SOAP_ENV__Header(soap, p, "SOAP-ENV:Header", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_get_SOAP_ENV__Header(struct soap*, struct SOAP_ENV__Header *, const char*, const char*);

inline int soap_read_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p)
{
	if (p)
	{	::soap_default_SOAP_ENV__Header(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_SOAP_ENV__Header(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SOAP_ENV__Header(struct soap *soap, const char *URL, struct SOAP_ENV__Header *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_SOAP_ENV__Header(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p)
{
	if (::soap_read_SOAP_ENV__Header(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Reason_DEFINED
#define SOAP_TYPE_PointerToSOAP_ENV__Reason_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Reason(struct soap*, const char *, int, struct SOAP_ENV__Reason *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Reason(struct soap*, const char*, struct SOAP_ENV__Reason **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *const*, const char*, const char*);
SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason **, const char*, const char*);
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Detail_DEFINED
#define SOAP_TYPE_PointerToSOAP_ENV__Detail_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Detail(struct soap*, const char *, int, struct SOAP_ENV__Detail *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Detail(struct soap*, const char*, struct SOAP_ENV__Detail **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *const*, const char*, const char*);
SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail **, const char*, const char*);
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Code_DEFINED
#define SOAP_TYPE_PointerToSOAP_ENV__Code_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Code(struct soap*, const char *, int, struct SOAP_ENV__Code *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Code(struct soap*, const char*, struct SOAP_ENV__Code **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *const*, const char*, const char*);
SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code **, const char*, const char*);
#endif

#endif

#ifndef SOAP_TYPE_PointerTo_ns1__postCAPRequestTypeDef_DEFINED
#define SOAP_TYPE_PointerTo_ns1__postCAPRequestTypeDef_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__postCAPRequestTypeDef(struct soap*, _ns1__postCAPRequestTypeDef *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__postCAPRequestTypeDef(struct soap*, const char *, int, _ns1__postCAPRequestTypeDef *const*, const char *);
SOAP_FMAC3 _ns1__postCAPRequestTypeDef ** SOAP_FMAC4 soap_in_PointerTo_ns1__postCAPRequestTypeDef(struct soap*, const char*, _ns1__postCAPRequestTypeDef **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__postCAPRequestTypeDef(struct soap*, _ns1__postCAPRequestTypeDef *const*, const char*, const char*);
SOAP_FMAC3 _ns1__postCAPRequestTypeDef ** SOAP_FMAC4 soap_get_PointerTo_ns1__postCAPRequestTypeDef(struct soap*, _ns1__postCAPRequestTypeDef **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__requestParameterList_DEFINED
#define SOAP_TYPE_PointerTons2__requestParameterList_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__requestParameterList(struct soap*, ns2__requestParameterList *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__requestParameterList(struct soap*, const char *, int, ns2__requestParameterList *const*, const char *);
SOAP_FMAC3 ns2__requestParameterList ** SOAP_FMAC4 soap_in_PointerTons2__requestParameterList(struct soap*, const char*, ns2__requestParameterList **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__requestParameterList(struct soap*, ns2__requestParameterList *const*, const char*, const char*);
SOAP_FMAC3 ns2__requestParameterList ** SOAP_FMAC4 soap_get_PointerTons2__requestParameterList(struct soap*, ns2__requestParameterList **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__CAPServiceException_DEFINED
#define SOAP_TYPE_PointerTo_ns1__CAPServiceException_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__CAPServiceException(struct soap*, _ns1__CAPServiceException *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__CAPServiceException(struct soap*, const char *, int, _ns1__CAPServiceException *const*, const char *);
SOAP_FMAC3 _ns1__CAPServiceException ** SOAP_FMAC4 soap_in_PointerTo_ns1__CAPServiceException(struct soap*, const char*, _ns1__CAPServiceException **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__CAPServiceException(struct soap*, _ns1__CAPServiceException *const*, const char*, const char*);
SOAP_FMAC3 _ns1__CAPServiceException ** SOAP_FMAC4 soap_get_PointerTo_ns1__CAPServiceException(struct soap*, _ns1__CAPServiceException **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__CAPHeaderTypeDef_DEFINED
#define SOAP_TYPE_PointerTo_ns1__CAPHeaderTypeDef_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__CAPHeaderTypeDef(struct soap*, _ns1__CAPHeaderTypeDef *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__CAPHeaderTypeDef(struct soap*, const char *, int, _ns1__CAPHeaderTypeDef *const*, const char *);
SOAP_FMAC3 _ns1__CAPHeaderTypeDef ** SOAP_FMAC4 soap_in_PointerTo_ns1__CAPHeaderTypeDef(struct soap*, const char*, _ns1__CAPHeaderTypeDef **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__CAPHeaderTypeDef(struct soap*, _ns1__CAPHeaderTypeDef *const*, const char*, const char*);
SOAP_FMAC3 _ns1__CAPHeaderTypeDef ** SOAP_FMAC4 soap_get_PointerTo_ns1__CAPHeaderTypeDef(struct soap*, _ns1__CAPHeaderTypeDef **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToint_DEFINED
#define SOAP_TYPE_PointerToint_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToint(struct soap*, int *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToint(struct soap*, const char *, int, int *const*, const char *);
SOAP_FMAC3 int ** SOAP_FMAC4 soap_in_PointerToint(struct soap*, const char*, int **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToint(struct soap*, int *const*, const char*, const char*);
SOAP_FMAC3 int ** SOAP_FMAC4 soap_get_PointerToint(struct soap*, int **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns4__alert_DEFINED
#define SOAP_TYPE_PointerTo_ns4__alert_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns4__alert(struct soap*, _ns4__alert *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns4__alert(struct soap*, const char *, int, _ns4__alert *const*, const char *);
SOAP_FMAC3 _ns4__alert ** SOAP_FMAC4 soap_in_PointerTo_ns4__alert(struct soap*, const char*, _ns4__alert **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns4__alert(struct soap*, _ns4__alert *const*, const char*, const char*);
SOAP_FMAC3 _ns4__alert ** SOAP_FMAC4 soap_get_PointerTo_ns4__alert(struct soap*, _ns4__alert **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToxsd__decimal_DEFINED
#define SOAP_TYPE_PointerToxsd__decimal_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToxsd__decimal(struct soap*, std::string *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToxsd__decimal(struct soap*, const char *, int, std::string *const*, const char *);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerToxsd__decimal(struct soap*, const char*, std::string **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToxsd__decimal(struct soap*, std::string *const*, const char*, const char*);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerToxsd__decimal(struct soap*, std::string **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToxsd__integer_DEFINED
#define SOAP_TYPE_PointerToxsd__integer_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToxsd__integer(struct soap*, std::string *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToxsd__integer(struct soap*, const char *, int, std::string *const*, const char *);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerToxsd__integer(struct soap*, const char*, std::string **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToxsd__integer(struct soap*, std::string *const*, const char*, const char*);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerToxsd__integer(struct soap*, std::string **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToxsd__anyURI_DEFINED
#define SOAP_TYPE_PointerToxsd__anyURI_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToxsd__anyURI(struct soap*, std::string *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToxsd__anyURI(struct soap*, const char *, int, std::string *const*, const char *);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerToxsd__anyURI(struct soap*, const char*, std::string **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToxsd__anyURI(struct soap*, std::string *const*, const char*, const char*);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerToxsd__anyURI(struct soap*, std::string **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTodateTime_DEFINED
#define SOAP_TYPE_PointerTodateTime_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTodateTime(struct soap*, time_t *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTodateTime(struct soap*, const char *, int, time_t *const*, const char *);
SOAP_FMAC3 time_t ** SOAP_FMAC4 soap_in_PointerTodateTime(struct soap*, const char*, time_t **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTodateTime(struct soap*, time_t *const*, const char*, const char*);
SOAP_FMAC3 time_t ** SOAP_FMAC4 soap_get_PointerTodateTime(struct soap*, time_t **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToxsd__language_DEFINED
#define SOAP_TYPE_PointerToxsd__language_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToxsd__language(struct soap*, std::string *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToxsd__language(struct soap*, const char *, int, std::string *const*, const char *);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerToxsd__language(struct soap*, const char*, std::string **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToxsd__language(struct soap*, std::string *const*, const char*, const char*);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerToxsd__language(struct soap*, std::string **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons3__subParameterListItem_DEFINED
#define SOAP_TYPE_PointerTons3__subParameterListItem_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__subParameterListItem(struct soap*, ns3__subParameterListItem *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__subParameterListItem(struct soap*, const char *, int, ns3__subParameterListItem *const*, const char *);
SOAP_FMAC3 ns3__subParameterListItem ** SOAP_FMAC4 soap_in_PointerTons3__subParameterListItem(struct soap*, const char*, ns3__subParameterListItem **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__subParameterListItem(struct soap*, ns3__subParameterListItem *const*, const char*, const char*);
SOAP_FMAC3 ns3__subParameterListItem ** SOAP_FMAC4 soap_get_PointerTons3__subParameterListItem(struct soap*, ns3__subParameterListItem **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns3__parameterListItem_DEFINED
#define SOAP_TYPE_PointerTo_ns3__parameterListItem_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns3__parameterListItem(struct soap*, _ns3__parameterListItem *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns3__parameterListItem(struct soap*, const char *, int, _ns3__parameterListItem *const*, const char *);
SOAP_FMAC3 _ns3__parameterListItem ** SOAP_FMAC4 soap_in_PointerTo_ns3__parameterListItem(struct soap*, const char*, _ns3__parameterListItem **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns3__parameterListItem(struct soap*, _ns3__parameterListItem *const*, const char*, const char*);
SOAP_FMAC3 _ns3__parameterListItem ** SOAP_FMAC4 soap_get_PointerTo_ns3__parameterListItem(struct soap*, _ns3__parameterListItem **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__parameterListItem_DEFINED
#define SOAP_TYPE_PointerTons2__parameterListItem_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__parameterListItem(struct soap*, ns2__parameterListItem *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__parameterListItem(struct soap*, const char *, int, ns2__parameterListItem *const*, const char *);
SOAP_FMAC3 ns2__parameterListItem ** SOAP_FMAC4 soap_in_PointerTons2__parameterListItem(struct soap*, const char*, ns2__parameterListItem **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__parameterListItem(struct soap*, ns2__parameterListItem *const*, const char*, const char*);
SOAP_FMAC3 ns2__parameterListItem ** SOAP_FMAC4 soap_get_PointerTons2__parameterListItem(struct soap*, ns2__parameterListItem **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTostd__string_DEFINED
#define SOAP_TYPE_PointerTostd__string_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTostd__string(struct soap*, std::string *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTostd__string(struct soap*, const char *, int, std::string *const*, const char *);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerTostd__string(struct soap*, const char*, std::string **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTostd__string(struct soap*, std::string *const*, const char*, const char*);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerTostd__string(struct soap*, std::string **, const char*, const char*);
#endif

#ifndef SOAP_TYPE__QName_DEFINED
#define SOAP_TYPE__QName_DEFINED

inline void soap_default__QName(struct soap *soap, char **a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT__QName
	*a = SOAP_DEFAULT__QName;
#else
	*a = (char *)0;
#endif
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__QName(struct soap*, char *const*);

#define soap__QName2s(soap, a) soap_QName2s(soap, (a))
SOAP_FMAC3 int SOAP_FMAC4 soap_out__QName(struct soap*, const char*, int, char*const*, const char*);

#define soap_s2_QName(soap, s, a) soap_s2QName((soap), (s), (char**)(a), 0, -1, NULL)
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in__QName(struct soap*, const char*, char **, const char*);

#define soap_instantiate__QName soap_instantiate_string


#define soap_new__QName soap_new_string

SOAP_FMAC3 int SOAP_FMAC4 soap_put__QName(struct soap*, char *const*, const char*, const char*);

inline int soap_write__QName(struct soap *soap, char *const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put__QName(soap, p, "QName", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT__QName(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__QName(soap, p, "QName", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__QName(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__QName(soap, p, "QName", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__QName(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__QName(soap, p, "QName", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 char ** SOAP_FMAC4 soap_get__QName(struct soap*, char **, const char*, const char*);

inline int soap_read__QName(struct soap *soap, char **p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get__QName(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__QName(struct soap *soap, const char *URL, char **p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__QName(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__QName(struct soap *soap, char **p)
{
	if (::soap_read__QName(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__XML_DEFINED
#define SOAP_TYPE__XML_DEFINED
#endif

#ifndef SOAP_TYPE_string_DEFINED
#define SOAP_TYPE_string_DEFINED

inline void soap_default_string(struct soap *soap, char **a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_string
	*a = SOAP_DEFAULT_string;
#else
	*a = (char *)0;
#endif
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_string(struct soap*, char *const*);

#define soap_string2s(soap, a) (a)
SOAP_FMAC3 int SOAP_FMAC4 soap_out_string(struct soap*, const char*, int, char*const*, const char*);

#define soap_s2string(soap, s, a) soap_s2char((soap), (s), (char**)(a), 1, 0, -1, NULL)
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_string(struct soap*, const char*, char **, const char*);

SOAP_FMAC3 char * * SOAP_FMAC4 soap_new_string(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_string(struct soap*, char *const*, const char*, const char*);

inline int soap_write_string(struct soap *soap, char *const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_string(soap, p, "string", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_string(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_string(soap, p, "string", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_string(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_string(soap, p, "string", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_string(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_string(soap, p, "string", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_string(struct soap*, char **, const char*, const char*);

inline int soap_read_string(struct soap *soap, char **p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_string(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_string(struct soap *soap, const char *URL, char **p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_string(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_string(struct soap *soap, char **p)
{
	if (::soap_read_string(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTo_ns4__alert_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTo_ns4__alert_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTo_ns4__alert(struct soap*, std::vector<_ns4__alert *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTo_ns4__alert(struct soap*, const std::vector<_ns4__alert *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTo_ns4__alert(struct soap*, const char*, int, const std::vector<_ns4__alert *> *, const char*);
SOAP_FMAC3 std::vector<_ns4__alert *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTo_ns4__alert(struct soap*, const char*, std::vector<_ns4__alert *> *, const char*);
SOAP_FMAC1 std::vector<_ns4__alert *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTo_ns4__alert(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<_ns4__alert *>  * soap_new_std__vectorTemplateOfPointerTo_ns4__alert(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTo_ns4__alert(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOf_XML_DEFINED
#define SOAP_TYPE_std__vectorTemplateOf_XML_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOf_XML(struct soap*, std::vector<char *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOf_XML(struct soap*, const std::vector<char *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOf_XML(struct soap*, const char*, int, const std::vector<char *> *, const char*);
SOAP_FMAC3 std::vector<char *> * SOAP_FMAC4 soap_in_std__vectorTemplateOf_XML(struct soap*, const char*, std::vector<char *> *, const char*);
SOAP_FMAC1 std::vector<char *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOf_XML(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<char *>  * soap_new_std__vectorTemplateOf_XML(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOf_XML(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOf_ns4__alert_info_DEFINED
#define SOAP_TYPE_std__vectorTemplateOf_ns4__alert_info_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOf_ns4__alert_info(struct soap*, std::vector<_ns4__alert_info> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOf_ns4__alert_info(struct soap*, const std::vector<_ns4__alert_info> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOf_ns4__alert_info(struct soap*, const char*, int, const std::vector<_ns4__alert_info> *, const char*);
SOAP_FMAC3 std::vector<_ns4__alert_info> * SOAP_FMAC4 soap_in_std__vectorTemplateOf_ns4__alert_info(struct soap*, const char*, std::vector<_ns4__alert_info> *, const char*);
SOAP_FMAC1 std::vector<_ns4__alert_info>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOf_ns4__alert_info(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<_ns4__alert_info>  * soap_new_std__vectorTemplateOf_ns4__alert_info(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOf_ns4__alert_info(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOf_ns4__alert_info_area_DEFINED
#define SOAP_TYPE_std__vectorTemplateOf_ns4__alert_info_area_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOf_ns4__alert_info_area(struct soap*, std::vector<_ns4__alert_info_area> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOf_ns4__alert_info_area(struct soap*, const std::vector<_ns4__alert_info_area> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOf_ns4__alert_info_area(struct soap*, const char*, int, const std::vector<_ns4__alert_info_area> *, const char*);
SOAP_FMAC3 std::vector<_ns4__alert_info_area> * SOAP_FMAC4 soap_in_std__vectorTemplateOf_ns4__alert_info_area(struct soap*, const char*, std::vector<_ns4__alert_info_area> *, const char*);
SOAP_FMAC1 std::vector<_ns4__alert_info_area>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOf_ns4__alert_info_area(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<_ns4__alert_info_area>  * soap_new_std__vectorTemplateOf_ns4__alert_info_area(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOf_ns4__alert_info_area(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOf_ns4__alert_info_area_geocode_DEFINED
#define SOAP_TYPE_std__vectorTemplateOf_ns4__alert_info_area_geocode_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOf_ns4__alert_info_area_geocode(struct soap*, std::vector<_ns4__alert_info_area_geocode> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOf_ns4__alert_info_area_geocode(struct soap*, const std::vector<_ns4__alert_info_area_geocode> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOf_ns4__alert_info_area_geocode(struct soap*, const char*, int, const std::vector<_ns4__alert_info_area_geocode> *, const char*);
SOAP_FMAC3 std::vector<_ns4__alert_info_area_geocode> * SOAP_FMAC4 soap_in_std__vectorTemplateOf_ns4__alert_info_area_geocode(struct soap*, const char*, std::vector<_ns4__alert_info_area_geocode> *, const char*);
SOAP_FMAC1 std::vector<_ns4__alert_info_area_geocode>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOf_ns4__alert_info_area_geocode(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<_ns4__alert_info_area_geocode>  * soap_new_std__vectorTemplateOf_ns4__alert_info_area_geocode(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOf_ns4__alert_info_area_geocode(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOf_ns4__alert_info_resource_DEFINED
#define SOAP_TYPE_std__vectorTemplateOf_ns4__alert_info_resource_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOf_ns4__alert_info_resource(struct soap*, std::vector<_ns4__alert_info_resource> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOf_ns4__alert_info_resource(struct soap*, const std::vector<_ns4__alert_info_resource> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOf_ns4__alert_info_resource(struct soap*, const char*, int, const std::vector<_ns4__alert_info_resource> *, const char*);
SOAP_FMAC3 std::vector<_ns4__alert_info_resource> * SOAP_FMAC4 soap_in_std__vectorTemplateOf_ns4__alert_info_resource(struct soap*, const char*, std::vector<_ns4__alert_info_resource> *, const char*);
SOAP_FMAC1 std::vector<_ns4__alert_info_resource>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOf_ns4__alert_info_resource(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<_ns4__alert_info_resource>  * soap_new_std__vectorTemplateOf_ns4__alert_info_resource(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOf_ns4__alert_info_resource(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOf_ns4__alert_info_parameter_DEFINED
#define SOAP_TYPE_std__vectorTemplateOf_ns4__alert_info_parameter_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOf_ns4__alert_info_parameter(struct soap*, std::vector<_ns4__alert_info_parameter> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOf_ns4__alert_info_parameter(struct soap*, const std::vector<_ns4__alert_info_parameter> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOf_ns4__alert_info_parameter(struct soap*, const char*, int, const std::vector<_ns4__alert_info_parameter> *, const char*);
SOAP_FMAC3 std::vector<_ns4__alert_info_parameter> * SOAP_FMAC4 soap_in_std__vectorTemplateOf_ns4__alert_info_parameter(struct soap*, const char*, std::vector<_ns4__alert_info_parameter> *, const char*);
SOAP_FMAC1 std::vector<_ns4__alert_info_parameter>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOf_ns4__alert_info_parameter(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<_ns4__alert_info_parameter>  * soap_new_std__vectorTemplateOf_ns4__alert_info_parameter(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOf_ns4__alert_info_parameter(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOf_ns4__alert_info_eventCode_DEFINED
#define SOAP_TYPE_std__vectorTemplateOf_ns4__alert_info_eventCode_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOf_ns4__alert_info_eventCode(struct soap*, std::vector<_ns4__alert_info_eventCode> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOf_ns4__alert_info_eventCode(struct soap*, const std::vector<_ns4__alert_info_eventCode> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOf_ns4__alert_info_eventCode(struct soap*, const char*, int, const std::vector<_ns4__alert_info_eventCode> *, const char*);
SOAP_FMAC3 std::vector<_ns4__alert_info_eventCode> * SOAP_FMAC4 soap_in_std__vectorTemplateOf_ns4__alert_info_eventCode(struct soap*, const char*, std::vector<_ns4__alert_info_eventCode> *, const char*);
SOAP_FMAC1 std::vector<_ns4__alert_info_eventCode>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOf_ns4__alert_info_eventCode(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<_ns4__alert_info_eventCode>  * soap_new_std__vectorTemplateOf_ns4__alert_info_eventCode(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOf_ns4__alert_info_eventCode(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOf_ns4__alert_info_responseType_DEFINED
#define SOAP_TYPE_std__vectorTemplateOf_ns4__alert_info_responseType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOf_ns4__alert_info_responseType(struct soap*, std::vector<enum _ns4__alert_info_responseType> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOf_ns4__alert_info_responseType(struct soap*, const std::vector<enum _ns4__alert_info_responseType> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOf_ns4__alert_info_responseType(struct soap*, const char*, int, const std::vector<enum _ns4__alert_info_responseType> *, const char*);
SOAP_FMAC3 std::vector<enum _ns4__alert_info_responseType> * SOAP_FMAC4 soap_in_std__vectorTemplateOf_ns4__alert_info_responseType(struct soap*, const char*, std::vector<enum _ns4__alert_info_responseType> *, const char*);
SOAP_FMAC1 std::vector<enum _ns4__alert_info_responseType>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOf_ns4__alert_info_responseType(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<enum _ns4__alert_info_responseType>  * soap_new_std__vectorTemplateOf_ns4__alert_info_responseType(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOf_ns4__alert_info_responseType(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOf_ns4__alert_info_category_DEFINED
#define SOAP_TYPE_std__vectorTemplateOf_ns4__alert_info_category_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOf_ns4__alert_info_category(struct soap*, std::vector<enum _ns4__alert_info_category> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOf_ns4__alert_info_category(struct soap*, const std::vector<enum _ns4__alert_info_category> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOf_ns4__alert_info_category(struct soap*, const char*, int, const std::vector<enum _ns4__alert_info_category> *, const char*);
SOAP_FMAC3 std::vector<enum _ns4__alert_info_category> * SOAP_FMAC4 soap_in_std__vectorTemplateOf_ns4__alert_info_category(struct soap*, const char*, std::vector<enum _ns4__alert_info_category> *, const char*);
SOAP_FMAC1 std::vector<enum _ns4__alert_info_category>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOf_ns4__alert_info_category(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<enum _ns4__alert_info_category>  * soap_new_std__vectorTemplateOf_ns4__alert_info_category(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOf_ns4__alert_info_category(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons3__subParameterListItem_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTons3__subParameterListItem_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons3__subParameterListItem(struct soap*, std::vector<ns3__subParameterListItem *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons3__subParameterListItem(struct soap*, const std::vector<ns3__subParameterListItem *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons3__subParameterListItem(struct soap*, const char*, int, const std::vector<ns3__subParameterListItem *> *, const char*);
SOAP_FMAC3 std::vector<ns3__subParameterListItem *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons3__subParameterListItem(struct soap*, const char*, std::vector<ns3__subParameterListItem *> *, const char*);
SOAP_FMAC1 std::vector<ns3__subParameterListItem *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons3__subParameterListItem(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns3__subParameterListItem *>  * soap_new_std__vectorTemplateOfPointerTons3__subParameterListItem(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTons3__subParameterListItem(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTo_ns3__parameterListItem_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTo_ns3__parameterListItem_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTo_ns3__parameterListItem(struct soap*, std::vector<_ns3__parameterListItem *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTo_ns3__parameterListItem(struct soap*, const std::vector<_ns3__parameterListItem *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTo_ns3__parameterListItem(struct soap*, const char*, int, const std::vector<_ns3__parameterListItem *> *, const char*);
SOAP_FMAC3 std::vector<_ns3__parameterListItem *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTo_ns3__parameterListItem(struct soap*, const char*, std::vector<_ns3__parameterListItem *> *, const char*);
SOAP_FMAC1 std::vector<_ns3__parameterListItem *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTo_ns3__parameterListItem(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<_ns3__parameterListItem *>  * soap_new_std__vectorTemplateOfPointerTo_ns3__parameterListItem(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTo_ns3__parameterListItem(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfstd__string_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfstd__string_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfstd__string(struct soap*, std::vector<std::string> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfstd__string(struct soap*, const std::vector<std::string> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfstd__string(struct soap*, const char*, int, const std::vector<std::string> *, const char*);
SOAP_FMAC3 std::vector<std::string> * SOAP_FMAC4 soap_in_std__vectorTemplateOfstd__string(struct soap*, const char*, std::vector<std::string> *, const char*);
SOAP_FMAC1 std::vector<std::string>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfstd__string(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<std::string>  * soap_new_std__vectorTemplateOfstd__string(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfstd__string(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons2__parameterListItem_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTons2__parameterListItem_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons2__parameterListItem(struct soap*, std::vector<ns2__parameterListItem *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons2__parameterListItem(struct soap*, const std::vector<ns2__parameterListItem *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons2__parameterListItem(struct soap*, const char*, int, const std::vector<ns2__parameterListItem *> *, const char*);
SOAP_FMAC3 std::vector<ns2__parameterListItem *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons2__parameterListItem(struct soap*, const char*, std::vector<ns2__parameterListItem *> *, const char*);
SOAP_FMAC1 std::vector<ns2__parameterListItem *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons2__parameterListItem(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns2__parameterListItem *>  * soap_new_std__vectorTemplateOfPointerTons2__parameterListItem(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTons2__parameterListItem(soap, n, NULL, NULL, NULL);
}
#endif

#endif

/* End of soapH.h */
