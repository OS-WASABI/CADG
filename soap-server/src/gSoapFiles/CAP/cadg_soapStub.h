/* cadg_soapStub.h
   Generated by gSOAP 2.8.60 for CAP-v1.2.h

gSOAP XML Web services tools
Copyright (C) 2000-2018, Robert van Engelen, Genivia Inc. All Rights Reserved.
The soapcpp2 tool and its generated software are released under the GPL.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial use license is available from Genivia Inc., contact@genivia.com
--------------------------------------------------------------------------------
*/

#include <vector>
#define SOAP_NAMESPACE_OF_ns1	"urn:oasis:names:tc:emergency:cap:1.2"

#ifndef cadg_soapStub_H
#define cadg_soapStub_H
#ifndef WITH_NOGLOBAL
#define WITH_NOGLOBAL
#endif
#include "stdsoap2.h"
#if GSOAP_VERSION != 20860
# error "GSOAP VERSION 20860 MISMATCH IN GENERATED CODE VERSUS LIBRARY CODE: PLEASE REINSTALL PACKAGE"
#endif


namespace cadg_soap {

/******************************************************************************\
 *                                                                            *
 * Enumeration Types                                                          *
 *                                                                            *
\******************************************************************************/


/* CAP-v1.2.h:249 */
#ifndef SOAP_TYPE_cadg_soap__ns1__alert_status
#define SOAP_TYPE_cadg_soap__ns1__alert_status (-1620144150)

/* ns1:alert-status */
enum _ns1__alert_status {
	_ns1__alert_status__Actual = 0,
	_ns1__alert_status__Exercise = 1,
	_ns1__alert_status__System = 2,
	_ns1__alert_status__Test = 3,
	_ns1__alert_status__Draft = 4
};
#endif

/* CAP-v1.2.h:258 */
#ifndef SOAP_TYPE_cadg_soap__ns1__alert_msgType
#define SOAP_TYPE_cadg_soap__ns1__alert_msgType (-1620144151)

/* ns1:alert-msgType */
enum _ns1__alert_msgType {
	_ns1__alert_msgType__Alert = 0,
	_ns1__alert_msgType__Update = 1,
	_ns1__alert_msgType__Cancel = 2,
	_ns1__alert_msgType__Ack = 3,
	_ns1__alert_msgType__Error = 4
};
#endif

/* CAP-v1.2.h:269 */
#ifndef SOAP_TYPE_cadg_soap__ns1__alert_scope
#define SOAP_TYPE_cadg_soap__ns1__alert_scope (-1620144153)

/* ns1:alert-scope */
enum _ns1__alert_scope {
	_ns1__alert_scope__Public = 0,
	_ns1__alert_scope__Restricted = 1,
	_ns1__alert_scope__Private = 2
};
#endif

/* CAP-v1.2.h:306 */
#ifndef SOAP_TYPE_cadg_soap__ns1__alert_info_category
#define SOAP_TYPE_cadg_soap__ns1__alert_info_category (-1620144157)

/* ns1:alert-info-category */
enum _ns1__alert_info_category {
	_ns1__alert_info_category__Geo = 0,
	_ns1__alert_info_category__Met = 1,
	_ns1__alert_info_category__Safety = 2,
	_ns1__alert_info_category__Security = 3,
	_ns1__alert_info_category__Rescue = 4,
	_ns1__alert_info_category__Fire = 5,
	_ns1__alert_info_category__Health = 6,
	_ns1__alert_info_category__Env = 7,
	_ns1__alert_info_category__Transport = 8,
	_ns1__alert_info_category__Infra = 9,
	_ns1__alert_info_category__CBRNE = 10,
	_ns1__alert_info_category__Other = 11
};
#endif

/* CAP-v1.2.h:326 */
#ifndef SOAP_TYPE_cadg_soap__ns1__alert_info_responseType
#define SOAP_TYPE_cadg_soap__ns1__alert_info_responseType (-1620144159)

/* ns1:alert-info-responseType */
enum _ns1__alert_info_responseType {
	_ns1__alert_info_responseType__Shelter = 0,
	_ns1__alert_info_responseType__Evacuate = 1,
	_ns1__alert_info_responseType__Prepare = 2,
	_ns1__alert_info_responseType__Execute = 3,
	_ns1__alert_info_responseType__Avoid = 4,
	_ns1__alert_info_responseType__Monitor = 5,
	_ns1__alert_info_responseType__Assess = 6,
	_ns1__alert_info_responseType__AllClear = 7,
	_ns1__alert_info_responseType__None = 8
};
#endif

/* CAP-v1.2.h:339 */
#ifndef SOAP_TYPE_cadg_soap__ns1__alert_info_urgency
#define SOAP_TYPE_cadg_soap__ns1__alert_info_urgency (-1620144161)

/* ns1:alert-info-urgency */
enum _ns1__alert_info_urgency {
	_ns1__alert_info_urgency__Immediate = 0,
	_ns1__alert_info_urgency__Expected = 1,
	_ns1__alert_info_urgency__Future = 2,
	_ns1__alert_info_urgency__Past = 3,
	_ns1__alert_info_urgency__Unknown = 4
};
#endif

/* CAP-v1.2.h:348 */
#ifndef SOAP_TYPE_cadg_soap__ns1__alert_info_severity
#define SOAP_TYPE_cadg_soap__ns1__alert_info_severity (-1620144162)

/* ns1:alert-info-severity */
enum _ns1__alert_info_severity {
	_ns1__alert_info_severity__Extreme = 0,
	_ns1__alert_info_severity__Severe = 1,
	_ns1__alert_info_severity__Moderate = 2,
	_ns1__alert_info_severity__Minor = 3,
	_ns1__alert_info_severity__Unknown = 4
};
#endif

/* CAP-v1.2.h:357 */
#ifndef SOAP_TYPE_cadg_soap__ns1__alert_info_certainty
#define SOAP_TYPE_cadg_soap__ns1__alert_info_certainty (-1620144163)

/* ns1:alert-info-certainty */
enum _ns1__alert_info_certainty {
	_ns1__alert_info_certainty__Observed = 0,
	_ns1__alert_info_certainty__Likely = 1,
	_ns1__alert_info_certainty__Possible = 2,
	_ns1__alert_info_certainty__Unlikely = 3,
	_ns1__alert_info_certainty__Unknown = 4
};
#endif

/******************************************************************************\
 *                                                                            *
 * Types with Custom Serializers                                              *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Classes, Structs and Unions                                                *
 *                                                                            *
\******************************************************************************/

class xsd__anyType;	/* CAP-v1.2.h:140 */
class xsd__anyURI_;	/* CAP-v1.2.h:147 */
class xsd__dateTime;	/* CAP-v1.2.h:154 */
class xsd__decimal_;	/* CAP-v1.2.h:164 */
class xsd__integer_;	/* CAP-v1.2.h:174 */
class xsd__language_;	/* CAP-v1.2.h:184 */
class xsd__string;	/* CAP-v1.2.h:191 */
class _ns1__alert_info_eventCode;	/* CAP-v1.2.h:379 */
class _ns1__alert_info_parameter;	/* CAP-v1.2.h:419 */
class _ns1__alert_info_resource;	/* CAP-v1.2.h:438 */
class _ns1__alert_info_area_geocode;	/* CAP-v1.2.h:485 */
class _ns1__alert_info_area;	/* CAP-v1.2.h:465 */
class _ns1__alert_info;	/* CAP-v1.2.h:299 */
class _ns1__alert;	/* CAP-v1.2.h:205 */

/* CAP-v1.2.h:140 */
#ifndef SOAP_TYPE_cadg_soap_xsd__anyType
#define SOAP_TYPE_cadg_soap_xsd__anyType (-1620144135)
/* Type xsd__anyType is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* simple XSD type 'xsd:anyType': */
class SOAP_CMAC xsd__anyType {
      public:
        /// Simple content of XSD type 'xsd:anyType' wrapped by this struct
        char *__item;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_cadg_soap_xsd__anyType
        virtual long soap_type(void) const { return SOAP_TYPE_cadg_soap_xsd__anyType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type xsd__anyType, default initialized and not managed by a soap context
        virtual xsd__anyType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(xsd__anyType); }
      public:
        /// Constructor with initializations
        xsd__anyType() : __item(), soap() { }
        virtual ~xsd__anyType() { }
        /// Friend allocator used by soap_new_xsd__anyType(struct soap*, int)
        friend SOAP_FMAC1 xsd__anyType * SOAP_FMAC2 soap_instantiate_xsd__anyType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* CAP-v1.2.h:147 */
#ifndef SOAP_TYPE_cadg_soap_xsd__anyURI_
#define SOAP_TYPE_cadg_soap_xsd__anyURI_ (-1620144139)
/* Type xsd__anyURI_ is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* simple XSD type 'xsd:anyURI': */
class SOAP_CMAC xsd__anyURI_ : public xsd__anyType {
      public:
        /// Simple content of XSD type 'xsd:anyURI' wrapped by this struct
        std::string __item;
      public:
        /// Return unique type id SOAP_TYPE_cadg_soap_xsd__anyURI_
        virtual long soap_type(void) const { return SOAP_TYPE_cadg_soap_xsd__anyURI_; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type xsd__anyURI_, default initialized and not managed by a soap context
        virtual xsd__anyURI_ *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(xsd__anyURI_); }
      public:
        /// Constructor with initializations
        xsd__anyURI_() : __item() { }
        virtual ~xsd__anyURI_() { }
        /// Friend allocator used by soap_new_xsd__anyURI_(struct soap*, int)
        friend SOAP_FMAC1 xsd__anyURI_ * SOAP_FMAC2 soap_instantiate_xsd__anyURI_(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* CAP-v1.2.h:154 */
#ifndef SOAP_TYPE_cadg_soap_xsd__dateTime
#define SOAP_TYPE_cadg_soap_xsd__dateTime (-1620144140)
/* Type xsd__dateTime is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* simple XSD type 'xsd:dateTime': */
class SOAP_CMAC xsd__dateTime : public xsd__anyType {
      public:
        /// Simple content of XSD type 'xsd:dateTime' wrapped by this struct
        time_t __item;
      public:
        /// Return unique type id SOAP_TYPE_cadg_soap_xsd__dateTime
        virtual long soap_type(void) const { return SOAP_TYPE_cadg_soap_xsd__dateTime; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type xsd__dateTime, default initialized and not managed by a soap context
        virtual xsd__dateTime *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(xsd__dateTime); }
      public:
        /// Constructor with initializations
        xsd__dateTime() : __item() { }
        virtual ~xsd__dateTime() { }
        /// Friend allocator used by soap_new_xsd__dateTime(struct soap*, int)
        friend SOAP_FMAC1 xsd__dateTime * SOAP_FMAC2 soap_instantiate_xsd__dateTime(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* CAP-v1.2.h:164 */
#ifndef SOAP_TYPE_cadg_soap_xsd__decimal_
#define SOAP_TYPE_cadg_soap_xsd__decimal_ (-1620144143)
/* Type xsd__decimal_ is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* simple XSD type 'xsd:decimal': */
class SOAP_CMAC xsd__decimal_ : public xsd__anyType {
      public:
        /// Simple content of XSD type 'xsd:decimal' wrapped by this struct
        std::string __item;
      public:
        /// Return unique type id SOAP_TYPE_cadg_soap_xsd__decimal_
        virtual long soap_type(void) const { return SOAP_TYPE_cadg_soap_xsd__decimal_; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type xsd__decimal_, default initialized and not managed by a soap context
        virtual xsd__decimal_ *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(xsd__decimal_); }
      public:
        /// Constructor with initializations
        xsd__decimal_() : __item() { }
        virtual ~xsd__decimal_() { }
        /// Friend allocator used by soap_new_xsd__decimal_(struct soap*, int)
        friend SOAP_FMAC1 xsd__decimal_ * SOAP_FMAC2 soap_instantiate_xsd__decimal_(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* CAP-v1.2.h:174 */
#ifndef SOAP_TYPE_cadg_soap_xsd__integer_
#define SOAP_TYPE_cadg_soap_xsd__integer_ (-1620144145)
/* Type xsd__integer_ is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* simple XSD type 'xsd:integer': */
class SOAP_CMAC xsd__integer_ : public xsd__anyType {
      public:
        /// Simple content of XSD type 'xsd:integer' wrapped by this struct
        std::string __item;
      public:
        /// Return unique type id SOAP_TYPE_cadg_soap_xsd__integer_
        virtual long soap_type(void) const { return SOAP_TYPE_cadg_soap_xsd__integer_; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type xsd__integer_, default initialized and not managed by a soap context
        virtual xsd__integer_ *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(xsd__integer_); }
      public:
        /// Constructor with initializations
        xsd__integer_() : __item() { }
        virtual ~xsd__integer_() { }
        /// Friend allocator used by soap_new_xsd__integer_(struct soap*, int)
        friend SOAP_FMAC1 xsd__integer_ * SOAP_FMAC2 soap_instantiate_xsd__integer_(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* CAP-v1.2.h:184 */
#ifndef SOAP_TYPE_cadg_soap_xsd__language_
#define SOAP_TYPE_cadg_soap_xsd__language_ (-1620144147)
/* Type xsd__language_ is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* simple XSD type 'xsd:language': */
class SOAP_CMAC xsd__language_ : public xsd__anyType {
      public:
        /// Simple content of XSD type 'xsd:language' wrapped by this struct
        std::string __item;
      public:
        /// Return unique type id SOAP_TYPE_cadg_soap_xsd__language_
        virtual long soap_type(void) const { return SOAP_TYPE_cadg_soap_xsd__language_; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type xsd__language_, default initialized and not managed by a soap context
        virtual xsd__language_ *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(xsd__language_); }
      public:
        /// Constructor with initializations
        xsd__language_() : __item() { }
        virtual ~xsd__language_() { }
        /// Friend allocator used by soap_new_xsd__language_(struct soap*, int)
        friend SOAP_FMAC1 xsd__language_ * SOAP_FMAC2 soap_instantiate_xsd__language_(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* CAP-v1.2.h:191 */
#ifndef SOAP_TYPE_cadg_soap_xsd__string
#define SOAP_TYPE_cadg_soap_xsd__string (-1620144148)
/* Type xsd__string is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* simple XSD type 'xsd:string': */
class SOAP_CMAC xsd__string : public xsd__anyType {
      public:
        /// Simple content of XSD type 'xsd:string' wrapped by this struct
        std::string __item;
      public:
        /// Return unique type id SOAP_TYPE_cadg_soap_xsd__string
        virtual long soap_type(void) const { return SOAP_TYPE_cadg_soap_xsd__string; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type xsd__string, default initialized and not managed by a soap context
        virtual xsd__string *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(xsd__string); }
      public:
        /// Constructor with initializations
        xsd__string() : __item() { }
        virtual ~xsd__string() { }
        /// Friend allocator used by soap_new_xsd__string(struct soap*, int)
        friend SOAP_FMAC1 xsd__string * SOAP_FMAC2 soap_instantiate_xsd__string(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* CAP-v1.2.h:379 */
#ifndef SOAP_TYPE_cadg_soap__ns1__alert_info_eventCode
#define SOAP_TYPE_cadg_soap__ns1__alert_info_eventCode (-1620144164)
/* complex XSD type 'ns1:alert-info-eventCode': */
class SOAP_CMAC _ns1__alert_info_eventCode {
      public:
        /// Required element 'ns1:valueName' of XSD type 'xsd:string'
        std::string valueName;
        /// Required element 'ns1:value' of XSD type 'xsd:string'
        std::string value;
      public:
        /// Return unique type id SOAP_TYPE_cadg_soap__ns1__alert_info_eventCode
        virtual long soap_type(void) const { return SOAP_TYPE_cadg_soap__ns1__alert_info_eventCode; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns1__alert_info_eventCode, default initialized and not managed by a soap context
        virtual _ns1__alert_info_eventCode *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_ns1__alert_info_eventCode); }
      public:
        /// Constructor with initializations
        _ns1__alert_info_eventCode() : valueName(), value() { }
        virtual ~_ns1__alert_info_eventCode() { }
        /// Friend allocator used by soap_new__ns1__alert_info_eventCode(struct soap*, int)
        friend SOAP_FMAC1 _ns1__alert_info_eventCode * SOAP_FMAC2 soap_instantiate__ns1__alert_info_eventCode(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* CAP-v1.2.h:419 */
#ifndef SOAP_TYPE_cadg_soap__ns1__alert_info_parameter
#define SOAP_TYPE_cadg_soap__ns1__alert_info_parameter (-1620144168)
/* complex XSD type 'ns1:alert-info-parameter': */
class SOAP_CMAC _ns1__alert_info_parameter {
      public:
        /// Required element 'ns1:valueName' of XSD type 'xsd:string'
        std::string valueName;
        /// Required element 'ns1:value' of XSD type 'xsd:string'
        std::string value;
      public:
        /// Return unique type id SOAP_TYPE_cadg_soap__ns1__alert_info_parameter
        virtual long soap_type(void) const { return SOAP_TYPE_cadg_soap__ns1__alert_info_parameter; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns1__alert_info_parameter, default initialized and not managed by a soap context
        virtual _ns1__alert_info_parameter *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_ns1__alert_info_parameter); }
      public:
        /// Constructor with initializations
        _ns1__alert_info_parameter() : valueName(), value() { }
        virtual ~_ns1__alert_info_parameter() { }
        /// Friend allocator used by soap_new__ns1__alert_info_parameter(struct soap*, int)
        friend SOAP_FMAC1 _ns1__alert_info_parameter * SOAP_FMAC2 soap_instantiate__ns1__alert_info_parameter(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* CAP-v1.2.h:438 */
#ifndef SOAP_TYPE_cadg_soap__ns1__alert_info_resource
#define SOAP_TYPE_cadg_soap__ns1__alert_info_resource (-1620144170)
/* complex XSD type 'ns1:alert-info-resource': */
class SOAP_CMAC _ns1__alert_info_resource {
      public:
        /// Required element 'ns1:resourceDesc' of XSD type 'xsd:string'
        std::string resourceDesc;
        /// Required element 'ns1:mimeType' of XSD type 'xsd:string'
        std::string mimeType;
        /// Optional element 'ns1:size' of XSD type 'xsd:integer'
        std::string *size;
        /// Optional element 'ns1:uri' of XSD type 'xsd:anyURI'
        std::string *uri;
        /// Optional element 'ns1:derefUri' of XSD type 'xsd:string'
        std::string *derefUri;
        /// Optional element 'ns1:digest' of XSD type 'xsd:string'
        std::string *digest;
      public:
        /// Return unique type id SOAP_TYPE_cadg_soap__ns1__alert_info_resource
        virtual long soap_type(void) const { return SOAP_TYPE_cadg_soap__ns1__alert_info_resource; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns1__alert_info_resource, default initialized and not managed by a soap context
        virtual _ns1__alert_info_resource *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_ns1__alert_info_resource); }
      public:
        /// Constructor with initializations
        _ns1__alert_info_resource() : resourceDesc(), mimeType(), size(), uri(), derefUri(), digest() { }
        virtual ~_ns1__alert_info_resource() { }
        /// Friend allocator used by soap_new__ns1__alert_info_resource(struct soap*, int)
        friend SOAP_FMAC1 _ns1__alert_info_resource * SOAP_FMAC2 soap_instantiate__ns1__alert_info_resource(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* CAP-v1.2.h:485 */
#ifndef SOAP_TYPE_cadg_soap__ns1__alert_info_area_geocode
#define SOAP_TYPE_cadg_soap__ns1__alert_info_area_geocode (-1620144174)
/* complex XSD type 'ns1:alert-info-area-geocode': */
class SOAP_CMAC _ns1__alert_info_area_geocode {
      public:
        /// Required element 'ns1:valueName' of XSD type 'xsd:string'
        std::string valueName;
        /// Required element 'ns1:value' of XSD type 'xsd:string'
        std::string value;
      public:
        /// Return unique type id SOAP_TYPE_cadg_soap__ns1__alert_info_area_geocode
        virtual long soap_type(void) const { return SOAP_TYPE_cadg_soap__ns1__alert_info_area_geocode; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns1__alert_info_area_geocode, default initialized and not managed by a soap context
        virtual _ns1__alert_info_area_geocode *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_ns1__alert_info_area_geocode); }
      public:
        /// Constructor with initializations
        _ns1__alert_info_area_geocode() : valueName(), value() { }
        virtual ~_ns1__alert_info_area_geocode() { }
        /// Friend allocator used by soap_new__ns1__alert_info_area_geocode(struct soap*, int)
        friend SOAP_FMAC1 _ns1__alert_info_area_geocode * SOAP_FMAC2 soap_instantiate__ns1__alert_info_area_geocode(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* CAP-v1.2.h:465 */
#ifndef SOAP_TYPE_cadg_soap__ns1__alert_info_area
#define SOAP_TYPE_cadg_soap__ns1__alert_info_area (-1620144173)
/* complex XSD type 'ns1:alert-info-area': */
class SOAP_CMAC _ns1__alert_info_area {
      public:
        /// Required element 'ns1:areaDesc' of XSD type 'xsd:string'
        std::string areaDesc;
        /// Optional element 'ns1:polygon' of XSD type 'xsd:string'
        std::vector<std::string> polygon;
        /// Optional element 'ns1:circle' of XSD type 'xsd:string'
        std::vector<std::string> circle;
        /// Optional element 'ns1:geocode' of XSD type 'ns1:alert-info-area-geocode'
        std::vector<_ns1__alert_info_area_geocode> geocode;
        /// Optional element 'ns1:altitude' of XSD type 'xsd:decimal'
        std::string *altitude;
        /// Optional element 'ns1:ceiling' of XSD type 'xsd:decimal'
        std::string *ceiling;
      public:
        /// Return unique type id SOAP_TYPE_cadg_soap__ns1__alert_info_area
        virtual long soap_type(void) const { return SOAP_TYPE_cadg_soap__ns1__alert_info_area; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns1__alert_info_area, default initialized and not managed by a soap context
        virtual _ns1__alert_info_area *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_ns1__alert_info_area); }
      public:
        /// Constructor with initializations
        _ns1__alert_info_area() : areaDesc(), polygon(), circle(), geocode(), altitude(), ceiling() { }
        virtual ~_ns1__alert_info_area() { }
        /// Friend allocator used by soap_new__ns1__alert_info_area(struct soap*, int)
        friend SOAP_FMAC1 _ns1__alert_info_area * SOAP_FMAC2 soap_instantiate__ns1__alert_info_area(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* CAP-v1.2.h:299 */
#ifndef SOAP_TYPE_cadg_soap__ns1__alert_info
#define SOAP_TYPE_cadg_soap__ns1__alert_info (-1620144155)
/* complex XSD type 'ns1:alert-info': */
class SOAP_CMAC _ns1__alert_info {
      public:
        /// Optional element 'ns1:language' of XSD type 'xsd:language'
        std::string *language;	///< optional with default value = "en-US"
        /// Required element 'ns1:category' of XSD type 'ns1:alert-info-category'
        std::vector<enum _ns1__alert_info_category> category;
        /// Required element 'ns1:event' of XSD type 'xsd:string'
        std::string event;
        /// Optional element 'ns1:responseType' of XSD type 'ns1:alert-info-responseType'
        std::vector<enum _ns1__alert_info_responseType> responseType;
        /// Required element 'ns1:urgency' of XSD type 'ns1:alert-info-urgency'
        enum _ns1__alert_info_urgency urgency;
        /// Required element 'ns1:severity' of XSD type 'ns1:alert-info-severity'
        enum _ns1__alert_info_severity severity;
        /// Required element 'ns1:certainty' of XSD type 'ns1:alert-info-certainty'
        enum _ns1__alert_info_certainty certainty;
        /// Optional element 'ns1:audience' of XSD type 'xsd:string'
        std::string *audience;
        /// Optional element 'ns1:eventCode' of XSD type 'ns1:alert-info-eventCode'
        std::vector<_ns1__alert_info_eventCode> eventCode;
        /// Optional element 'ns1:effective' of XSD type 'xsd:dateTime'
        time_t *effective;
        /// Optional element 'ns1:onset' of XSD type 'xsd:dateTime'
        time_t *onset;
        /// Optional element 'ns1:expires' of XSD type 'xsd:dateTime'
        time_t *expires;
        /// Optional element 'ns1:senderName' of XSD type 'xsd:string'
        std::string *senderName;
        /// Optional element 'ns1:headline' of XSD type 'xsd:string'
        std::string *headline;
        /// Optional element 'ns1:description' of XSD type 'xsd:string'
        std::string *description;
        /// Optional element 'ns1:instruction' of XSD type 'xsd:string'
        std::string *instruction;
        /// Optional element 'ns1:web' of XSD type 'xsd:anyURI'
        std::string *web;
        /// Optional element 'ns1:contact' of XSD type 'xsd:string'
        std::string *contact;
        /// Optional element 'ns1:parameter' of XSD type 'ns1:alert-info-parameter'
        std::vector<_ns1__alert_info_parameter> parameter;
        /// Optional element 'ns1:resource' of XSD type 'ns1:alert-info-resource'
        std::vector<_ns1__alert_info_resource> resource;
        /// Optional element 'ns1:area' of XSD type 'ns1:alert-info-area'
        std::vector<_ns1__alert_info_area> area;
      public:
        /// Return unique type id SOAP_TYPE_cadg_soap__ns1__alert_info
        virtual long soap_type(void) const { return SOAP_TYPE_cadg_soap__ns1__alert_info; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns1__alert_info, default initialized and not managed by a soap context
        virtual _ns1__alert_info *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_ns1__alert_info); }
      public:
        /// Constructor with initializations
        _ns1__alert_info() : language(), category(), event(), responseType(), urgency(), severity(), certainty(), audience(), eventCode(), effective(), onset(), expires(), senderName(), headline(), description(), instruction(), web(), contact(), parameter(), resource(), area() { }
        virtual ~_ns1__alert_info() { }
        /// Friend allocator used by soap_new__ns1__alert_info(struct soap*, int)
        friend SOAP_FMAC1 _ns1__alert_info * SOAP_FMAC2 soap_instantiate__ns1__alert_info(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* CAP-v1.2.h:205 */
#ifndef SOAP_TYPE_cadg_soap__ns1__alert
#define SOAP_TYPE_cadg_soap__ns1__alert (-1620144149)
/* complex XSD type 'ns1:alert': */
class SOAP_CMAC _ns1__alert {
      public:
        /// Required element 'ns1:identifier' of XSD type 'xsd:string'
        std::string identifier;
        /// Required element 'ns1:sender' of XSD type 'xsd:string'
        std::string sender;
        /// Required element 'ns1:sent' of XSD type 'xsd:dateTime'
        time_t sent;
        /// Required element 'ns1:status' of XSD type 'ns1:alert-status'
        enum _ns1__alert_status status;
        /// Required element 'ns1:msgType' of XSD type 'ns1:alert-msgType'
        enum _ns1__alert_msgType msgType;
        /// Optional element 'ns1:source' of XSD type 'xsd:string'
        std::string *source;
        /// Required element 'ns1:scope' of XSD type 'ns1:alert-scope'
        enum _ns1__alert_scope scope;
        /// Optional element 'ns1:restriction' of XSD type 'xsd:string'
        std::string *restriction;
        /// Optional element 'ns1:addresses' of XSD type 'xsd:string'
        std::string *addresses;
        /// Optional element 'ns1:code' of XSD type 'xsd:string'
        std::vector<std::string> code;
        /// Optional element 'ns1:note' of XSD type 'xsd:string'
        std::string *note;
        /// Optional element 'ns1:references' of XSD type 'xsd:string'
        std::string *references;
        /// Optional element 'ns1:incidents' of XSD type 'xsd:string'
        std::string *incidents;
        /// Optional element 'ns1:info' of XSD type 'ns1:alert-info'
        std::vector<_ns1__alert_info> info;
        std::vector<char *> __any;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_cadg_soap__ns1__alert
        virtual long soap_type(void) const { return SOAP_TYPE_cadg_soap__ns1__alert; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns1__alert, default initialized and not managed by a soap context
        virtual _ns1__alert *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_ns1__alert); }
      public:
        /// Constructor with initializations
        _ns1__alert() : identifier(), sender(), sent(), status(), msgType(), source(), scope(), restriction(), addresses(), code(), note(), references(), incidents(), info(), __any(), soap() { }
        virtual ~_ns1__alert() { }
        /// Friend allocator used by soap_new__ns1__alert(struct soap*, int)
        friend SOAP_FMAC1 _ns1__alert * SOAP_FMAC2 soap_instantiate__ns1__alert(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* CAP-v1.2.h:600 */
#ifndef WITH_NOGLOBAL
#ifndef SOAP_TYPE_cadg_soap_SOAP_ENV__Header
#define SOAP_TYPE_cadg_soap_SOAP_ENV__Header (-1620144180)
/* SOAP_ENV__Header: */
struct SOAP_CMAC SOAP_ENV__Header {
      public:
        /** Return unique type id SOAP_TYPE_cadg_soap_SOAP_ENV__Header */
        long soap_type() const { return SOAP_TYPE_cadg_soap_SOAP_ENV__Header; }
        /** Constructor with member initializations */
        SOAP_ENV__Header() { }
        /** Friend allocator */
        friend SOAP_FMAC1 SOAP_ENV__Header * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Header(struct soap*, int, const char*, const char*, size_t*);
};
#endif
#endif

/* CAP-v1.2.h:600 */
#ifndef WITH_NOGLOBAL
#ifndef SOAP_TYPE_cadg_soap_SOAP_ENV__Code
#define SOAP_TYPE_cadg_soap_SOAP_ENV__Code (-1620144181)
/* Type SOAP_ENV__Code is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* SOAP_ENV__Code: */
struct SOAP_CMAC SOAP_ENV__Code {
      public:
        /** Optional element 'SOAP-ENV:Value' of XSD type 'xsd:QName' */
        char *SOAP_ENV__Value;
        /** Optional element 'SOAP-ENV:Subcode' of XSD type 'SOAP-ENV:Code' */
        struct SOAP_ENV__Code *SOAP_ENV__Subcode;
      public:
        /** Return unique type id SOAP_TYPE_cadg_soap_SOAP_ENV__Code */
        long soap_type() const { return SOAP_TYPE_cadg_soap_SOAP_ENV__Code; }
        /** Constructor with member initializations */
        SOAP_ENV__Code() : SOAP_ENV__Value(), SOAP_ENV__Subcode() { }
        /** Friend allocator */
        friend SOAP_FMAC1 SOAP_ENV__Code * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Code(struct soap*, int, const char*, const char*, size_t*);
};
#endif
#endif

/* CAP-v1.2.h:600 */
#ifndef WITH_NOGLOBAL
#ifndef SOAP_TYPE_cadg_soap_SOAP_ENV__Detail
#define SOAP_TYPE_cadg_soap_SOAP_ENV__Detail (-1620144183)
/* SOAP_ENV__Detail: */
struct SOAP_CMAC SOAP_ENV__Detail {
      public:
        char *__any;
        /** Any type of element 'fault' assigned to fault with its SOAP_TYPE_T assigned to __type */
        /** Do not create a cyclic data structure throught this member unless SOAP encoding or SOAP_XML_GRAPH are used for id-ref serialization */
        int __type;
        void *fault;
      public:
        /** Return unique type id SOAP_TYPE_cadg_soap_SOAP_ENV__Detail */
        long soap_type() const { return SOAP_TYPE_cadg_soap_SOAP_ENV__Detail; }
        /** Constructor with member initializations */
        SOAP_ENV__Detail() : __any(), __type(), fault() { }
        /** Friend allocator */
        friend SOAP_FMAC1 SOAP_ENV__Detail * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Detail(struct soap*, int, const char*, const char*, size_t*);
};
#endif
#endif

/* CAP-v1.2.h:600 */
#ifndef WITH_NOGLOBAL
#ifndef SOAP_TYPE_cadg_soap_SOAP_ENV__Reason
#define SOAP_TYPE_cadg_soap_SOAP_ENV__Reason (-1620144186)
/* SOAP_ENV__Reason: */
struct SOAP_CMAC SOAP_ENV__Reason {
      public:
        /** Optional element 'SOAP-ENV:Text' of XSD type 'xsd:string' */
        char *SOAP_ENV__Text;
      public:
        /** Return unique type id SOAP_TYPE_cadg_soap_SOAP_ENV__Reason */
        long soap_type() const { return SOAP_TYPE_cadg_soap_SOAP_ENV__Reason; }
        /** Constructor with member initializations */
        SOAP_ENV__Reason() : SOAP_ENV__Text() { }
        /** Friend allocator */
        friend SOAP_FMAC1 SOAP_ENV__Reason * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Reason(struct soap*, int, const char*, const char*, size_t*);
};
#endif
#endif

/* CAP-v1.2.h:600 */
#ifndef WITH_NOGLOBAL
#ifndef SOAP_TYPE_cadg_soap_SOAP_ENV__Fault
#define SOAP_TYPE_cadg_soap_SOAP_ENV__Fault (-1620144187)
/* SOAP_ENV__Fault: */
struct SOAP_CMAC SOAP_ENV__Fault {
      public:
        /** Optional element 'faultcode' of XSD type 'xsd:QName' */
        char *faultcode;
        /** Optional element 'faultstring' of XSD type 'xsd:string' */
        char *faultstring;
        /** Optional element 'faultactor' of XSD type 'xsd:string' */
        char *faultactor;
        /** Optional element 'detail' of XSD type 'SOAP-ENV:Detail' */
        struct SOAP_ENV__Detail *detail;
        /** Optional element 'SOAP-ENV:Code' of XSD type 'SOAP-ENV:Code' */
        struct SOAP_ENV__Code *SOAP_ENV__Code;
        /** Optional element 'SOAP-ENV:Reason' of XSD type 'SOAP-ENV:Reason' */
        struct SOAP_ENV__Reason *SOAP_ENV__Reason;
        /** Optional element 'SOAP-ENV:Node' of XSD type 'xsd:string' */
        char *SOAP_ENV__Node;
        /** Optional element 'SOAP-ENV:Role' of XSD type 'xsd:string' */
        char *SOAP_ENV__Role;
        /** Optional element 'SOAP-ENV:Detail' of XSD type 'SOAP-ENV:Detail' */
        struct SOAP_ENV__Detail *SOAP_ENV__Detail;
      public:
        /** Return unique type id SOAP_TYPE_cadg_soap_SOAP_ENV__Fault */
        long soap_type() const { return SOAP_TYPE_cadg_soap_SOAP_ENV__Fault; }
        /** Constructor with member initializations */
        SOAP_ENV__Fault() : faultcode(), faultstring(), faultactor(), detail(), SOAP_ENV__Code(), SOAP_ENV__Reason(), SOAP_ENV__Node(), SOAP_ENV__Role(), SOAP_ENV__Detail() { }
        /** Friend allocator */
        friend SOAP_FMAC1 SOAP_ENV__Fault * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Fault(struct soap*, int, const char*, const char*, size_t*);
};
#endif
#endif

/******************************************************************************\
 *                                                                            *
 * Typedefs                                                                   *
 *                                                                            *
\******************************************************************************/


/* (built-in):0 */
#ifndef SOAP_TYPE_cadg_soap__XML
#define SOAP_TYPE_cadg_soap__XML (-1620144132)

typedef char *_XML;
#endif

/* (built-in):0 */
#ifndef SOAP_TYPE_cadg_soap__QName
#define SOAP_TYPE_cadg_soap__QName (-1620144133)

typedef char *_QName;
#endif

/* CAP-v1.2.h:143 */
#ifndef SOAP_TYPE_cadg_soap_xsd__anyURI
#define SOAP_TYPE_cadg_soap_xsd__anyURI (-1620144138)

typedef std::string xsd__anyURI;
#endif

/* CAP-v1.2.h:160 */
#ifndef SOAP_TYPE_cadg_soap_xsd__decimal
#define SOAP_TYPE_cadg_soap_xsd__decimal (-1620144142)

typedef std::string xsd__decimal;
#endif

/* CAP-v1.2.h:170 */
#ifndef SOAP_TYPE_cadg_soap_xsd__integer
#define SOAP_TYPE_cadg_soap_xsd__integer (-1620144144)

typedef std::string xsd__integer;
#endif

/* CAP-v1.2.h:180 */
#ifndef SOAP_TYPE_cadg_soap_xsd__language
#define SOAP_TYPE_cadg_soap_xsd__language (-1620144146)

typedef std::string xsd__language;
#endif

/******************************************************************************\
 *                                                                            *
 * Serializable Types                                                         *
 *                                                                            *
\******************************************************************************/


/* char has binding name 'byte' for type 'xsd:byte' */
#ifndef SOAP_TYPE_cadg_soap_byte
#define SOAP_TYPE_cadg_soap_byte (-1620144130)

#endif

/* int has binding name 'int' for type 'xsd:int' */
#ifndef SOAP_TYPE_cadg_soap_int
#define SOAP_TYPE_cadg_soap_int (-1620144128)

#endif

/* time_t has binding name 'dateTime' for type 'xsd:dateTime' */
#ifndef SOAP_TYPE_cadg_soap_dateTime
#define SOAP_TYPE_cadg_soap_dateTime (-1620144141)

#endif

/* enum _ns1__alert_info_certainty has binding name '_ns1__alert_info_certainty' for type 'ns1:alert-info-certainty' */
#ifndef SOAP_TYPE_cadg_soap__ns1__alert_info_certainty
#define SOAP_TYPE_cadg_soap__ns1__alert_info_certainty (-1620144163)

#endif

/* enum _ns1__alert_info_severity has binding name '_ns1__alert_info_severity' for type 'ns1:alert-info-severity' */
#ifndef SOAP_TYPE_cadg_soap__ns1__alert_info_severity
#define SOAP_TYPE_cadg_soap__ns1__alert_info_severity (-1620144162)

#endif

/* enum _ns1__alert_info_urgency has binding name '_ns1__alert_info_urgency' for type 'ns1:alert-info-urgency' */
#ifndef SOAP_TYPE_cadg_soap__ns1__alert_info_urgency
#define SOAP_TYPE_cadg_soap__ns1__alert_info_urgency (-1620144161)

#endif

/* enum _ns1__alert_info_responseType has binding name '_ns1__alert_info_responseType' for type 'ns1:alert-info-responseType' */
#ifndef SOAP_TYPE_cadg_soap__ns1__alert_info_responseType
#define SOAP_TYPE_cadg_soap__ns1__alert_info_responseType (-1620144159)

#endif

/* enum _ns1__alert_info_category has binding name '_ns1__alert_info_category' for type 'ns1:alert-info-category' */
#ifndef SOAP_TYPE_cadg_soap__ns1__alert_info_category
#define SOAP_TYPE_cadg_soap__ns1__alert_info_category (-1620144157)

#endif

/* enum _ns1__alert_scope has binding name '_ns1__alert_scope' for type 'ns1:alert-scope' */
#ifndef SOAP_TYPE_cadg_soap__ns1__alert_scope
#define SOAP_TYPE_cadg_soap__ns1__alert_scope (-1620144153)

#endif

/* enum _ns1__alert_msgType has binding name '_ns1__alert_msgType' for type 'ns1:alert-msgType' */
#ifndef SOAP_TYPE_cadg_soap__ns1__alert_msgType
#define SOAP_TYPE_cadg_soap__ns1__alert_msgType (-1620144151)

#endif

/* enum _ns1__alert_status has binding name '_ns1__alert_status' for type 'ns1:alert-status' */
#ifndef SOAP_TYPE_cadg_soap__ns1__alert_status
#define SOAP_TYPE_cadg_soap__ns1__alert_status (-1620144150)

#endif

/* _ns1__alert_info_area_geocode has binding name '_ns1__alert_info_area_geocode' for type '' */
#ifndef SOAP_TYPE_cadg_soap__ns1__alert_info_area_geocode
#define SOAP_TYPE_cadg_soap__ns1__alert_info_area_geocode (-1620144174)

#endif

/* _ns1__alert_info_area has binding name '_ns1__alert_info_area' for type '' */
#ifndef SOAP_TYPE_cadg_soap__ns1__alert_info_area
#define SOAP_TYPE_cadg_soap__ns1__alert_info_area (-1620144173)

#endif

/* _ns1__alert_info_resource has binding name '_ns1__alert_info_resource' for type '' */
#ifndef SOAP_TYPE_cadg_soap__ns1__alert_info_resource
#define SOAP_TYPE_cadg_soap__ns1__alert_info_resource (-1620144170)

#endif

/* _ns1__alert_info_parameter has binding name '_ns1__alert_info_parameter' for type '' */
#ifndef SOAP_TYPE_cadg_soap__ns1__alert_info_parameter
#define SOAP_TYPE_cadg_soap__ns1__alert_info_parameter (-1620144168)

#endif

/* _ns1__alert_info_eventCode has binding name '_ns1__alert_info_eventCode' for type '' */
#ifndef SOAP_TYPE_cadg_soap__ns1__alert_info_eventCode
#define SOAP_TYPE_cadg_soap__ns1__alert_info_eventCode (-1620144164)

#endif

/* _ns1__alert_info has binding name '_ns1__alert_info' for type '' */
#ifndef SOAP_TYPE_cadg_soap__ns1__alert_info
#define SOAP_TYPE_cadg_soap__ns1__alert_info (-1620144155)

#endif

/* _ns1__alert has binding name '_ns1__alert' for type '' */
#ifndef SOAP_TYPE_cadg_soap__ns1__alert
#define SOAP_TYPE_cadg_soap__ns1__alert (-1620144149)

#endif

/* xsd__string has binding name 'xsd__string' for type 'xsd:string' */
#ifndef SOAP_TYPE_cadg_soap_xsd__string
#define SOAP_TYPE_cadg_soap_xsd__string (-1620144148)

#endif

/* xsd__language_ has binding name 'xsd__language_' for type 'xsd:language' */
#ifndef SOAP_TYPE_cadg_soap_xsd__language_
#define SOAP_TYPE_cadg_soap_xsd__language_ (-1620144147)

#endif

/* xsd__language has binding name 'xsd__language' for type 'xsd:language' */
#ifndef SOAP_TYPE_cadg_soap_xsd__language
#define SOAP_TYPE_cadg_soap_xsd__language (-1620144146)

#endif

/* xsd__integer_ has binding name 'xsd__integer_' for type 'xsd:integer' */
#ifndef SOAP_TYPE_cadg_soap_xsd__integer_
#define SOAP_TYPE_cadg_soap_xsd__integer_ (-1620144145)

#endif

/* xsd__integer has binding name 'xsd__integer' for type 'xsd:integer' */
#ifndef SOAP_TYPE_cadg_soap_xsd__integer
#define SOAP_TYPE_cadg_soap_xsd__integer (-1620144144)

#endif

/* xsd__decimal_ has binding name 'xsd__decimal_' for type 'xsd:decimal' */
#ifndef SOAP_TYPE_cadg_soap_xsd__decimal_
#define SOAP_TYPE_cadg_soap_xsd__decimal_ (-1620144143)

#endif

/* xsd__decimal has binding name 'xsd__decimal' for type 'xsd:decimal' */
#ifndef SOAP_TYPE_cadg_soap_xsd__decimal
#define SOAP_TYPE_cadg_soap_xsd__decimal (-1620144142)

#endif

/* xsd__dateTime has binding name 'xsd__dateTime' for type 'xsd:dateTime' */
#ifndef SOAP_TYPE_cadg_soap_xsd__dateTime
#define SOAP_TYPE_cadg_soap_xsd__dateTime (-1620144140)

#endif

/* xsd__anyURI_ has binding name 'xsd__anyURI_' for type 'xsd:anyURI' */
#ifndef SOAP_TYPE_cadg_soap_xsd__anyURI_
#define SOAP_TYPE_cadg_soap_xsd__anyURI_ (-1620144139)

#endif

/* xsd__anyURI has binding name 'xsd__anyURI' for type 'xsd:anyURI' */
#ifndef SOAP_TYPE_cadg_soap_xsd__anyURI
#define SOAP_TYPE_cadg_soap_xsd__anyURI (-1620144138)

#endif

/* std::string has binding name 'std__string' for type 'xsd:string' */
#ifndef SOAP_TYPE_cadg_soap_std__string
#define SOAP_TYPE_cadg_soap_std__string (-1620144137)

#endif

/* xsd__anyType has binding name 'xsd__anyType' for type 'xsd:anyType' */
#ifndef SOAP_TYPE_cadg_soap_xsd__anyType
#define SOAP_TYPE_cadg_soap_xsd__anyType (-1620144135)

#endif

/* struct SOAP_ENV__Fault has binding name 'SOAP_ENV__Fault' for type '' */
#ifndef SOAP_TYPE_cadg_soap_SOAP_ENV__Fault
#define SOAP_TYPE_cadg_soap_SOAP_ENV__Fault (-1620144187)

#endif

/* struct SOAP_ENV__Reason has binding name 'SOAP_ENV__Reason' for type '' */
#ifndef SOAP_TYPE_cadg_soap_SOAP_ENV__Reason
#define SOAP_TYPE_cadg_soap_SOAP_ENV__Reason (-1620144186)

#endif

/* struct SOAP_ENV__Detail has binding name 'SOAP_ENV__Detail' for type '' */
#ifndef SOAP_TYPE_cadg_soap_SOAP_ENV__Detail
#define SOAP_TYPE_cadg_soap_SOAP_ENV__Detail (-1620144183)

#endif

/* struct SOAP_ENV__Code has binding name 'SOAP_ENV__Code' for type '' */
#ifndef SOAP_TYPE_cadg_soap_SOAP_ENV__Code
#define SOAP_TYPE_cadg_soap_SOAP_ENV__Code (-1620144181)

#endif

/* struct SOAP_ENV__Header has binding name 'SOAP_ENV__Header' for type '' */
#ifndef SOAP_TYPE_cadg_soap_SOAP_ENV__Header
#define SOAP_TYPE_cadg_soap_SOAP_ENV__Header (-1620144180)

#endif

/* struct SOAP_ENV__Reason * has binding name 'PointerToSOAP_ENV__Reason' for type '' */
#ifndef SOAP_TYPE_cadg_soap_PointerToSOAP_ENV__Reason
#define SOAP_TYPE_cadg_soap_PointerToSOAP_ENV__Reason (-1620144189)

#endif

/* struct SOAP_ENV__Detail * has binding name 'PointerToSOAP_ENV__Detail' for type '' */
#ifndef SOAP_TYPE_cadg_soap_PointerToSOAP_ENV__Detail
#define SOAP_TYPE_cadg_soap_PointerToSOAP_ENV__Detail (-1620144188)

#endif

/* struct SOAP_ENV__Code * has binding name 'PointerToSOAP_ENV__Code' for type '' */
#ifndef SOAP_TYPE_cadg_soap_PointerToSOAP_ENV__Code
#define SOAP_TYPE_cadg_soap_PointerToSOAP_ENV__Code (-1620144182)

#endif

/* std::string * has binding name 'PointerToxsd__decimal' for type 'xsd:decimal' */
#ifndef SOAP_TYPE_cadg_soap_PointerToxsd__decimal
#define SOAP_TYPE_cadg_soap_PointerToxsd__decimal (-1620144176)

#endif

/* std::string * has binding name 'PointerToxsd__integer' for type 'xsd:integer' */
#ifndef SOAP_TYPE_cadg_soap_PointerToxsd__integer
#define SOAP_TYPE_cadg_soap_PointerToxsd__integer (-1620144171)

#endif

/* std::string * has binding name 'PointerToxsd__anyURI' for type 'xsd:anyURI' */
#ifndef SOAP_TYPE_cadg_soap_PointerToxsd__anyURI
#define SOAP_TYPE_cadg_soap_PointerToxsd__anyURI (-1620144167)

#endif

/* time_t * has binding name 'PointerTodateTime' for type 'xsd:dateTime' */
#ifndef SOAP_TYPE_cadg_soap_PointerTodateTime
#define SOAP_TYPE_cadg_soap_PointerTodateTime (-1620144166)

#endif

/* std::string * has binding name 'PointerToxsd__language' for type 'xsd:language' */
#ifndef SOAP_TYPE_cadg_soap_PointerToxsd__language
#define SOAP_TYPE_cadg_soap_PointerToxsd__language (-1620144156)

#endif

/* std::string * has binding name 'PointerTostd__string' for type 'xsd:string' */
#ifndef SOAP_TYPE_cadg_soap_PointerTostd__string
#define SOAP_TYPE_cadg_soap_PointerTostd__string (-1620144152)

#endif

/* _QName has binding name '_QName' for type 'xsd:QName' */
#ifndef SOAP_TYPE_cadg_soap__QName
#define SOAP_TYPE_cadg_soap__QName (-1620144133)

#endif

/* _XML has binding name '_XML' for type '' */
#ifndef SOAP_TYPE_cadg_soap__XML
#define SOAP_TYPE_cadg_soap__XML (-1620144132)

#endif

/* char * has binding name 'string' for type 'xsd:string' */
#ifndef SOAP_TYPE_cadg_soap_string
#define SOAP_TYPE_cadg_soap_string (-1620144131)

#endif

/* std::vector<char *>  has binding name 'std__vectorTemplateOf_XML' for type '' */
#ifndef SOAP_TYPE_cadg_soap_std__vectorTemplateOf_XML
#define SOAP_TYPE_cadg_soap_std__vectorTemplateOf_XML (-1620144179)

#endif

/* std::vector<_ns1__alert_info>  has binding name 'std__vectorTemplateOf_ns1__alert_info' for type '' */
#ifndef SOAP_TYPE_cadg_soap_std__vectorTemplateOf_ns1__alert_info
#define SOAP_TYPE_cadg_soap_std__vectorTemplateOf_ns1__alert_info (-1620144178)

#endif

/* std::vector<_ns1__alert_info_area>  has binding name 'std__vectorTemplateOf_ns1__alert_info_area' for type '' */
#ifndef SOAP_TYPE_cadg_soap_std__vectorTemplateOf_ns1__alert_info_area
#define SOAP_TYPE_cadg_soap_std__vectorTemplateOf_ns1__alert_info_area (-1620144177)

#endif

/* std::vector<_ns1__alert_info_area_geocode>  has binding name 'std__vectorTemplateOf_ns1__alert_info_area_geocode' for type '' */
#ifndef SOAP_TYPE_cadg_soap_std__vectorTemplateOf_ns1__alert_info_area_geocode
#define SOAP_TYPE_cadg_soap_std__vectorTemplateOf_ns1__alert_info_area_geocode (-1620144175)

#endif

/* std::vector<_ns1__alert_info_resource>  has binding name 'std__vectorTemplateOf_ns1__alert_info_resource' for type '' */
#ifndef SOAP_TYPE_cadg_soap_std__vectorTemplateOf_ns1__alert_info_resource
#define SOAP_TYPE_cadg_soap_std__vectorTemplateOf_ns1__alert_info_resource (-1620144172)

#endif

/* std::vector<_ns1__alert_info_parameter>  has binding name 'std__vectorTemplateOf_ns1__alert_info_parameter' for type '' */
#ifndef SOAP_TYPE_cadg_soap_std__vectorTemplateOf_ns1__alert_info_parameter
#define SOAP_TYPE_cadg_soap_std__vectorTemplateOf_ns1__alert_info_parameter (-1620144169)

#endif

/* std::vector<_ns1__alert_info_eventCode>  has binding name 'std__vectorTemplateOf_ns1__alert_info_eventCode' for type '' */
#ifndef SOAP_TYPE_cadg_soap_std__vectorTemplateOf_ns1__alert_info_eventCode
#define SOAP_TYPE_cadg_soap_std__vectorTemplateOf_ns1__alert_info_eventCode (-1620144165)

#endif

/* std::vector<enum _ns1__alert_info_responseType>  has binding name 'std__vectorTemplateOf_ns1__alert_info_responseType' for type 'ns1:alert-info-responseType' */
#ifndef SOAP_TYPE_cadg_soap_std__vectorTemplateOf_ns1__alert_info_responseType
#define SOAP_TYPE_cadg_soap_std__vectorTemplateOf_ns1__alert_info_responseType (-1620144160)

#endif

/* std::vector<enum _ns1__alert_info_category>  has binding name 'std__vectorTemplateOf_ns1__alert_info_category' for type 'ns1:alert-info-category' */
#ifndef SOAP_TYPE_cadg_soap_std__vectorTemplateOf_ns1__alert_info_category
#define SOAP_TYPE_cadg_soap_std__vectorTemplateOf_ns1__alert_info_category (-1620144158)

#endif

/* std::vector<std::string>  has binding name 'std__vectorTemplateOfstd__string' for type 'xsd:string' */
#ifndef SOAP_TYPE_cadg_soap_std__vectorTemplateOfstd__string
#define SOAP_TYPE_cadg_soap_std__vectorTemplateOfstd__string (-1620144154)

#endif

/******************************************************************************\
 *                                                                            *
 * Externals                                                                  *
 *                                                                            *
\******************************************************************************/


} // namespace cadg_soap


#endif

/* End of cadg_soapStub.h */
