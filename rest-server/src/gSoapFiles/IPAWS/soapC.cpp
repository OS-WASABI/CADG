/* soapC.cpp
   Generated by gSOAP 2.8.75 for ipaws.h

gSOAP XML Web services tools
Copyright (C) 2000-2018, Robert van Engelen, Genivia Inc. All Rights Reserved.
The soapcpp2 tool and its generated software are released under the GPL.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial use license is available from Genivia Inc., contact@genivia.com
--------------------------------------------------------------------------------
*/

#if defined(__BORLANDC__)
#pragma option push -w-8060
#pragma option push -w-8004
#endif

#include "soapH.h"

SOAP_SOURCE_STAMP("@(#) soapC.cpp ver 2.8.75 2019-02-28 01:21:03 GMT")


#ifndef WITH_NOGLOBAL

SOAP_FMAC3 int SOAP_FMAC4 soap_getheader(struct soap *soap)
{
	soap->part = SOAP_IN_HEADER;
	soap->header = soap_in_SOAP_ENV__Header(soap, "SOAP-ENV:Header", soap->header, NULL);
	soap->part = SOAP_END_HEADER;
	return soap->header == NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_putheader(struct soap *soap)
{
	if (soap->version && soap->header)
	{	soap->part = SOAP_IN_HEADER;
		if (soap_out_SOAP_ENV__Header(soap, "SOAP-ENV:Header", 0, soap->header, ""))
			return soap->error;
		soap->part = SOAP_END_HEADER;
	}
	return SOAP_OK;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serializeheader(struct soap *soap)
{
	if (soap->version && soap->header)
		soap_serialize_SOAP_ENV__Header(soap, soap->header);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_header(struct soap *soap)
{
	if (soap->header == NULL)
	{	if ((soap->header = soap_new_SOAP_ENV__Header(soap)))
			soap_default_SOAP_ENV__Header(soap, soap->header);
	}
}

SOAP_FMAC3 void SOAP_FMAC4 soap_fault(struct soap *soap)
{
	if (soap->fault == NULL)
	{	soap->fault = soap_new_SOAP_ENV__Fault(soap, -1);
		if (soap->fault == NULL)
			return;
	}
	if (soap->version == 2 && soap->fault->SOAP_ENV__Code == NULL)
		soap->fault->SOAP_ENV__Code = soap_new_SOAP_ENV__Code(soap, -1);
	if (soap->version == 2 && soap->fault->SOAP_ENV__Reason == NULL)
		soap->fault->SOAP_ENV__Reason = soap_new_SOAP_ENV__Reason(soap, -1);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serializefault(struct soap *soap)
{
	if (soap->fault)
		soap_serialize_SOAP_ENV__Fault(soap, soap->fault);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_putfault(struct soap *soap)
{
	if (soap->fault)
		return soap_put_SOAP_ENV__Fault(soap, soap->fault, "SOAP-ENV:Fault", "");
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_getfault(struct soap *soap)
{
	return (soap->fault = soap_get_SOAP_ENV__Fault(soap, NULL, "SOAP-ENV:Fault", NULL)) == NULL;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->fault == NULL)
		return NULL;
	if (soap->version == 2 && soap->fault->SOAP_ENV__Code)
		return (const char**)(void*)&soap->fault->SOAP_ENV__Code->SOAP_ENV__Value;
	return (const char**)(void*)&soap->fault->faultcode;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultsubcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->fault == NULL)
		return NULL;
	if (soap->version == 2 && soap->fault->SOAP_ENV__Code)
	{	if (soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode == NULL)
		{	soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode = soap_new_SOAP_ENV__Code(soap, -1);
			if (soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode == NULL)
				return NULL;
		}
		return (const char**)(void*)&soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode->SOAP_ENV__Value;
	}
	return (const char**)(void*)&soap->fault->faultcode;
}

SOAP_FMAC3 const char * SOAP_FMAC4 soap_fault_subcode(struct soap *soap)
{
	const char **s = soap_faultsubcode(soap);
	return s ? *s : NULL;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultstring(struct soap *soap)
{
	soap_fault(soap);
	if (soap->fault == NULL)
		return NULL;
	if (soap->version == 2 && soap->fault->SOAP_ENV__Reason)
		return (const char**)(void*)&soap->fault->SOAP_ENV__Reason->SOAP_ENV__Text;
	return (const char**)(void*)&soap->fault->faultstring;
}

SOAP_FMAC3 const char * SOAP_FMAC4 soap_fault_string(struct soap *soap)
{
	const char **s = soap_faultstring(soap);
	return s ? *s : NULL;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultdetail(struct soap *soap)
{
	soap_fault(soap);
	if (soap->fault == NULL)
		return NULL;
	if (soap->version == 2)
	{	if (soap->fault->SOAP_ENV__Detail == NULL)
			soap->fault->SOAP_ENV__Detail = soap_new_SOAP_ENV__Detail(soap, -1);
		return (const char**)(void*)&soap->fault->SOAP_ENV__Detail->__any;
	}
	if (soap->fault->detail == NULL)
		soap->fault->detail = soap_new_SOAP_ENV__Detail(soap, -1);
	return (const char**)(void*)&soap->fault->detail->__any;
}

SOAP_FMAC3 const char * SOAP_FMAC4 soap_fault_detail(struct soap *soap)
{
	const char **s = soap_faultdetail(soap);
	return s ? *s : NULL;
}

#endif

#ifndef WITH_NOIDREF
SOAP_FMAC3 int SOAP_FMAC4 soap_getindependent(struct soap *soap)
{
	int t;
	if (soap->version == 1)
	{	for (;;)
		{	if (!soap_getelement(soap, NULL, &t))
				if ((soap->error && soap->error != SOAP_TAG_MISMATCH) || soap_ignore_element(soap))
					break;
		}
	}
	if (soap->error == SOAP_NO_TAG || soap->error == SOAP_EOF)
		soap->error = SOAP_OK;
	return soap->error;
}
#endif

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void * SOAP_FMAC4 soap_getelement(struct soap *soap, const char *tag, int *type)
{	(void)type;
	if (soap_peek_element(soap))
		return NULL;
#ifndef WITH_NOIDREF
	if (!*soap->id || !(*type = soap_lookup_type(soap, soap->id)))
		*type = soap_lookup_type(soap, soap->href);
	switch (*type)
	{
	case SOAP_TYPE_byte:
		return soap_in_byte(soap, tag, NULL, "xsd:byte");
	case SOAP_TYPE_int:
		return soap_in_int(soap, tag, NULL, "xsd:int");
	case SOAP_TYPE_dateTime:
		return soap_in_dateTime(soap, tag, NULL, "xsd:dateTime");
	case SOAP_TYPE__ns5__alert_info_certainty:
		return soap_in__ns5__alert_info_certainty(soap, tag, NULL, "ns5:alert-info-certainty");
	case SOAP_TYPE__ns5__alert_info_severity:
		return soap_in__ns5__alert_info_severity(soap, tag, NULL, "ns5:alert-info-severity");
	case SOAP_TYPE__ns5__alert_info_urgency:
		return soap_in__ns5__alert_info_urgency(soap, tag, NULL, "ns5:alert-info-urgency");
	case SOAP_TYPE__ns5__alert_info_responseType:
		return soap_in__ns5__alert_info_responseType(soap, tag, NULL, "ns5:alert-info-responseType");
	case SOAP_TYPE__ns5__alert_info_category:
		return soap_in__ns5__alert_info_category(soap, tag, NULL, "ns5:alert-info-category");
	case SOAP_TYPE__ns5__alert_scope:
		return soap_in__ns5__alert_scope(soap, tag, NULL, "ns5:alert-scope");
	case SOAP_TYPE__ns5__alert_msgType:
		return soap_in__ns5__alert_msgType(soap, tag, NULL, "ns5:alert-msgType");
	case SOAP_TYPE__ns5__alert_status:
		return soap_in__ns5__alert_status(soap, tag, NULL, "ns5:alert-status");
	case SOAP_TYPE_ns4__subParameterListItem:
		return soap_in_ns4__subParameterListItem(soap, tag, NULL, "ns4:subParameterListItem");
	case SOAP_TYPE_ns4__responseParameterList:
		return soap_in_ns4__responseParameterList(soap, tag, NULL, "ns4:responseParameterList");
	case SOAP_TYPE_ns3__parameterListItem:
		return soap_in_ns3__parameterListItem(soap, tag, NULL, "ns3:parameterListItem");
	case SOAP_TYPE_ns3__requestParameterList:
		return soap_in_ns3__requestParameterList(soap, tag, NULL, "ns3:requestParameterList");
	case SOAP_TYPE_xsd__language:
		return soap_in_xsd__language(soap, tag, NULL, "xsd:language");
	case SOAP_TYPE_xsd__integer:
		return soap_in_xsd__integer(soap, tag, NULL, "xsd:integer");
	case SOAP_TYPE_xsd__decimal:
		return soap_in_xsd__decimal(soap, tag, NULL, "xsd:decimal");
	case SOAP_TYPE_xsd__anyURI:
		return soap_in_xsd__anyURI(soap, tag, NULL, "xsd:anyURI");
	case SOAP_TYPE_std__string:
		return soap_in_std__string(soap, tag, NULL, "xsd:string");
	case SOAP_TYPE_PointerTo_ns2__postCAPRequestTypeDef:
		return soap_in_PointerTo_ns2__postCAPRequestTypeDef(soap, tag, NULL, "ns2:postCAPRequestTypeDef");
	case SOAP_TYPE_PointerTons3__requestParameterList:
		return soap_in_PointerTons3__requestParameterList(soap, tag, NULL, "ns3:requestParameterList");
	case SOAP_TYPE_PointerTo_ns2__CAPServiceException:
		return soap_in_PointerTo_ns2__CAPServiceException(soap, tag, NULL, "ns2:CAPServiceException");
	case SOAP_TYPE_PointerTo_ns2__CAPHeaderTypeDef:
		return soap_in_PointerTo_ns2__CAPHeaderTypeDef(soap, tag, NULL, "ns2:CAPHeaderTypeDef");
	case SOAP_TYPE_PointerToint:
		return soap_in_PointerToint(soap, tag, NULL, "xsd:int");
	case SOAP_TYPE_PointerTo_ns5__alert:
		return soap_in_PointerTo_ns5__alert(soap, tag, NULL, "ns5:alert");
	case SOAP_TYPE_PointerToxsd__decimal:
		return soap_in_PointerToxsd__decimal(soap, tag, NULL, "xsd:decimal");
	case SOAP_TYPE_PointerToxsd__integer:
		return soap_in_PointerToxsd__integer(soap, tag, NULL, "xsd:integer");
	case SOAP_TYPE_PointerToxsd__anyURI:
		return soap_in_PointerToxsd__anyURI(soap, tag, NULL, "xsd:anyURI");
	case SOAP_TYPE_PointerTodateTime:
		return soap_in_PointerTodateTime(soap, tag, NULL, "xsd:dateTime");
	case SOAP_TYPE_PointerToxsd__language:
		return soap_in_PointerToxsd__language(soap, tag, NULL, "xsd:language");
	case SOAP_TYPE_PointerTons4__subParameterListItem:
		return soap_in_PointerTons4__subParameterListItem(soap, tag, NULL, "ns4:subParameterListItem");
	case SOAP_TYPE_PointerTo_ns4__parameterListItem:
		return soap_in_PointerTo_ns4__parameterListItem(soap, tag, NULL, "ns4:parameterListItem");
	case SOAP_TYPE_PointerTons3__parameterListItem:
		return soap_in_PointerTons3__parameterListItem(soap, tag, NULL, "ns3:parameterListItem");
	case SOAP_TYPE_PointerTostd__string:
		return soap_in_PointerTostd__string(soap, tag, NULL, "xsd:string");
	case SOAP_TYPE__QName:
	{	char **s;
		s = soap_in__QName(soap, tag, NULL, "xsd:QName");
		return s ? *s : NULL;
	}
	case SOAP_TYPE_string:
	{	char **s;
		s = soap_in_string(soap, tag, NULL, "xsd:string");
		return s ? *s : NULL;
	}
	default:
#else
	*type = 0;
#endif
	{	const char *t = soap->type;
		if (!*t)
			t = soap->tag;
		if (!soap_match_tag(soap, t, "ns4:subParameterListItem"))
		{	*type = SOAP_TYPE_ns4__subParameterListItem;
			return soap_in_ns4__subParameterListItem(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns4:responseParameterList"))
		{	*type = SOAP_TYPE_ns4__responseParameterList;
			return soap_in_ns4__responseParameterList(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns3:parameterListItem"))
		{	*type = SOAP_TYPE_ns3__parameterListItem;
			return soap_in_ns3__parameterListItem(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns3:requestParameterList"))
		{	*type = SOAP_TYPE_ns3__requestParameterList;
			return soap_in_ns3__requestParameterList(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:language"))
		{	*type = SOAP_TYPE_xsd__language;
			return soap_in_xsd__language(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:integer"))
		{	*type = SOAP_TYPE_xsd__integer;
			return soap_in_xsd__integer(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:decimal"))
		{	*type = SOAP_TYPE_xsd__decimal;
			return soap_in_xsd__decimal(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:anyURI"))
		{	*type = SOAP_TYPE_xsd__anyURI;
			return soap_in_xsd__anyURI(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:string"))
		{	*type = SOAP_TYPE_std__string;
			return soap_in_std__string(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:byte"))
		{	*type = SOAP_TYPE_byte;
			return soap_in_byte(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:int"))
		{	*type = SOAP_TYPE_int;
			return soap_in_int(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:dateTime"))
		{	*type = SOAP_TYPE_dateTime;
			return soap_in_dateTime(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns5:alert-info-certainty"))
		{	*type = SOAP_TYPE__ns5__alert_info_certainty;
			return soap_in__ns5__alert_info_certainty(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns5:alert-info-severity"))
		{	*type = SOAP_TYPE__ns5__alert_info_severity;
			return soap_in__ns5__alert_info_severity(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns5:alert-info-urgency"))
		{	*type = SOAP_TYPE__ns5__alert_info_urgency;
			return soap_in__ns5__alert_info_urgency(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns5:alert-info-responseType"))
		{	*type = SOAP_TYPE__ns5__alert_info_responseType;
			return soap_in__ns5__alert_info_responseType(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns5:alert-info-category"))
		{	*type = SOAP_TYPE__ns5__alert_info_category;
			return soap_in__ns5__alert_info_category(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns5:alert-scope"))
		{	*type = SOAP_TYPE__ns5__alert_scope;
			return soap_in__ns5__alert_scope(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns5:alert-msgType"))
		{	*type = SOAP_TYPE__ns5__alert_msgType;
			return soap_in__ns5__alert_msgType(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns5:alert-status"))
		{	*type = SOAP_TYPE__ns5__alert_status;
			return soap_in__ns5__alert_status(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:QName"))
		{	char **s;
			*type = SOAP_TYPE__QName;
			s = soap_in__QName(soap, tag, NULL, NULL);
			return s ? *s : NULL;
		}
		if (!soap_match_tag(soap, t, "xsd:string"))
		{	char **s;
			*type = SOAP_TYPE_string;
			s = soap_in_string(soap, tag, NULL, NULL);
			return s ? *s : NULL;
		}
		t = soap->tag;
		if (!soap_match_tag(soap, t, "ns5:alert-info-area-geocode"))
		{	*type = SOAP_TYPE__ns5__alert_info_area_geocode;
			return soap_in__ns5__alert_info_area_geocode(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns5:alert-info-area"))
		{	*type = SOAP_TYPE__ns5__alert_info_area;
			return soap_in__ns5__alert_info_area(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns5:alert-info-resource"))
		{	*type = SOAP_TYPE__ns5__alert_info_resource;
			return soap_in__ns5__alert_info_resource(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns5:alert-info-parameter"))
		{	*type = SOAP_TYPE__ns5__alert_info_parameter;
			return soap_in__ns5__alert_info_parameter(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns5:alert-info-eventCode"))
		{	*type = SOAP_TYPE__ns5__alert_info_eventCode;
			return soap_in__ns5__alert_info_eventCode(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns5:alert-info"))
		{	*type = SOAP_TYPE__ns5__alert_info;
			return soap_in__ns5__alert_info(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns2:CAPHeaderTypeDef"))
		{	*type = SOAP_TYPE__ns2__CAPHeaderTypeDef;
			return soap_in__ns2__CAPHeaderTypeDef(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns2:messageResponseTypeDef"))
		{	*type = SOAP_TYPE__ns2__messageResponseTypeDef;
			return soap_in__ns2__messageResponseTypeDef(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns2:postCAPResponseTypeDef"))
		{	*type = SOAP_TYPE__ns2__postCAPResponseTypeDef;
			return soap_in__ns2__postCAPResponseTypeDef(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns2:CAPServiceException"))
		{	*type = SOAP_TYPE__ns2__CAPServiceException;
			return soap_in__ns2__CAPServiceException(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns2:postCAPRequestTypeDef"))
		{	*type = SOAP_TYPE__ns2__postCAPRequestTypeDef;
			return soap_in__ns2__postCAPRequestTypeDef(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns5:alert"))
		{	*type = SOAP_TYPE__ns5__alert;
			return soap_in__ns5__alert(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns4:parameterListItem"))
		{	*type = SOAP_TYPE__ns4__parameterListItem;
			return soap_in__ns4__parameterListItem(soap, NULL, NULL, NULL);
		}
#ifndef WITH_NOIDREF
	}
#endif
	}
	soap->error = SOAP_TAG_MISMATCH;
	return NULL;
}

#ifdef __cplusplus
}
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_ignore_element(struct soap *soap)
{
	if (!soap_peek_element(soap))
	{	int t;
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Unexpected element '%s' in input (level = %u, %d)\n", soap->tag, soap->level, soap->body));
		if (soap->mustUnderstand && !soap->other && !soap->fignore)
			return soap->error = SOAP_MUSTUNDERSTAND;
		if (((soap->mode & SOAP_XML_STRICT) && !soap->fignore && soap->part != SOAP_IN_HEADER) || !soap_match_tag(soap, soap->tag, "SOAP-ENV:"))
		{	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "REJECTING element '%s'\n", soap->tag));
			return soap->error = SOAP_TAG_MISMATCH;
		}
		if (!*soap->id || !soap_getelement(soap, NULL, &t))
		{	soap->peeked = 0;
			if (soap->fignore)
				soap->error = soap->fignore(soap, soap->tag);
			else
				soap->error = SOAP_OK;
			DBGLOG(TEST, if (!soap->error) SOAP_MESSAGE(fdebug, "IGNORING element '%s'\n", soap->tag));
			if (!soap->error && soap->body && soap_ignore(soap))
				return soap->error;
		}
	}
	return soap->error;
}

#ifndef WITH_NOIDREF
SOAP_FMAC3 int SOAP_FMAC4 soap_putindependent(struct soap *soap)
{
	int i;
	struct soap_plist *pp;
	if (soap->version == 1 && soap->encodingStyle && !(soap->mode & (SOAP_XML_TREE | SOAP_XML_GRAPH)))
		for (i = 0; i < SOAP_PTRHASH; i++)
			for (pp = soap->pht[i]; pp; pp = pp->next)
				if (pp->mark1 == 2 || pp->mark2 == 2)
					if (soap_putelement(soap, pp->ptr, SOAP_MULTIREFTAG, pp->id, pp->type))
						return soap->error;
	return SOAP_OK;
}
#endif

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_putelement(struct soap *soap, const void *ptr, const char *tag, int id, int type)
{	(void)tag;
	switch (type)
	{
	case SOAP_TYPE_byte:
		return soap_out_byte(soap, tag, id, (const char *)ptr, "xsd:byte");
	case SOAP_TYPE_int:
		return soap_out_int(soap, tag, id, (const int *)ptr, "xsd:int");
	case SOAP_TYPE_dateTime:
		return soap_out_dateTime(soap, tag, id, (const time_t *)ptr, "xsd:dateTime");
	case SOAP_TYPE__ns5__alert_info_certainty:
		return soap_out__ns5__alert_info_certainty(soap, tag, id, (const enum _ns5__alert_info_certainty *)ptr, "ns5:alert-info-certainty");
	case SOAP_TYPE__ns5__alert_info_severity:
		return soap_out__ns5__alert_info_severity(soap, tag, id, (const enum _ns5__alert_info_severity *)ptr, "ns5:alert-info-severity");
	case SOAP_TYPE__ns5__alert_info_urgency:
		return soap_out__ns5__alert_info_urgency(soap, tag, id, (const enum _ns5__alert_info_urgency *)ptr, "ns5:alert-info-urgency");
	case SOAP_TYPE__ns5__alert_info_responseType:
		return soap_out__ns5__alert_info_responseType(soap, tag, id, (const enum _ns5__alert_info_responseType *)ptr, "ns5:alert-info-responseType");
	case SOAP_TYPE__ns5__alert_info_category:
		return soap_out__ns5__alert_info_category(soap, tag, id, (const enum _ns5__alert_info_category *)ptr, "ns5:alert-info-category");
	case SOAP_TYPE__ns5__alert_scope:
		return soap_out__ns5__alert_scope(soap, tag, id, (const enum _ns5__alert_scope *)ptr, "ns5:alert-scope");
	case SOAP_TYPE__ns5__alert_msgType:
		return soap_out__ns5__alert_msgType(soap, tag, id, (const enum _ns5__alert_msgType *)ptr, "ns5:alert-msgType");
	case SOAP_TYPE__ns5__alert_status:
		return soap_out__ns5__alert_status(soap, tag, id, (const enum _ns5__alert_status *)ptr, "ns5:alert-status");
	case SOAP_TYPE__ns5__alert_info_area_geocode:
		return ((_ns5__alert_info_area_geocode *)ptr)->soap_out(soap, "ns5:alert-info-area-geocode", id, "");
	case SOAP_TYPE__ns5__alert_info_area:
		return ((_ns5__alert_info_area *)ptr)->soap_out(soap, "ns5:alert-info-area", id, "");
	case SOAP_TYPE__ns5__alert_info_resource:
		return ((_ns5__alert_info_resource *)ptr)->soap_out(soap, "ns5:alert-info-resource", id, "");
	case SOAP_TYPE__ns5__alert_info_parameter:
		return ((_ns5__alert_info_parameter *)ptr)->soap_out(soap, "ns5:alert-info-parameter", id, "");
	case SOAP_TYPE__ns5__alert_info_eventCode:
		return ((_ns5__alert_info_eventCode *)ptr)->soap_out(soap, "ns5:alert-info-eventCode", id, "");
	case SOAP_TYPE__ns5__alert_info:
		return ((_ns5__alert_info *)ptr)->soap_out(soap, "ns5:alert-info", id, "");
	case SOAP_TYPE__ns2__CAPHeaderTypeDef:
		return ((_ns2__CAPHeaderTypeDef *)ptr)->soap_out(soap, "ns2:CAPHeaderTypeDef", id, "");
	case SOAP_TYPE__ns2__messageResponseTypeDef:
		return ((_ns2__messageResponseTypeDef *)ptr)->soap_out(soap, "ns2:messageResponseTypeDef", id, "");
	case SOAP_TYPE__ns2__postCAPResponseTypeDef:
		return ((_ns2__postCAPResponseTypeDef *)ptr)->soap_out(soap, "ns2:postCAPResponseTypeDef", id, "");
	case SOAP_TYPE__ns2__CAPServiceException:
		return ((_ns2__CAPServiceException *)ptr)->soap_out(soap, "ns2:CAPServiceException", id, "");
	case SOAP_TYPE__ns2__postCAPRequestTypeDef:
		return ((_ns2__postCAPRequestTypeDef *)ptr)->soap_out(soap, "ns2:postCAPRequestTypeDef", id, "");
	case SOAP_TYPE__ns5__alert:
		return ((_ns5__alert *)ptr)->soap_out(soap, "ns5:alert", id, "");
	case SOAP_TYPE__ns4__parameterListItem:
		return ((_ns4__parameterListItem *)ptr)->soap_out(soap, "ns4:parameterListItem", id, "");
	case SOAP_TYPE_ns4__subParameterListItem:
		return ((ns4__subParameterListItem *)ptr)->soap_out(soap, tag, id, "ns4:subParameterListItem");
	case SOAP_TYPE_ns4__responseParameterList:
		return ((ns4__responseParameterList *)ptr)->soap_out(soap, tag, id, "ns4:responseParameterList");
	case SOAP_TYPE_ns3__parameterListItem:
		return ((ns3__parameterListItem *)ptr)->soap_out(soap, tag, id, "ns3:parameterListItem");
	case SOAP_TYPE_ns3__requestParameterList:
		return ((ns3__requestParameterList *)ptr)->soap_out(soap, tag, id, "ns3:requestParameterList");
	case SOAP_TYPE_xsd__language:
		return soap_out_xsd__language(soap, tag, id, (const std::string *)ptr, "xsd:language");
	case SOAP_TYPE_xsd__integer:
		return soap_out_xsd__integer(soap, tag, id, (const std::string *)ptr, "xsd:integer");
	case SOAP_TYPE_xsd__decimal:
		return soap_out_xsd__decimal(soap, tag, id, (const std::string *)ptr, "xsd:decimal");
	case SOAP_TYPE_xsd__anyURI:
		return soap_out_xsd__anyURI(soap, tag, id, (const std::string *)ptr, "xsd:anyURI");
	case SOAP_TYPE_std__string:
		return soap_out_std__string(soap, tag, id, (const std::string *)ptr, "xsd:string");
	case SOAP_TYPE_PointerTo_ns2__postCAPRequestTypeDef:
		return soap_out_PointerTo_ns2__postCAPRequestTypeDef(soap, tag, id, (_ns2__postCAPRequestTypeDef *const*)ptr, "ns2:postCAPRequestTypeDef");
	case SOAP_TYPE_PointerTons3__requestParameterList:
		return soap_out_PointerTons3__requestParameterList(soap, tag, id, (ns3__requestParameterList *const*)ptr, "ns3:requestParameterList");
	case SOAP_TYPE_PointerTo_ns2__CAPServiceException:
		return soap_out_PointerTo_ns2__CAPServiceException(soap, tag, id, (_ns2__CAPServiceException *const*)ptr, "ns2:CAPServiceException");
	case SOAP_TYPE_PointerTo_ns2__CAPHeaderTypeDef:
		return soap_out_PointerTo_ns2__CAPHeaderTypeDef(soap, tag, id, (_ns2__CAPHeaderTypeDef *const*)ptr, "ns2:CAPHeaderTypeDef");
	case SOAP_TYPE_PointerToint:
		return soap_out_PointerToint(soap, tag, id, (int *const*)ptr, "xsd:int");
	case SOAP_TYPE_PointerTo_ns5__alert:
		return soap_out_PointerTo_ns5__alert(soap, tag, id, (_ns5__alert *const*)ptr, "ns5:alert");
	case SOAP_TYPE_PointerToxsd__decimal:
		return soap_out_PointerToxsd__decimal(soap, tag, id, (std::string *const*)ptr, "xsd:decimal");
	case SOAP_TYPE_PointerToxsd__integer:
		return soap_out_PointerToxsd__integer(soap, tag, id, (std::string *const*)ptr, "xsd:integer");
	case SOAP_TYPE_PointerToxsd__anyURI:
		return soap_out_PointerToxsd__anyURI(soap, tag, id, (std::string *const*)ptr, "xsd:anyURI");
	case SOAP_TYPE_PointerTodateTime:
		return soap_out_PointerTodateTime(soap, tag, id, (time_t *const*)ptr, "xsd:dateTime");
	case SOAP_TYPE_PointerToxsd__language:
		return soap_out_PointerToxsd__language(soap, tag, id, (std::string *const*)ptr, "xsd:language");
	case SOAP_TYPE_PointerTons4__subParameterListItem:
		return soap_out_PointerTons4__subParameterListItem(soap, tag, id, (ns4__subParameterListItem *const*)ptr, "ns4:subParameterListItem");
	case SOAP_TYPE_PointerTo_ns4__parameterListItem:
		return soap_out_PointerTo_ns4__parameterListItem(soap, tag, id, (_ns4__parameterListItem *const*)ptr, "ns4:parameterListItem");
	case SOAP_TYPE_PointerTons3__parameterListItem:
		return soap_out_PointerTons3__parameterListItem(soap, tag, id, (ns3__parameterListItem *const*)ptr, "ns3:parameterListItem");
	case SOAP_TYPE_PointerTostd__string:
		return soap_out_PointerTostd__string(soap, tag, id, (std::string *const*)ptr, "xsd:string");
	case SOAP_TYPE__QName:
		return soap_out_string(soap, tag, id, (char*const*)(void*)&ptr, "xsd:QName");
	case SOAP_TYPE_string:
		return soap_out_string(soap, tag, id, (char*const*)(void*)&ptr, "xsd:string");
	case 0:
		return SOAP_OK;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_putelement '%s' failed for type %d in soapC.cpp\n", tag ? tag : "", type));
	return soap_element_empty(soap, tag); /* unknown type to serialize */
}
#ifdef __cplusplus
}
#endif

#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_markelement(struct soap *soap, const void *ptr, int type)
{
	(void)soap; (void)ptr; (void)type; /* appease -Wall -Werror */
	switch (type)
	{
	case SOAP_TYPE__ns5__alert_info_area_geocode:
		((_ns5__alert_info_area_geocode *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns5__alert_info_area:
		((_ns5__alert_info_area *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns5__alert_info_resource:
		((_ns5__alert_info_resource *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns5__alert_info_parameter:
		((_ns5__alert_info_parameter *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns5__alert_info_eventCode:
		((_ns5__alert_info_eventCode *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns5__alert_info:
		((_ns5__alert_info *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns2__CAPHeaderTypeDef:
		((_ns2__CAPHeaderTypeDef *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns2__messageResponseTypeDef:
		((_ns2__messageResponseTypeDef *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns2__postCAPResponseTypeDef:
		((_ns2__postCAPResponseTypeDef *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns2__CAPServiceException:
		((_ns2__CAPServiceException *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns2__postCAPRequestTypeDef:
		((_ns2__postCAPRequestTypeDef *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns5__alert:
		((_ns5__alert *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns4__parameterListItem:
		((_ns4__parameterListItem *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns4__subParameterListItem:
		((ns4__subParameterListItem *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns4__responseParameterList:
		((ns4__responseParameterList *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns3__parameterListItem:
		((ns3__parameterListItem *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns3__requestParameterList:
		((ns3__requestParameterList *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_xsd__language:
		soap_serialize_xsd__language(soap, (const std::string *)ptr);
		break;
	case SOAP_TYPE_xsd__integer:
		soap_serialize_xsd__integer(soap, (const std::string *)ptr);
		break;
	case SOAP_TYPE_xsd__decimal:
		soap_serialize_xsd__decimal(soap, (const std::string *)ptr);
		break;
	case SOAP_TYPE_xsd__anyURI:
		soap_serialize_xsd__anyURI(soap, (const std::string *)ptr);
		break;
	case SOAP_TYPE_std__string:
		soap_serialize_std__string(soap, (const std::string *)ptr);
		break;
	case SOAP_TYPE___ns2__getMessage:
		soap_serialize___ns2__getMessage(soap, (const struct __ns2__getMessage *)ptr);
		break;
	case SOAP_TYPE___ns2__postCAP:
		soap_serialize___ns2__postCAP(soap, (const struct __ns2__postCAP *)ptr);
		break;
	case SOAP_TYPE___ns2__getRequest:
		soap_serialize___ns2__getRequest(soap, (const struct __ns2__getRequest *)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns2__postCAPRequestTypeDef:
		soap_serialize_PointerTo_ns2__postCAPRequestTypeDef(soap, (_ns2__postCAPRequestTypeDef *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons3__requestParameterList:
		soap_serialize_PointerTons3__requestParameterList(soap, (ns3__requestParameterList *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns2__CAPServiceException:
		soap_serialize_PointerTo_ns2__CAPServiceException(soap, (_ns2__CAPServiceException *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns2__CAPHeaderTypeDef:
		soap_serialize_PointerTo_ns2__CAPHeaderTypeDef(soap, (_ns2__CAPHeaderTypeDef *const*)ptr);
		break;
	case SOAP_TYPE_PointerToint:
		soap_serialize_PointerToint(soap, (int *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns5__alert:
		soap_serialize_PointerTo_ns5__alert(soap, (_ns5__alert *const*)ptr);
		break;
	case SOAP_TYPE_PointerToxsd__decimal:
		soap_serialize_PointerToxsd__decimal(soap, (std::string *const*)ptr);
		break;
	case SOAP_TYPE_PointerToxsd__integer:
		soap_serialize_PointerToxsd__integer(soap, (std::string *const*)ptr);
		break;
	case SOAP_TYPE_PointerToxsd__anyURI:
		soap_serialize_PointerToxsd__anyURI(soap, (std::string *const*)ptr);
		break;
	case SOAP_TYPE_PointerTodateTime:
		soap_serialize_PointerTodateTime(soap, (time_t *const*)ptr);
		break;
	case SOAP_TYPE_PointerToxsd__language:
		soap_serialize_PointerToxsd__language(soap, (std::string *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons4__subParameterListItem:
		soap_serialize_PointerTons4__subParameterListItem(soap, (ns4__subParameterListItem *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns4__parameterListItem:
		soap_serialize_PointerTo_ns4__parameterListItem(soap, (_ns4__parameterListItem *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons3__parameterListItem:
		soap_serialize_PointerTons3__parameterListItem(soap, (ns3__parameterListItem *const*)ptr);
		break;
	case SOAP_TYPE_PointerTostd__string:
		soap_serialize_PointerTostd__string(soap, (std::string *const*)ptr);
		break;
	case SOAP_TYPE__QName:
		soap_serialize_string(soap, (char*const*)(void*)&ptr);
		break;
	case SOAP_TYPE_string:
		soap_serialize_string(soap, (char*const*)(void*)&ptr);
		break;
	}
}
#ifdef __cplusplus
}
#endif
#endif

#ifdef __cplusplus
extern "C" {
#endif

SOAP_FMAC3 void * SOAP_FMAC4 soap_dupelement(struct soap *soap, const void *ptr, int type)
{(void)soap; (void)ptr; (void)type; /* appease -Wall -Werror */
	return NULL;
}
#ifdef __cplusplus
}
#endif

#ifdef __cplusplus
extern "C" {
#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_delelement(const void *ptr, int type)
{(void)ptr; (void)type; /* appease -Wall -Werror */
}
#ifdef __cplusplus
}
#endif

SOAP_FMAC3 void * SOAP_FMAC4 soap_instantiate(struct soap *soap, int t, const char *type, const char *arrayType, size_t *n)
{	(void)type;
	switch (t)
	{
	case SOAP_TYPE_std__string:
		return (void*)soap_instantiate_std__string(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns3__requestParameterList:
		return (void*)soap_instantiate_ns3__requestParameterList(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns3__parameterListItem:
		return (void*)soap_instantiate_ns3__parameterListItem(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns4__responseParameterList:
		return (void*)soap_instantiate_ns4__responseParameterList(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns4__subParameterListItem:
		return (void*)soap_instantiate_ns4__subParameterListItem(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns4__parameterListItem:
		return (void*)soap_instantiate__ns4__parameterListItem(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns5__alert_info_eventCode:
		return (void*)soap_instantiate__ns5__alert_info_eventCode(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns5__alert_info_parameter:
		return (void*)soap_instantiate__ns5__alert_info_parameter(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns5__alert_info_resource:
		return (void*)soap_instantiate__ns5__alert_info_resource(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns5__alert_info_area_geocode:
		return (void*)soap_instantiate__ns5__alert_info_area_geocode(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns5__alert_info_area:
		return (void*)soap_instantiate__ns5__alert_info_area(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns5__alert_info:
		return (void*)soap_instantiate__ns5__alert_info(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns5__alert:
		return (void*)soap_instantiate__ns5__alert(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns2__postCAPRequestTypeDef:
		return (void*)soap_instantiate__ns2__postCAPRequestTypeDef(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns2__CAPServiceException:
		return (void*)soap_instantiate__ns2__CAPServiceException(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns2__postCAPResponseTypeDef:
		return (void*)soap_instantiate__ns2__postCAPResponseTypeDef(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns2__messageResponseTypeDef:
		return (void*)soap_instantiate__ns2__messageResponseTypeDef(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns2__CAPHeaderTypeDef:
		return (void*)soap_instantiate__ns2__CAPHeaderTypeDef(soap, -1, type, arrayType, n);
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Header:
		return (void*)soap_instantiate_SOAP_ENV__Header(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Detail:
		return (void*)soap_instantiate_SOAP_ENV__Detail(soap, -1, type, arrayType, n);
#endif
	case SOAP_TYPE___ns2__getRequest:
		return (void*)soap_instantiate___ns2__getRequest(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns2__postCAP:
		return (void*)soap_instantiate___ns2__postCAP(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns2__getMessage:
		return (void*)soap_instantiate___ns2__getMessage(soap, -1, type, arrayType, n);
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Code:
		return (void*)soap_instantiate_SOAP_ENV__Code(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Reason:
		return (void*)soap_instantiate_SOAP_ENV__Reason(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Fault:
		return (void*)soap_instantiate_SOAP_ENV__Fault(soap, -1, type, arrayType, n);
#endif
	case SOAP_TYPE_xsd__anyURI:
		return (void*)soap_instantiate_xsd__anyURI(soap, -1, type, arrayType, n);
	case SOAP_TYPE_xsd__decimal:
		return (void*)soap_instantiate_xsd__decimal(soap, -1, type, arrayType, n);
	case SOAP_TYPE_xsd__integer:
		return (void*)soap_instantiate_xsd__integer(soap, -1, type, arrayType, n);
	case SOAP_TYPE_xsd__language:
		return (void*)soap_instantiate_xsd__language(soap, -1, type, arrayType, n);
	case SOAP_TYPE_std__vectorTemplateOfPointerTo_ns5__alert:
		return (void*)soap_instantiate_std__vectorTemplateOfPointerTo_ns5__alert(soap, -1, type, arrayType, n);
	case SOAP_TYPE_std__vectorTemplateOf_XML:
		return (void*)soap_instantiate_std__vectorTemplateOf_XML(soap, -1, type, arrayType, n);
	case SOAP_TYPE_std__vectorTemplateOf_ns5__alert_info:
		return (void*)soap_instantiate_std__vectorTemplateOf_ns5__alert_info(soap, -1, type, arrayType, n);
	case SOAP_TYPE_std__vectorTemplateOf_ns5__alert_info_area:
		return (void*)soap_instantiate_std__vectorTemplateOf_ns5__alert_info_area(soap, -1, type, arrayType, n);
	case SOAP_TYPE_std__vectorTemplateOf_ns5__alert_info_area_geocode:
		return (void*)soap_instantiate_std__vectorTemplateOf_ns5__alert_info_area_geocode(soap, -1, type, arrayType, n);
	case SOAP_TYPE_std__vectorTemplateOf_ns5__alert_info_resource:
		return (void*)soap_instantiate_std__vectorTemplateOf_ns5__alert_info_resource(soap, -1, type, arrayType, n);
	case SOAP_TYPE_std__vectorTemplateOf_ns5__alert_info_parameter:
		return (void*)soap_instantiate_std__vectorTemplateOf_ns5__alert_info_parameter(soap, -1, type, arrayType, n);
	case SOAP_TYPE_std__vectorTemplateOf_ns5__alert_info_eventCode:
		return (void*)soap_instantiate_std__vectorTemplateOf_ns5__alert_info_eventCode(soap, -1, type, arrayType, n);
	case SOAP_TYPE_std__vectorTemplateOf_ns5__alert_info_responseType:
		return (void*)soap_instantiate_std__vectorTemplateOf_ns5__alert_info_responseType(soap, -1, type, arrayType, n);
	case SOAP_TYPE_std__vectorTemplateOf_ns5__alert_info_category:
		return (void*)soap_instantiate_std__vectorTemplateOf_ns5__alert_info_category(soap, -1, type, arrayType, n);
	case SOAP_TYPE_std__vectorTemplateOfPointerTons4__subParameterListItem:
		return (void*)soap_instantiate_std__vectorTemplateOfPointerTons4__subParameterListItem(soap, -1, type, arrayType, n);
	case SOAP_TYPE_std__vectorTemplateOfPointerTo_ns4__parameterListItem:
		return (void*)soap_instantiate_std__vectorTemplateOfPointerTo_ns4__parameterListItem(soap, -1, type, arrayType, n);
	case SOAP_TYPE_std__vectorTemplateOfstd__string:
		return (void*)soap_instantiate_std__vectorTemplateOfstd__string(soap, -1, type, arrayType, n);
	case SOAP_TYPE_std__vectorTemplateOfPointerTons3__parameterListItem:
		return (void*)soap_instantiate_std__vectorTemplateOfPointerTons3__parameterListItem(soap, -1, type, arrayType, n);
	}
	return NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_fdelete(struct soap *soap, struct soap_clist *p)
{
	(void)soap; /* appease -Wall -Werror */
	if (!p->ptr)
		return SOAP_OK;
	switch (p->type)
	{
	case SOAP_TYPE_std__string:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<std::string*>(p->ptr), std::string);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<std::string*>(p->ptr), std::string);
		break;
	case SOAP_TYPE_ns3__requestParameterList:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<ns3__requestParameterList*>(p->ptr), ns3__requestParameterList);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<ns3__requestParameterList*>(p->ptr), ns3__requestParameterList);
		break;
	case SOAP_TYPE_ns3__parameterListItem:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<ns3__parameterListItem*>(p->ptr), ns3__parameterListItem);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<ns3__parameterListItem*>(p->ptr), ns3__parameterListItem);
		break;
	case SOAP_TYPE_ns4__responseParameterList:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<ns4__responseParameterList*>(p->ptr), ns4__responseParameterList);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<ns4__responseParameterList*>(p->ptr), ns4__responseParameterList);
		break;
	case SOAP_TYPE_ns4__subParameterListItem:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<ns4__subParameterListItem*>(p->ptr), ns4__subParameterListItem);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<ns4__subParameterListItem*>(p->ptr), ns4__subParameterListItem);
		break;
	case SOAP_TYPE__ns4__parameterListItem:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_ns4__parameterListItem*>(p->ptr), _ns4__parameterListItem);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_ns4__parameterListItem*>(p->ptr), _ns4__parameterListItem);
		break;
	case SOAP_TYPE__ns5__alert_info_eventCode:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_ns5__alert_info_eventCode*>(p->ptr), _ns5__alert_info_eventCode);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_ns5__alert_info_eventCode*>(p->ptr), _ns5__alert_info_eventCode);
		break;
	case SOAP_TYPE__ns5__alert_info_parameter:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_ns5__alert_info_parameter*>(p->ptr), _ns5__alert_info_parameter);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_ns5__alert_info_parameter*>(p->ptr), _ns5__alert_info_parameter);
		break;
	case SOAP_TYPE__ns5__alert_info_resource:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_ns5__alert_info_resource*>(p->ptr), _ns5__alert_info_resource);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_ns5__alert_info_resource*>(p->ptr), _ns5__alert_info_resource);
		break;
	case SOAP_TYPE__ns5__alert_info_area_geocode:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_ns5__alert_info_area_geocode*>(p->ptr), _ns5__alert_info_area_geocode);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_ns5__alert_info_area_geocode*>(p->ptr), _ns5__alert_info_area_geocode);
		break;
	case SOAP_TYPE__ns5__alert_info_area:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_ns5__alert_info_area*>(p->ptr), _ns5__alert_info_area);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_ns5__alert_info_area*>(p->ptr), _ns5__alert_info_area);
		break;
	case SOAP_TYPE__ns5__alert_info:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_ns5__alert_info*>(p->ptr), _ns5__alert_info);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_ns5__alert_info*>(p->ptr), _ns5__alert_info);
		break;
	case SOAP_TYPE__ns5__alert:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_ns5__alert*>(p->ptr), _ns5__alert);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_ns5__alert*>(p->ptr), _ns5__alert);
		break;
	case SOAP_TYPE__ns2__postCAPRequestTypeDef:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_ns2__postCAPRequestTypeDef*>(p->ptr), _ns2__postCAPRequestTypeDef);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_ns2__postCAPRequestTypeDef*>(p->ptr), _ns2__postCAPRequestTypeDef);
		break;
	case SOAP_TYPE__ns2__CAPServiceException:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_ns2__CAPServiceException*>(p->ptr), _ns2__CAPServiceException);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_ns2__CAPServiceException*>(p->ptr), _ns2__CAPServiceException);
		break;
	case SOAP_TYPE__ns2__postCAPResponseTypeDef:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_ns2__postCAPResponseTypeDef*>(p->ptr), _ns2__postCAPResponseTypeDef);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_ns2__postCAPResponseTypeDef*>(p->ptr), _ns2__postCAPResponseTypeDef);
		break;
	case SOAP_TYPE__ns2__messageResponseTypeDef:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_ns2__messageResponseTypeDef*>(p->ptr), _ns2__messageResponseTypeDef);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_ns2__messageResponseTypeDef*>(p->ptr), _ns2__messageResponseTypeDef);
		break;
	case SOAP_TYPE__ns2__CAPHeaderTypeDef:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_ns2__CAPHeaderTypeDef*>(p->ptr), _ns2__CAPHeaderTypeDef);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_ns2__CAPHeaderTypeDef*>(p->ptr), _ns2__CAPHeaderTypeDef);
		break;
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Header:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct SOAP_ENV__Header*>(p->ptr), struct SOAP_ENV__Header);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct SOAP_ENV__Header*>(p->ptr), struct SOAP_ENV__Header);
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Detail:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct SOAP_ENV__Detail*>(p->ptr), struct SOAP_ENV__Detail);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct SOAP_ENV__Detail*>(p->ptr), struct SOAP_ENV__Detail);
		break;
#endif
	case SOAP_TYPE___ns2__getRequest:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct __ns2__getRequest*>(p->ptr), struct __ns2__getRequest);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct __ns2__getRequest*>(p->ptr), struct __ns2__getRequest);
		break;
	case SOAP_TYPE___ns2__postCAP:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct __ns2__postCAP*>(p->ptr), struct __ns2__postCAP);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct __ns2__postCAP*>(p->ptr), struct __ns2__postCAP);
		break;
	case SOAP_TYPE___ns2__getMessage:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct __ns2__getMessage*>(p->ptr), struct __ns2__getMessage);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct __ns2__getMessage*>(p->ptr), struct __ns2__getMessage);
		break;
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Code:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct SOAP_ENV__Code*>(p->ptr), struct SOAP_ENV__Code);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct SOAP_ENV__Code*>(p->ptr), struct SOAP_ENV__Code);
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Reason:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct SOAP_ENV__Reason*>(p->ptr), struct SOAP_ENV__Reason);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct SOAP_ENV__Reason*>(p->ptr), struct SOAP_ENV__Reason);
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Fault:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct SOAP_ENV__Fault*>(p->ptr), struct SOAP_ENV__Fault);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct SOAP_ENV__Fault*>(p->ptr), struct SOAP_ENV__Fault);
		break;
#endif
	case SOAP_TYPE_xsd__anyURI:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<std::string*>(p->ptr), std::string);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<std::string*>(p->ptr), std::string);
		break;
	case SOAP_TYPE_xsd__decimal:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<std::string*>(p->ptr), std::string);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<std::string*>(p->ptr), std::string);
		break;
	case SOAP_TYPE_xsd__integer:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<std::string*>(p->ptr), std::string);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<std::string*>(p->ptr), std::string);
		break;
	case SOAP_TYPE_xsd__language:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<std::string*>(p->ptr), std::string);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<std::string*>(p->ptr), std::string);
		break;
	case SOAP_TYPE_std__vectorTemplateOfPointerTo_ns5__alert:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<std::vector<_ns5__alert *> *>(p->ptr), std::vector<_ns5__alert *> );
		else
			SOAP_DELETE_ARRAY(soap, static_cast<std::vector<_ns5__alert *> *>(p->ptr), std::vector<_ns5__alert *> );
		break;
	case SOAP_TYPE_std__vectorTemplateOf_XML:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<std::vector<char *> *>(p->ptr), std::vector<char *> );
		else
			SOAP_DELETE_ARRAY(soap, static_cast<std::vector<char *> *>(p->ptr), std::vector<char *> );
		break;
	case SOAP_TYPE_std__vectorTemplateOf_ns5__alert_info:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<std::vector<_ns5__alert_info> *>(p->ptr), std::vector<_ns5__alert_info> );
		else
			SOAP_DELETE_ARRAY(soap, static_cast<std::vector<_ns5__alert_info> *>(p->ptr), std::vector<_ns5__alert_info> );
		break;
	case SOAP_TYPE_std__vectorTemplateOf_ns5__alert_info_area:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<std::vector<_ns5__alert_info_area> *>(p->ptr), std::vector<_ns5__alert_info_area> );
		else
			SOAP_DELETE_ARRAY(soap, static_cast<std::vector<_ns5__alert_info_area> *>(p->ptr), std::vector<_ns5__alert_info_area> );
		break;
	case SOAP_TYPE_std__vectorTemplateOf_ns5__alert_info_area_geocode:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<std::vector<_ns5__alert_info_area_geocode> *>(p->ptr), std::vector<_ns5__alert_info_area_geocode> );
		else
			SOAP_DELETE_ARRAY(soap, static_cast<std::vector<_ns5__alert_info_area_geocode> *>(p->ptr), std::vector<_ns5__alert_info_area_geocode> );
		break;
	case SOAP_TYPE_std__vectorTemplateOf_ns5__alert_info_resource:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<std::vector<_ns5__alert_info_resource> *>(p->ptr), std::vector<_ns5__alert_info_resource> );
		else
			SOAP_DELETE_ARRAY(soap, static_cast<std::vector<_ns5__alert_info_resource> *>(p->ptr), std::vector<_ns5__alert_info_resource> );
		break;
	case SOAP_TYPE_std__vectorTemplateOf_ns5__alert_info_parameter:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<std::vector<_ns5__alert_info_parameter> *>(p->ptr), std::vector<_ns5__alert_info_parameter> );
		else
			SOAP_DELETE_ARRAY(soap, static_cast<std::vector<_ns5__alert_info_parameter> *>(p->ptr), std::vector<_ns5__alert_info_parameter> );
		break;
	case SOAP_TYPE_std__vectorTemplateOf_ns5__alert_info_eventCode:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<std::vector<_ns5__alert_info_eventCode> *>(p->ptr), std::vector<_ns5__alert_info_eventCode> );
		else
			SOAP_DELETE_ARRAY(soap, static_cast<std::vector<_ns5__alert_info_eventCode> *>(p->ptr), std::vector<_ns5__alert_info_eventCode> );
		break;
	case SOAP_TYPE_std__vectorTemplateOf_ns5__alert_info_responseType:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<std::vector<enum _ns5__alert_info_responseType> *>(p->ptr), std::vector<enum _ns5__alert_info_responseType> );
		else
			SOAP_DELETE_ARRAY(soap, static_cast<std::vector<enum _ns5__alert_info_responseType> *>(p->ptr), std::vector<enum _ns5__alert_info_responseType> );
		break;
	case SOAP_TYPE_std__vectorTemplateOf_ns5__alert_info_category:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<std::vector<enum _ns5__alert_info_category> *>(p->ptr), std::vector<enum _ns5__alert_info_category> );
		else
			SOAP_DELETE_ARRAY(soap, static_cast<std::vector<enum _ns5__alert_info_category> *>(p->ptr), std::vector<enum _ns5__alert_info_category> );
		break;
	case SOAP_TYPE_std__vectorTemplateOfPointerTons4__subParameterListItem:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<std::vector<ns4__subParameterListItem *> *>(p->ptr), std::vector<ns4__subParameterListItem *> );
		else
			SOAP_DELETE_ARRAY(soap, static_cast<std::vector<ns4__subParameterListItem *> *>(p->ptr), std::vector<ns4__subParameterListItem *> );
		break;
	case SOAP_TYPE_std__vectorTemplateOfPointerTo_ns4__parameterListItem:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<std::vector<_ns4__parameterListItem *> *>(p->ptr), std::vector<_ns4__parameterListItem *> );
		else
			SOAP_DELETE_ARRAY(soap, static_cast<std::vector<_ns4__parameterListItem *> *>(p->ptr), std::vector<_ns4__parameterListItem *> );
		break;
	case SOAP_TYPE_std__vectorTemplateOfstd__string:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<std::vector<std::string> *>(p->ptr), std::vector<std::string> );
		else
			SOAP_DELETE_ARRAY(soap, static_cast<std::vector<std::string> *>(p->ptr), std::vector<std::string> );
		break;
	case SOAP_TYPE_std__vectorTemplateOfPointerTons3__parameterListItem:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<std::vector<ns3__parameterListItem *> *>(p->ptr), std::vector<ns3__parameterListItem *> );
		else
			SOAP_DELETE_ARRAY(soap, static_cast<std::vector<ns3__parameterListItem *> *>(p->ptr), std::vector<ns3__parameterListItem *> );
		break;
	default:
		return SOAP_ERR;
	}
	return SOAP_OK;
}

#ifdef WIN32
#pragma warning(push)
// do not warn on switch w/o cases
#pragma warning(disable:4065)
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_fbase(int t, int b)
{
	(void)t; (void)b; /* appease -Wall -Werror */
	return 0;
}
#ifdef WIN32
#pragma warning(pop)
#endif

#ifndef WITH_NOIDREF
#ifdef WIN32
#pragma warning(push)
// do not warn on switch w/o cases
#pragma warning(disable:4065)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_finsert(struct soap *soap, int t, int tt, void *p, size_t index, const void *q, void **x)
{
	(void)soap; (void)t; (void)p; (void)index; (void)q; (void)x; /* appease -Wall -Werror */
	switch (tt)
	{
	case SOAP_TYPE_std__vectorTemplateOfPointerTo_ns5__alert:
		if (t == SOAP_TYPE__ns5__alert || soap_fbase(t, SOAP_TYPE__ns5__alert))
		{	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container std::vector<_ns5__alert *>  insert type=%d in %d location=%p object=%p at index=%lu\n", t, tt, p, q, (unsigned long)index));
			(*(std::vector<_ns5__alert *> *)p)[index] = *(_ns5__alert **)q;
		}
		break;
	case SOAP_TYPE_std__vectorTemplateOf_XML:
		if (t == SOAP_TYPE__XML)
		{	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container std::vector<char *>  insert type=%d in %d location=%p object=%p at index=%lu\n", t, tt, p, q, (unsigned long)index));
			(*(std::vector<char *> *)p)[index] = *(char **)q;
		}
		break;
	case SOAP_TYPE_std__vectorTemplateOf_ns5__alert_info:
		if (t == SOAP_TYPE__ns5__alert_info)
		{	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container std::vector<_ns5__alert_info>  insert type=%d in %d location=%p object=%p at index=%lu\n", t, tt, p, q, (unsigned long)index));
			(*(std::vector<_ns5__alert_info> *)p)[index] = *(_ns5__alert_info *)q;
		}
		break;
	case SOAP_TYPE_std__vectorTemplateOf_ns5__alert_info_area:
		if (t == SOAP_TYPE__ns5__alert_info_area)
		{	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container std::vector<_ns5__alert_info_area>  insert type=%d in %d location=%p object=%p at index=%lu\n", t, tt, p, q, (unsigned long)index));
			(*(std::vector<_ns5__alert_info_area> *)p)[index] = *(_ns5__alert_info_area *)q;
		}
		break;
	case SOAP_TYPE_std__vectorTemplateOf_ns5__alert_info_area_geocode:
		if (t == SOAP_TYPE__ns5__alert_info_area_geocode)
		{	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container std::vector<_ns5__alert_info_area_geocode>  insert type=%d in %d location=%p object=%p at index=%lu\n", t, tt, p, q, (unsigned long)index));
			(*(std::vector<_ns5__alert_info_area_geocode> *)p)[index] = *(_ns5__alert_info_area_geocode *)q;
		}
		break;
	case SOAP_TYPE_std__vectorTemplateOf_ns5__alert_info_resource:
		if (t == SOAP_TYPE__ns5__alert_info_resource)
		{	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container std::vector<_ns5__alert_info_resource>  insert type=%d in %d location=%p object=%p at index=%lu\n", t, tt, p, q, (unsigned long)index));
			(*(std::vector<_ns5__alert_info_resource> *)p)[index] = *(_ns5__alert_info_resource *)q;
		}
		break;
	case SOAP_TYPE_std__vectorTemplateOf_ns5__alert_info_parameter:
		if (t == SOAP_TYPE__ns5__alert_info_parameter)
		{	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container std::vector<_ns5__alert_info_parameter>  insert type=%d in %d location=%p object=%p at index=%lu\n", t, tt, p, q, (unsigned long)index));
			(*(std::vector<_ns5__alert_info_parameter> *)p)[index] = *(_ns5__alert_info_parameter *)q;
		}
		break;
	case SOAP_TYPE_std__vectorTemplateOf_ns5__alert_info_eventCode:
		if (t == SOAP_TYPE__ns5__alert_info_eventCode)
		{	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container std::vector<_ns5__alert_info_eventCode>  insert type=%d in %d location=%p object=%p at index=%lu\n", t, tt, p, q, (unsigned long)index));
			(*(std::vector<_ns5__alert_info_eventCode> *)p)[index] = *(_ns5__alert_info_eventCode *)q;
		}
		break;
	case SOAP_TYPE_std__vectorTemplateOf_ns5__alert_info_responseType:
		if (t == SOAP_TYPE__ns5__alert_info_responseType)
		{	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container std::vector<enum _ns5__alert_info_responseType>  insert type=%d in %d location=%p object=%p at index=%lu\n", t, tt, p, q, (unsigned long)index));
			(*(std::vector<enum _ns5__alert_info_responseType> *)p)[index] = *(enum _ns5__alert_info_responseType *)q;
		}
		break;
	case SOAP_TYPE_std__vectorTemplateOf_ns5__alert_info_category:
		if (t == SOAP_TYPE__ns5__alert_info_category)
		{	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container std::vector<enum _ns5__alert_info_category>  insert type=%d in %d location=%p object=%p at index=%lu\n", t, tt, p, q, (unsigned long)index));
			(*(std::vector<enum _ns5__alert_info_category> *)p)[index] = *(enum _ns5__alert_info_category *)q;
		}
		break;
	case SOAP_TYPE_std__vectorTemplateOfPointerTons4__subParameterListItem:
		if (t == SOAP_TYPE_ns4__subParameterListItem || soap_fbase(t, SOAP_TYPE_ns4__subParameterListItem))
		{	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container std::vector<ns4__subParameterListItem *>  insert type=%d in %d location=%p object=%p at index=%lu\n", t, tt, p, q, (unsigned long)index));
			(*(std::vector<ns4__subParameterListItem *> *)p)[index] = *(ns4__subParameterListItem **)q;
		}
		break;
	case SOAP_TYPE_std__vectorTemplateOfPointerTo_ns4__parameterListItem:
		if (t == SOAP_TYPE__ns4__parameterListItem || soap_fbase(t, SOAP_TYPE__ns4__parameterListItem))
		{	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container std::vector<_ns4__parameterListItem *>  insert type=%d in %d location=%p object=%p at index=%lu\n", t, tt, p, q, (unsigned long)index));
			(*(std::vector<_ns4__parameterListItem *> *)p)[index] = *(_ns4__parameterListItem **)q;
		}
		break;
	case SOAP_TYPE_std__vectorTemplateOfstd__string:
		if (t == SOAP_TYPE_std__string)
		{	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container std::vector<std::string>  insert type=%d in %d location=%p object=%p at index=%lu\n", t, tt, p, q, (unsigned long)index));
			(*(std::vector<std::string> *)p)[index] = *(std::string *)q;
		}
		break;
	case SOAP_TYPE_std__vectorTemplateOfPointerTons3__parameterListItem:
		if (t == SOAP_TYPE_ns3__parameterListItem || soap_fbase(t, SOAP_TYPE_ns3__parameterListItem))
		{	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container std::vector<ns3__parameterListItem *>  insert type=%d in %d location=%p object=%p at index=%lu\n", t, tt, p, q, (unsigned long)index));
			(*(std::vector<ns3__parameterListItem *> *)p)[index] = *(ns3__parameterListItem **)q;
		}
		break;
	case SOAP_TYPE_std__string:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy std::string type=%d location=%p object=%p\n", t, p, q));
		*(std::string*)p = *(std::string*)q;
		break;
	case SOAP_TYPE_ns3__requestParameterList:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy ns3__requestParameterList type=%d location=%p object=%p\n", t, p, q));
		*(ns3__requestParameterList*)p = *(ns3__requestParameterList*)q;
		break;
	case SOAP_TYPE_ns3__parameterListItem:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy ns3__parameterListItem type=%d location=%p object=%p\n", t, p, q));
		*(ns3__parameterListItem*)p = *(ns3__parameterListItem*)q;
		break;
	case SOAP_TYPE_ns4__responseParameterList:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy ns4__responseParameterList type=%d location=%p object=%p\n", t, p, q));
		*(ns4__responseParameterList*)p = *(ns4__responseParameterList*)q;
		break;
	case SOAP_TYPE_ns4__subParameterListItem:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy ns4__subParameterListItem type=%d location=%p object=%p\n", t, p, q));
		*(ns4__subParameterListItem*)p = *(ns4__subParameterListItem*)q;
		break;
	case SOAP_TYPE__ns4__parameterListItem:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _ns4__parameterListItem type=%d location=%p object=%p\n", t, p, q));
		*(_ns4__parameterListItem*)p = *(_ns4__parameterListItem*)q;
		break;
	case SOAP_TYPE__ns5__alert_info_eventCode:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _ns5__alert_info_eventCode type=%d location=%p object=%p\n", t, p, q));
		*(_ns5__alert_info_eventCode*)p = *(_ns5__alert_info_eventCode*)q;
		break;
	case SOAP_TYPE__ns5__alert_info_parameter:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _ns5__alert_info_parameter type=%d location=%p object=%p\n", t, p, q));
		*(_ns5__alert_info_parameter*)p = *(_ns5__alert_info_parameter*)q;
		break;
	case SOAP_TYPE__ns5__alert_info_resource:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _ns5__alert_info_resource type=%d location=%p object=%p\n", t, p, q));
		*(_ns5__alert_info_resource*)p = *(_ns5__alert_info_resource*)q;
		break;
	case SOAP_TYPE__ns5__alert_info_area_geocode:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _ns5__alert_info_area_geocode type=%d location=%p object=%p\n", t, p, q));
		*(_ns5__alert_info_area_geocode*)p = *(_ns5__alert_info_area_geocode*)q;
		break;
	case SOAP_TYPE__ns5__alert_info_area:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _ns5__alert_info_area type=%d location=%p object=%p\n", t, p, q));
		*(_ns5__alert_info_area*)p = *(_ns5__alert_info_area*)q;
		break;
	case SOAP_TYPE__ns5__alert_info:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _ns5__alert_info type=%d location=%p object=%p\n", t, p, q));
		*(_ns5__alert_info*)p = *(_ns5__alert_info*)q;
		break;
	case SOAP_TYPE__ns5__alert:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _ns5__alert type=%d location=%p object=%p\n", t, p, q));
		*(_ns5__alert*)p = *(_ns5__alert*)q;
		break;
	case SOAP_TYPE__ns2__postCAPRequestTypeDef:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _ns2__postCAPRequestTypeDef type=%d location=%p object=%p\n", t, p, q));
		*(_ns2__postCAPRequestTypeDef*)p = *(_ns2__postCAPRequestTypeDef*)q;
		break;
	case SOAP_TYPE__ns2__CAPServiceException:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _ns2__CAPServiceException type=%d location=%p object=%p\n", t, p, q));
		*(_ns2__CAPServiceException*)p = *(_ns2__CAPServiceException*)q;
		break;
	case SOAP_TYPE__ns2__postCAPResponseTypeDef:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _ns2__postCAPResponseTypeDef type=%d location=%p object=%p\n", t, p, q));
		*(_ns2__postCAPResponseTypeDef*)p = *(_ns2__postCAPResponseTypeDef*)q;
		break;
	case SOAP_TYPE__ns2__messageResponseTypeDef:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _ns2__messageResponseTypeDef type=%d location=%p object=%p\n", t, p, q));
		*(_ns2__messageResponseTypeDef*)p = *(_ns2__messageResponseTypeDef*)q;
		break;
	case SOAP_TYPE__ns2__CAPHeaderTypeDef:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _ns2__CAPHeaderTypeDef type=%d location=%p object=%p\n", t, p, q));
		*(_ns2__CAPHeaderTypeDef*)p = *(_ns2__CAPHeaderTypeDef*)q;
		break;
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Header:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct SOAP_ENV__Header type=%d location=%p object=%p\n", t, p, q));
		*(struct SOAP_ENV__Header*)p = *(struct SOAP_ENV__Header*)q;
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Detail:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct SOAP_ENV__Detail type=%d location=%p object=%p\n", t, p, q));
		*(struct SOAP_ENV__Detail*)p = *(struct SOAP_ENV__Detail*)q;
		break;
#endif
	case SOAP_TYPE___ns2__getRequest:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct __ns2__getRequest type=%d location=%p object=%p\n", t, p, q));
		*(struct __ns2__getRequest*)p = *(struct __ns2__getRequest*)q;
		break;
	case SOAP_TYPE___ns2__postCAP:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct __ns2__postCAP type=%d location=%p object=%p\n", t, p, q));
		*(struct __ns2__postCAP*)p = *(struct __ns2__postCAP*)q;
		break;
	case SOAP_TYPE___ns2__getMessage:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct __ns2__getMessage type=%d location=%p object=%p\n", t, p, q));
		*(struct __ns2__getMessage*)p = *(struct __ns2__getMessage*)q;
		break;
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Code:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct SOAP_ENV__Code type=%d location=%p object=%p\n", t, p, q));
		*(struct SOAP_ENV__Code*)p = *(struct SOAP_ENV__Code*)q;
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Reason:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct SOAP_ENV__Reason type=%d location=%p object=%p\n", t, p, q));
		*(struct SOAP_ENV__Reason*)p = *(struct SOAP_ENV__Reason*)q;
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Fault:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct SOAP_ENV__Fault type=%d location=%p object=%p\n", t, p, q));
		*(struct SOAP_ENV__Fault*)p = *(struct SOAP_ENV__Fault*)q;
		break;
#endif
	case SOAP_TYPE_xsd__anyURI:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy std::string type=%d location=%p object=%p\n", t, p, q));
		*(std::string*)p = *(std::string*)q;
		break;
	case SOAP_TYPE_xsd__decimal:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy std::string type=%d location=%p object=%p\n", t, p, q));
		*(std::string*)p = *(std::string*)q;
		break;
	case SOAP_TYPE_xsd__integer:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy std::string type=%d location=%p object=%p\n", t, p, q));
		*(std::string*)p = *(std::string*)q;
		break;
	case SOAP_TYPE_xsd__language:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy std::string type=%d location=%p object=%p\n", t, p, q));
		*(std::string*)p = *(std::string*)q;
		break;
	default:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Could not insert type=%d in %d\n", t, tt));
	}
}
#ifdef WIN32
#pragma warning(pop)
#endif
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_byte(struct soap *soap, const char *tag, int id, const char *a, const char *type)
{
	if (!type)
		type = "xsd:byte";
	return soap_outbyte(soap, tag, id, a, type, SOAP_TYPE_byte);
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_in_byte(struct soap *soap, const char *tag, char *a, const char *type)
{
	a = soap_inbyte(soap, tag, a, type, SOAP_TYPE_byte);
	return a;
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_new_byte(struct soap *soap, int n)
{
	char *a = static_cast<char *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(char)));
	for (char *p = a; p && n--; ++p)
		soap_default_byte(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_byte(struct soap *soap, const char *a, const char *tag, const char *type)
{
	if (soap_out_byte(soap, tag ? tag : "byte", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_get_byte(struct soap *soap, char *p, const char *tag, const char *type)
{
	if ((p = soap_in_byte(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_int(struct soap *soap, const char *tag, int id, const int *a, const char *type)
{
	if (!type)
		type = "xsd:int";
	return soap_outint(soap, tag, id, a, type, SOAP_TYPE_int);
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_in_int(struct soap *soap, const char *tag, int *a, const char *type)
{
	a = soap_inint(soap, tag, a, type, SOAP_TYPE_int);
	return a;
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_new_int(struct soap *soap, int n)
{
	int *a = static_cast<int *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(int)));
	for (int *p = a; p && n--; ++p)
		soap_default_int(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_int(struct soap *soap, const int *a, const char *tag, const char *type)
{
	if (soap_out_int(soap, tag ? tag : "int", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_get_int(struct soap *soap, int *p, const char *tag, const char *type)
{
	if ((p = soap_in_int(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_dateTime(struct soap *soap, const char *tag, int id, const time_t *a, const char *type)
{
	if (!type)
		type = "xsd:dateTime";
	return soap_outdateTime(soap, tag, id, a, type, SOAP_TYPE_dateTime);
}

SOAP_FMAC3 time_t * SOAP_FMAC4 soap_in_dateTime(struct soap *soap, const char *tag, time_t *a, const char *type)
{
	a = soap_indateTime(soap, tag, a, type, SOAP_TYPE_dateTime);
	return a;
}

SOAP_FMAC3 time_t * SOAP_FMAC4 soap_new_dateTime(struct soap *soap, int n)
{
	time_t *a = static_cast<time_t *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(time_t)));
	for (time_t *p = a; p && n--; ++p)
		soap_default_dateTime(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_dateTime(struct soap *soap, const time_t *a, const char *tag, const char *type)
{
	if (soap_out_dateTime(soap, tag ? tag : "dateTime", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 time_t * SOAP_FMAC4 soap_get_dateTime(struct soap *soap, time_t *p, const char *tag, const char *type)
{
	if ((p = soap_in_dateTime(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

static const struct soap_code_map soap_codes__ns5__alert_info_certainty[] =
{	{ (LONG64)_ns5__alert_info_certainty__Observed, "Observed" },
	{ (LONG64)_ns5__alert_info_certainty__Likely, "Likely" },
	{ (LONG64)_ns5__alert_info_certainty__Possible, "Possible" },
	{ (LONG64)_ns5__alert_info_certainty__Unlikely, "Unlikely" },
	{ (LONG64)_ns5__alert_info_certainty__Unknown, "Unknown" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap__ns5__alert_info_certainty2s(struct soap *soap, enum _ns5__alert_info_certainty n)
{
	const char *s = soap_code_str(soap_codes__ns5__alert_info_certainty, (long)n);
	if (s)
		return s;
	return soap_long2s(soap, (long)n);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns5__alert_info_certainty(struct soap *soap, const char *tag, int id, const enum _ns5__alert_info_certainty *a, const char *type)
{
	if (!type)
		type = "ns5:alert-info-certainty";
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns5__alert_info_certainty), type) || soap_send(soap, soap__ns5__alert_info_certainty2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2_ns5__alert_info_certainty(struct soap *soap, const char *s, enum _ns5__alert_info_certainty *a)
{
	const struct soap_code_map *map;
	if (!s)
		return soap->error;
	map = soap_code(soap_codes__ns5__alert_info_certainty, s);
	if (map)
		*a = (enum _ns5__alert_info_certainty)map->code;
	else if (!*s)
		return soap->error = SOAP_EMPTY;
	else
	{	int n;
		if (soap_s2int(soap, s, &n) || n < 0 || n > 4)
			return soap->error = SOAP_TYPE;
		*a = (enum _ns5__alert_info_certainty)n;
	}
	return SOAP_OK;
}

SOAP_FMAC3 enum _ns5__alert_info_certainty * SOAP_FMAC4 soap_in__ns5__alert_info_certainty(struct soap *soap, const char *tag, enum _ns5__alert_info_certainty *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (enum _ns5__alert_info_certainty*)soap_id_enter(soap, soap->id, a, SOAP_TYPE__ns5__alert_info_certainty, sizeof(enum _ns5__alert_info_certainty), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (*soap->href != '#')
	{	int err = soap_s2_ns5__alert_info_certainty(soap, soap_value(soap), a);
		if ((soap->body && soap_element_end_in(soap, tag)) || err)
			return NULL;
	}
	else
	{	a = (enum _ns5__alert_info_certainty *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns5__alert_info_certainty, SOAP_TYPE__ns5__alert_info_certainty, sizeof(enum _ns5__alert_info_certainty), 0, NULL, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 enum _ns5__alert_info_certainty * SOAP_FMAC4 soap_new__ns5__alert_info_certainty(struct soap *soap, int n)
{
	enum _ns5__alert_info_certainty *a = static_cast<enum _ns5__alert_info_certainty *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(enum _ns5__alert_info_certainty)));
	for (enum _ns5__alert_info_certainty *p = a; p && n--; ++p)
		soap_default__ns5__alert_info_certainty(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put__ns5__alert_info_certainty(struct soap *soap, const enum _ns5__alert_info_certainty *a, const char *tag, const char *type)
{
	if (soap_out__ns5__alert_info_certainty(soap, tag ? tag : "ns5:alert-info-certainty", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 enum _ns5__alert_info_certainty * SOAP_FMAC4 soap_get__ns5__alert_info_certainty(struct soap *soap, enum _ns5__alert_info_certainty *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns5__alert_info_certainty(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

static const struct soap_code_map soap_codes__ns5__alert_info_severity[] =
{	{ (LONG64)_ns5__alert_info_severity__Extreme, "Extreme" },
	{ (LONG64)_ns5__alert_info_severity__Severe, "Severe" },
	{ (LONG64)_ns5__alert_info_severity__Moderate, "Moderate" },
	{ (LONG64)_ns5__alert_info_severity__Minor, "Minor" },
	{ (LONG64)_ns5__alert_info_severity__Unknown, "Unknown" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap__ns5__alert_info_severity2s(struct soap *soap, enum _ns5__alert_info_severity n)
{
	const char *s = soap_code_str(soap_codes__ns5__alert_info_severity, (long)n);
	if (s)
		return s;
	return soap_long2s(soap, (long)n);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns5__alert_info_severity(struct soap *soap, const char *tag, int id, const enum _ns5__alert_info_severity *a, const char *type)
{
	if (!type)
		type = "ns5:alert-info-severity";
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns5__alert_info_severity), type) || soap_send(soap, soap__ns5__alert_info_severity2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2_ns5__alert_info_severity(struct soap *soap, const char *s, enum _ns5__alert_info_severity *a)
{
	const struct soap_code_map *map;
	if (!s)
		return soap->error;
	map = soap_code(soap_codes__ns5__alert_info_severity, s);
	if (map)
		*a = (enum _ns5__alert_info_severity)map->code;
	else if (!*s)
		return soap->error = SOAP_EMPTY;
	else
	{	int n;
		if (soap_s2int(soap, s, &n) || n < 0 || n > 4)
			return soap->error = SOAP_TYPE;
		*a = (enum _ns5__alert_info_severity)n;
	}
	return SOAP_OK;
}

SOAP_FMAC3 enum _ns5__alert_info_severity * SOAP_FMAC4 soap_in__ns5__alert_info_severity(struct soap *soap, const char *tag, enum _ns5__alert_info_severity *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (enum _ns5__alert_info_severity*)soap_id_enter(soap, soap->id, a, SOAP_TYPE__ns5__alert_info_severity, sizeof(enum _ns5__alert_info_severity), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (*soap->href != '#')
	{	int err = soap_s2_ns5__alert_info_severity(soap, soap_value(soap), a);
		if ((soap->body && soap_element_end_in(soap, tag)) || err)
			return NULL;
	}
	else
	{	a = (enum _ns5__alert_info_severity *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns5__alert_info_severity, SOAP_TYPE__ns5__alert_info_severity, sizeof(enum _ns5__alert_info_severity), 0, NULL, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 enum _ns5__alert_info_severity * SOAP_FMAC4 soap_new__ns5__alert_info_severity(struct soap *soap, int n)
{
	enum _ns5__alert_info_severity *a = static_cast<enum _ns5__alert_info_severity *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(enum _ns5__alert_info_severity)));
	for (enum _ns5__alert_info_severity *p = a; p && n--; ++p)
		soap_default__ns5__alert_info_severity(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put__ns5__alert_info_severity(struct soap *soap, const enum _ns5__alert_info_severity *a, const char *tag, const char *type)
{
	if (soap_out__ns5__alert_info_severity(soap, tag ? tag : "ns5:alert-info-severity", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 enum _ns5__alert_info_severity * SOAP_FMAC4 soap_get__ns5__alert_info_severity(struct soap *soap, enum _ns5__alert_info_severity *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns5__alert_info_severity(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

static const struct soap_code_map soap_codes__ns5__alert_info_urgency[] =
{	{ (LONG64)_ns5__alert_info_urgency__Immediate, "Immediate" },
	{ (LONG64)_ns5__alert_info_urgency__Expected, "Expected" },
	{ (LONG64)_ns5__alert_info_urgency__Future, "Future" },
	{ (LONG64)_ns5__alert_info_urgency__Past, "Past" },
	{ (LONG64)_ns5__alert_info_urgency__Unknown, "Unknown" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap__ns5__alert_info_urgency2s(struct soap *soap, enum _ns5__alert_info_urgency n)
{
	const char *s = soap_code_str(soap_codes__ns5__alert_info_urgency, (long)n);
	if (s)
		return s;
	return soap_long2s(soap, (long)n);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns5__alert_info_urgency(struct soap *soap, const char *tag, int id, const enum _ns5__alert_info_urgency *a, const char *type)
{
	if (!type)
		type = "ns5:alert-info-urgency";
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns5__alert_info_urgency), type) || soap_send(soap, soap__ns5__alert_info_urgency2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2_ns5__alert_info_urgency(struct soap *soap, const char *s, enum _ns5__alert_info_urgency *a)
{
	const struct soap_code_map *map;
	if (!s)
		return soap->error;
	map = soap_code(soap_codes__ns5__alert_info_urgency, s);
	if (map)
		*a = (enum _ns5__alert_info_urgency)map->code;
	else if (!*s)
		return soap->error = SOAP_EMPTY;
	else
	{	int n;
		if (soap_s2int(soap, s, &n) || n < 0 || n > 4)
			return soap->error = SOAP_TYPE;
		*a = (enum _ns5__alert_info_urgency)n;
	}
	return SOAP_OK;
}

SOAP_FMAC3 enum _ns5__alert_info_urgency * SOAP_FMAC4 soap_in__ns5__alert_info_urgency(struct soap *soap, const char *tag, enum _ns5__alert_info_urgency *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (enum _ns5__alert_info_urgency*)soap_id_enter(soap, soap->id, a, SOAP_TYPE__ns5__alert_info_urgency, sizeof(enum _ns5__alert_info_urgency), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (*soap->href != '#')
	{	int err = soap_s2_ns5__alert_info_urgency(soap, soap_value(soap), a);
		if ((soap->body && soap_element_end_in(soap, tag)) || err)
			return NULL;
	}
	else
	{	a = (enum _ns5__alert_info_urgency *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns5__alert_info_urgency, SOAP_TYPE__ns5__alert_info_urgency, sizeof(enum _ns5__alert_info_urgency), 0, NULL, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 enum _ns5__alert_info_urgency * SOAP_FMAC4 soap_new__ns5__alert_info_urgency(struct soap *soap, int n)
{
	enum _ns5__alert_info_urgency *a = static_cast<enum _ns5__alert_info_urgency *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(enum _ns5__alert_info_urgency)));
	for (enum _ns5__alert_info_urgency *p = a; p && n--; ++p)
		soap_default__ns5__alert_info_urgency(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put__ns5__alert_info_urgency(struct soap *soap, const enum _ns5__alert_info_urgency *a, const char *tag, const char *type)
{
	if (soap_out__ns5__alert_info_urgency(soap, tag ? tag : "ns5:alert-info-urgency", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 enum _ns5__alert_info_urgency * SOAP_FMAC4 soap_get__ns5__alert_info_urgency(struct soap *soap, enum _ns5__alert_info_urgency *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns5__alert_info_urgency(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

static const struct soap_code_map soap_codes__ns5__alert_info_responseType[] =
{	{ (LONG64)_ns5__alert_info_responseType__Shelter, "Shelter" },
	{ (LONG64)_ns5__alert_info_responseType__Evacuate, "Evacuate" },
	{ (LONG64)_ns5__alert_info_responseType__Prepare, "Prepare" },
	{ (LONG64)_ns5__alert_info_responseType__Execute, "Execute" },
	{ (LONG64)_ns5__alert_info_responseType__Avoid, "Avoid" },
	{ (LONG64)_ns5__alert_info_responseType__Monitor, "Monitor" },
	{ (LONG64)_ns5__alert_info_responseType__Assess, "Assess" },
	{ (LONG64)_ns5__alert_info_responseType__AllClear, "AllClear" },
	{ (LONG64)_ns5__alert_info_responseType__None, "None" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap__ns5__alert_info_responseType2s(struct soap *soap, enum _ns5__alert_info_responseType n)
{
	const char *s = soap_code_str(soap_codes__ns5__alert_info_responseType, (long)n);
	if (s)
		return s;
	return soap_long2s(soap, (long)n);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns5__alert_info_responseType(struct soap *soap, const char *tag, int id, const enum _ns5__alert_info_responseType *a, const char *type)
{
	if (!type)
		type = "ns5:alert-info-responseType";
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns5__alert_info_responseType), type) || soap_send(soap, soap__ns5__alert_info_responseType2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2_ns5__alert_info_responseType(struct soap *soap, const char *s, enum _ns5__alert_info_responseType *a)
{
	const struct soap_code_map *map;
	if (!s)
		return soap->error;
	map = soap_code(soap_codes__ns5__alert_info_responseType, s);
	if (map)
		*a = (enum _ns5__alert_info_responseType)map->code;
	else if (!*s)
		return soap->error = SOAP_EMPTY;
	else
	{	int n;
		if (soap_s2int(soap, s, &n) || n < 0 || n > 8)
			return soap->error = SOAP_TYPE;
		*a = (enum _ns5__alert_info_responseType)n;
	}
	return SOAP_OK;
}

SOAP_FMAC3 enum _ns5__alert_info_responseType * SOAP_FMAC4 soap_in__ns5__alert_info_responseType(struct soap *soap, const char *tag, enum _ns5__alert_info_responseType *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (enum _ns5__alert_info_responseType*)soap_id_enter(soap, soap->id, a, SOAP_TYPE__ns5__alert_info_responseType, sizeof(enum _ns5__alert_info_responseType), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (*soap->href != '#')
	{	int err = soap_s2_ns5__alert_info_responseType(soap, soap_value(soap), a);
		if ((soap->body && soap_element_end_in(soap, tag)) || err)
			return NULL;
	}
	else
	{	a = (enum _ns5__alert_info_responseType *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns5__alert_info_responseType, SOAP_TYPE__ns5__alert_info_responseType, sizeof(enum _ns5__alert_info_responseType), 0, NULL, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 enum _ns5__alert_info_responseType * SOAP_FMAC4 soap_new__ns5__alert_info_responseType(struct soap *soap, int n)
{
	enum _ns5__alert_info_responseType *a = static_cast<enum _ns5__alert_info_responseType *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(enum _ns5__alert_info_responseType)));
	for (enum _ns5__alert_info_responseType *p = a; p && n--; ++p)
		soap_default__ns5__alert_info_responseType(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put__ns5__alert_info_responseType(struct soap *soap, const enum _ns5__alert_info_responseType *a, const char *tag, const char *type)
{
	if (soap_out__ns5__alert_info_responseType(soap, tag ? tag : "ns5:alert-info-responseType", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 enum _ns5__alert_info_responseType * SOAP_FMAC4 soap_get__ns5__alert_info_responseType(struct soap *soap, enum _ns5__alert_info_responseType *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns5__alert_info_responseType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

static const struct soap_code_map soap_codes__ns5__alert_info_category[] =
{	{ (LONG64)_ns5__alert_info_category__Geo, "Geo" },
	{ (LONG64)_ns5__alert_info_category__Met, "Met" },
	{ (LONG64)_ns5__alert_info_category__Safety, "Safety" },
	{ (LONG64)_ns5__alert_info_category__Security, "Security" },
	{ (LONG64)_ns5__alert_info_category__Rescue, "Rescue" },
	{ (LONG64)_ns5__alert_info_category__Fire, "Fire" },
	{ (LONG64)_ns5__alert_info_category__Health, "Health" },
	{ (LONG64)_ns5__alert_info_category__Env, "Env" },
	{ (LONG64)_ns5__alert_info_category__Transport, "Transport" },
	{ (LONG64)_ns5__alert_info_category__Infra, "Infra" },
	{ (LONG64)_ns5__alert_info_category__CBRNE, "CBRNE" },
	{ (LONG64)_ns5__alert_info_category__Other, "Other" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap__ns5__alert_info_category2s(struct soap *soap, enum _ns5__alert_info_category n)
{
	const char *s = soap_code_str(soap_codes__ns5__alert_info_category, (long)n);
	if (s)
		return s;
	return soap_long2s(soap, (long)n);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns5__alert_info_category(struct soap *soap, const char *tag, int id, const enum _ns5__alert_info_category *a, const char *type)
{
	if (!type)
		type = "ns5:alert-info-category";
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns5__alert_info_category), type) || soap_send(soap, soap__ns5__alert_info_category2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2_ns5__alert_info_category(struct soap *soap, const char *s, enum _ns5__alert_info_category *a)
{
	const struct soap_code_map *map;
	if (!s)
		return soap->error;
	map = soap_code(soap_codes__ns5__alert_info_category, s);
	if (map)
		*a = (enum _ns5__alert_info_category)map->code;
	else if (!*s)
		return soap->error = SOAP_EMPTY;
	else
	{	int n;
		if (soap_s2int(soap, s, &n) || n < 0 || n > 11)
			return soap->error = SOAP_TYPE;
		*a = (enum _ns5__alert_info_category)n;
	}
	return SOAP_OK;
}

SOAP_FMAC3 enum _ns5__alert_info_category * SOAP_FMAC4 soap_in__ns5__alert_info_category(struct soap *soap, const char *tag, enum _ns5__alert_info_category *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (enum _ns5__alert_info_category*)soap_id_enter(soap, soap->id, a, SOAP_TYPE__ns5__alert_info_category, sizeof(enum _ns5__alert_info_category), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (*soap->href != '#')
	{	int err = soap_s2_ns5__alert_info_category(soap, soap_value(soap), a);
		if ((soap->body && soap_element_end_in(soap, tag)) || err)
			return NULL;
	}
	else
	{	a = (enum _ns5__alert_info_category *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns5__alert_info_category, SOAP_TYPE__ns5__alert_info_category, sizeof(enum _ns5__alert_info_category), 0, NULL, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 enum _ns5__alert_info_category * SOAP_FMAC4 soap_new__ns5__alert_info_category(struct soap *soap, int n)
{
	enum _ns5__alert_info_category *a = static_cast<enum _ns5__alert_info_category *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(enum _ns5__alert_info_category)));
	for (enum _ns5__alert_info_category *p = a; p && n--; ++p)
		soap_default__ns5__alert_info_category(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put__ns5__alert_info_category(struct soap *soap, const enum _ns5__alert_info_category *a, const char *tag, const char *type)
{
	if (soap_out__ns5__alert_info_category(soap, tag ? tag : "ns5:alert-info-category", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 enum _ns5__alert_info_category * SOAP_FMAC4 soap_get__ns5__alert_info_category(struct soap *soap, enum _ns5__alert_info_category *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns5__alert_info_category(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

static const struct soap_code_map soap_codes__ns5__alert_scope[] =
{	{ (LONG64)_ns5__alert_scope__Public, "Public" },
	{ (LONG64)_ns5__alert_scope__Restricted, "Restricted" },
	{ (LONG64)_ns5__alert_scope__Private, "Private" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap__ns5__alert_scope2s(struct soap *soap, enum _ns5__alert_scope n)
{
	const char *s = soap_code_str(soap_codes__ns5__alert_scope, (long)n);
	if (s)
		return s;
	return soap_long2s(soap, (long)n);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns5__alert_scope(struct soap *soap, const char *tag, int id, const enum _ns5__alert_scope *a, const char *type)
{
	if (!type)
		type = "ns5:alert-scope";
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns5__alert_scope), type) || soap_send(soap, soap__ns5__alert_scope2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2_ns5__alert_scope(struct soap *soap, const char *s, enum _ns5__alert_scope *a)
{
	const struct soap_code_map *map;
	if (!s)
		return soap->error;
	map = soap_code(soap_codes__ns5__alert_scope, s);
	if (map)
		*a = (enum _ns5__alert_scope)map->code;
	else if (!*s)
		return soap->error = SOAP_EMPTY;
	else
	{	int n;
		if (soap_s2int(soap, s, &n) || n < 0 || n > 2)
			return soap->error = SOAP_TYPE;
		*a = (enum _ns5__alert_scope)n;
	}
	return SOAP_OK;
}

SOAP_FMAC3 enum _ns5__alert_scope * SOAP_FMAC4 soap_in__ns5__alert_scope(struct soap *soap, const char *tag, enum _ns5__alert_scope *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (enum _ns5__alert_scope*)soap_id_enter(soap, soap->id, a, SOAP_TYPE__ns5__alert_scope, sizeof(enum _ns5__alert_scope), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (*soap->href != '#')
	{	int err = soap_s2_ns5__alert_scope(soap, soap_value(soap), a);
		if ((soap->body && soap_element_end_in(soap, tag)) || err)
			return NULL;
	}
	else
	{	a = (enum _ns5__alert_scope *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns5__alert_scope, SOAP_TYPE__ns5__alert_scope, sizeof(enum _ns5__alert_scope), 0, NULL, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 enum _ns5__alert_scope * SOAP_FMAC4 soap_new__ns5__alert_scope(struct soap *soap, int n)
{
	enum _ns5__alert_scope *a = static_cast<enum _ns5__alert_scope *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(enum _ns5__alert_scope)));
	for (enum _ns5__alert_scope *p = a; p && n--; ++p)
		soap_default__ns5__alert_scope(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put__ns5__alert_scope(struct soap *soap, const enum _ns5__alert_scope *a, const char *tag, const char *type)
{
	if (soap_out__ns5__alert_scope(soap, tag ? tag : "ns5:alert-scope", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 enum _ns5__alert_scope * SOAP_FMAC4 soap_get__ns5__alert_scope(struct soap *soap, enum _ns5__alert_scope *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns5__alert_scope(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

static const struct soap_code_map soap_codes__ns5__alert_msgType[] =
{	{ (LONG64)_ns5__alert_msgType__Alert, "Alert" },
	{ (LONG64)_ns5__alert_msgType__Update, "Update" },
	{ (LONG64)_ns5__alert_msgType__Cancel, "Cancel" },
	{ (LONG64)_ns5__alert_msgType__Ack, "Ack" },
	{ (LONG64)_ns5__alert_msgType__Error, "Error" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap__ns5__alert_msgType2s(struct soap *soap, enum _ns5__alert_msgType n)
{
	const char *s = soap_code_str(soap_codes__ns5__alert_msgType, (long)n);
	if (s)
		return s;
	return soap_long2s(soap, (long)n);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns5__alert_msgType(struct soap *soap, const char *tag, int id, const enum _ns5__alert_msgType *a, const char *type)
{
	if (!type)
		type = "ns5:alert-msgType";
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns5__alert_msgType), type) || soap_send(soap, soap__ns5__alert_msgType2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2_ns5__alert_msgType(struct soap *soap, const char *s, enum _ns5__alert_msgType *a)
{
	const struct soap_code_map *map;
	if (!s)
		return soap->error;
	map = soap_code(soap_codes__ns5__alert_msgType, s);
	if (map)
		*a = (enum _ns5__alert_msgType)map->code;
	else if (!*s)
		return soap->error = SOAP_EMPTY;
	else
	{	int n;
		if (soap_s2int(soap, s, &n) || n < 0 || n > 4)
			return soap->error = SOAP_TYPE;
		*a = (enum _ns5__alert_msgType)n;
	}
	return SOAP_OK;
}

SOAP_FMAC3 enum _ns5__alert_msgType * SOAP_FMAC4 soap_in__ns5__alert_msgType(struct soap *soap, const char *tag, enum _ns5__alert_msgType *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (enum _ns5__alert_msgType*)soap_id_enter(soap, soap->id, a, SOAP_TYPE__ns5__alert_msgType, sizeof(enum _ns5__alert_msgType), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (*soap->href != '#')
	{	int err = soap_s2_ns5__alert_msgType(soap, soap_value(soap), a);
		if ((soap->body && soap_element_end_in(soap, tag)) || err)
			return NULL;
	}
	else
	{	a = (enum _ns5__alert_msgType *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns5__alert_msgType, SOAP_TYPE__ns5__alert_msgType, sizeof(enum _ns5__alert_msgType), 0, NULL, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 enum _ns5__alert_msgType * SOAP_FMAC4 soap_new__ns5__alert_msgType(struct soap *soap, int n)
{
	enum _ns5__alert_msgType *a = static_cast<enum _ns5__alert_msgType *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(enum _ns5__alert_msgType)));
	for (enum _ns5__alert_msgType *p = a; p && n--; ++p)
		soap_default__ns5__alert_msgType(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put__ns5__alert_msgType(struct soap *soap, const enum _ns5__alert_msgType *a, const char *tag, const char *type)
{
	if (soap_out__ns5__alert_msgType(soap, tag ? tag : "ns5:alert-msgType", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 enum _ns5__alert_msgType * SOAP_FMAC4 soap_get__ns5__alert_msgType(struct soap *soap, enum _ns5__alert_msgType *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns5__alert_msgType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

static const struct soap_code_map soap_codes__ns5__alert_status[] =
{	{ (LONG64)_ns5__alert_status__Actual, "Actual" },
	{ (LONG64)_ns5__alert_status__Exercise, "Exercise" },
	{ (LONG64)_ns5__alert_status__System, "System" },
	{ (LONG64)_ns5__alert_status__Test, "Test" },
	{ (LONG64)_ns5__alert_status__Draft, "Draft" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap__ns5__alert_status2s(struct soap *soap, enum _ns5__alert_status n)
{
	const char *s = soap_code_str(soap_codes__ns5__alert_status, (long)n);
	if (s)
		return s;
	return soap_long2s(soap, (long)n);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns5__alert_status(struct soap *soap, const char *tag, int id, const enum _ns5__alert_status *a, const char *type)
{
	if (!type)
		type = "ns5:alert-status";
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns5__alert_status), type) || soap_send(soap, soap__ns5__alert_status2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2_ns5__alert_status(struct soap *soap, const char *s, enum _ns5__alert_status *a)
{
	const struct soap_code_map *map;
	if (!s)
		return soap->error;
	map = soap_code(soap_codes__ns5__alert_status, s);
	if (map)
		*a = (enum _ns5__alert_status)map->code;
	else if (!*s)
		return soap->error = SOAP_EMPTY;
	else
	{	int n;
		if (soap_s2int(soap, s, &n) || n < 0 || n > 4)
			return soap->error = SOAP_TYPE;
		*a = (enum _ns5__alert_status)n;
	}
	return SOAP_OK;
}

SOAP_FMAC3 enum _ns5__alert_status * SOAP_FMAC4 soap_in__ns5__alert_status(struct soap *soap, const char *tag, enum _ns5__alert_status *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (enum _ns5__alert_status*)soap_id_enter(soap, soap->id, a, SOAP_TYPE__ns5__alert_status, sizeof(enum _ns5__alert_status), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (*soap->href != '#')
	{	int err = soap_s2_ns5__alert_status(soap, soap_value(soap), a);
		if ((soap->body && soap_element_end_in(soap, tag)) || err)
			return NULL;
	}
	else
	{	a = (enum _ns5__alert_status *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns5__alert_status, SOAP_TYPE__ns5__alert_status, sizeof(enum _ns5__alert_status), 0, NULL, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 enum _ns5__alert_status * SOAP_FMAC4 soap_new__ns5__alert_status(struct soap *soap, int n)
{
	enum _ns5__alert_status *a = static_cast<enum _ns5__alert_status *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(enum _ns5__alert_status)));
	for (enum _ns5__alert_status *p = a; p && n--; ++p)
		soap_default__ns5__alert_status(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put__ns5__alert_status(struct soap *soap, const enum _ns5__alert_status *a, const char *tag, const char *type)
{
	if (soap_out__ns5__alert_status(soap, tag ? tag : "ns5:alert-status", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 enum _ns5__alert_status * SOAP_FMAC4 soap_get__ns5__alert_status(struct soap *soap, enum _ns5__alert_status *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns5__alert_status(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void _ns5__alert_info_area_geocode::soap_default(struct soap *soap)
{
	(void)soap; /* appease -Wall -Werror */
	soap_default_std__string(soap, &this->_ns5__alert_info_area_geocode::valueName);
	soap_default_std__string(soap, &this->_ns5__alert_info_area_geocode::value);
}

void _ns5__alert_info_area_geocode::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_embedded(soap, &this->_ns5__alert_info_area_geocode::valueName, SOAP_TYPE_std__string);
	soap_serialize_std__string(soap, &this->_ns5__alert_info_area_geocode::valueName);
	soap_embedded(soap, &this->_ns5__alert_info_area_geocode::value, SOAP_TYPE_std__string);
	soap_serialize_std__string(soap, &this->_ns5__alert_info_area_geocode::value);
#endif
}

int _ns5__alert_info_area_geocode::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns5__alert_info_area_geocode(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns5__alert_info_area_geocode(struct soap *soap, const char *tag, int id, const _ns5__alert_info_area_geocode *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns5__alert_info_area_geocode), type))
		return soap->error;
	if (soap_out_std__string(soap, "ns5:valueName", -1, &a->_ns5__alert_info_area_geocode::valueName, "xsd:string"))
		return soap->error;
	if (soap_out_std__string(soap, "ns5:value", -1, &a->_ns5__alert_info_area_geocode::value, "xsd:string"))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *_ns5__alert_info_area_geocode::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in__ns5__alert_info_area_geocode(soap, tag, this, type);
}

SOAP_FMAC3 _ns5__alert_info_area_geocode * SOAP_FMAC4 soap_in__ns5__alert_info_area_geocode(struct soap *soap, const char *tag, _ns5__alert_info_area_geocode *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns5__alert_info_area_geocode*)soap_id_enter(soap, soap->id, a, SOAP_TYPE__ns5__alert_info_area_geocode, sizeof(_ns5__alert_info_area_geocode), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE__ns5__alert_info_area_geocode)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (_ns5__alert_info_area_geocode *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag_valueName1 = 1;
	size_t soap_flag_value1 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_valueName1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_std__string(soap, "ns5:valueName", &a->_ns5__alert_info_area_geocode::valueName, "xsd:string"))
				{	soap_flag_valueName1--;
					continue;
				}
			}
			if (soap_flag_value1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_std__string(soap, "ns5:value", &a->_ns5__alert_info_area_geocode::value, "xsd:string"))
				{	soap_flag_value1--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_valueName1 > 0 || soap_flag_value1 > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && *soap->href != '#')
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (_ns5__alert_info_area_geocode *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns5__alert_info_area_geocode, SOAP_TYPE__ns5__alert_info_area_geocode, sizeof(_ns5__alert_info_area_geocode), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 _ns5__alert_info_area_geocode * SOAP_FMAC2 soap_instantiate__ns5__alert_info_area_geocode(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns5__alert_info_area_geocode(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	_ns5__alert_info_area_geocode *p;
	size_t k = sizeof(_ns5__alert_info_area_geocode);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE__ns5__alert_info_area_geocode, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, _ns5__alert_info_area_geocode);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, _ns5__alert_info_area_geocode, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated _ns5__alert_info_area_geocode location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int _ns5__alert_info_area_geocode::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out__ns5__alert_info_area_geocode(soap, tag ? tag : "ns5:alert-info-area-geocode", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns5__alert_info_area_geocode::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns5__alert_info_area_geocode(soap, this, tag, type);
}

SOAP_FMAC3 _ns5__alert_info_area_geocode * SOAP_FMAC4 soap_get__ns5__alert_info_area_geocode(struct soap *soap, _ns5__alert_info_area_geocode *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns5__alert_info_area_geocode(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void _ns5__alert_info_area::soap_default(struct soap *soap)
{
	(void)soap; /* appease -Wall -Werror */
	soap_default_std__string(soap, &this->_ns5__alert_info_area::areaDesc);
	soap_default_std__vectorTemplateOfstd__string(soap, &this->_ns5__alert_info_area::polygon);
	soap_default_std__vectorTemplateOfstd__string(soap, &this->_ns5__alert_info_area::circle);
	soap_default_std__vectorTemplateOf_ns5__alert_info_area_geocode(soap, &this->_ns5__alert_info_area::geocode);
	this->_ns5__alert_info_area::altitude = NULL;
	this->_ns5__alert_info_area::ceiling = NULL;
}

void _ns5__alert_info_area::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_embedded(soap, &this->_ns5__alert_info_area::areaDesc, SOAP_TYPE_std__string);
	soap_serialize_std__string(soap, &this->_ns5__alert_info_area::areaDesc);
	soap_serialize_std__vectorTemplateOfstd__string(soap, &this->_ns5__alert_info_area::polygon);
	soap_serialize_std__vectorTemplateOfstd__string(soap, &this->_ns5__alert_info_area::circle);
	soap_serialize_std__vectorTemplateOf_ns5__alert_info_area_geocode(soap, &this->_ns5__alert_info_area::geocode);
	soap_serialize_PointerToxsd__decimal(soap, &this->_ns5__alert_info_area::altitude);
	soap_serialize_PointerToxsd__decimal(soap, &this->_ns5__alert_info_area::ceiling);
#endif
}

int _ns5__alert_info_area::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns5__alert_info_area(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns5__alert_info_area(struct soap *soap, const char *tag, int id, const _ns5__alert_info_area *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns5__alert_info_area), type))
		return soap->error;
	if (soap_out_std__string(soap, "ns5:areaDesc", -1, &a->_ns5__alert_info_area::areaDesc, "xsd:string"))
		return soap->error;
	if (soap_out_std__vectorTemplateOfstd__string(soap, "ns5:polygon", -1, &a->_ns5__alert_info_area::polygon, "xsd:string"))
		return soap->error;
	if (soap_out_std__vectorTemplateOfstd__string(soap, "ns5:circle", -1, &a->_ns5__alert_info_area::circle, "xsd:string"))
		return soap->error;
	if (soap_out_std__vectorTemplateOf_ns5__alert_info_area_geocode(soap, "ns5:geocode", -1, &a->_ns5__alert_info_area::geocode, ""))
		return soap->error;
	if (soap_out_PointerToxsd__decimal(soap, "ns5:altitude", -1, &a->_ns5__alert_info_area::altitude, "xsd:decimal"))
		return soap->error;
	if (soap_out_PointerToxsd__decimal(soap, "ns5:ceiling", -1, &a->_ns5__alert_info_area::ceiling, "xsd:decimal"))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *_ns5__alert_info_area::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in__ns5__alert_info_area(soap, tag, this, type);
}

SOAP_FMAC3 _ns5__alert_info_area * SOAP_FMAC4 soap_in__ns5__alert_info_area(struct soap *soap, const char *tag, _ns5__alert_info_area *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns5__alert_info_area*)soap_id_enter(soap, soap->id, a, SOAP_TYPE__ns5__alert_info_area, sizeof(_ns5__alert_info_area), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE__ns5__alert_info_area)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (_ns5__alert_info_area *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag_areaDesc1 = 1;
	size_t soap_flag_altitude1 = 1;
	size_t soap_flag_ceiling1 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_areaDesc1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_std__string(soap, "ns5:areaDesc", &a->_ns5__alert_info_area::areaDesc, "xsd:string"))
				{	soap_flag_areaDesc1--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_std__vectorTemplateOfstd__string(soap, "ns5:polygon", &a->_ns5__alert_info_area::polygon, "xsd:string"))
					continue;
			}
			if (soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_std__vectorTemplateOfstd__string(soap, "ns5:circle", &a->_ns5__alert_info_area::circle, "xsd:string"))
					continue;
			}
			if (soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_std__vectorTemplateOf_ns5__alert_info_area_geocode(soap, "ns5:geocode", &a->_ns5__alert_info_area::geocode, ""))
					continue;
			}
			if (soap_flag_altitude1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_PointerToxsd__decimal(soap, "ns5:altitude", &a->_ns5__alert_info_area::altitude, "xsd:decimal"))
				{	soap_flag_altitude1--;
					continue;
				}
			}
			if (soap_flag_ceiling1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_PointerToxsd__decimal(soap, "ns5:ceiling", &a->_ns5__alert_info_area::ceiling, "xsd:decimal"))
				{	soap_flag_ceiling1--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_areaDesc1 > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && *soap->href != '#')
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (_ns5__alert_info_area *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns5__alert_info_area, SOAP_TYPE__ns5__alert_info_area, sizeof(_ns5__alert_info_area), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 _ns5__alert_info_area * SOAP_FMAC2 soap_instantiate__ns5__alert_info_area(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns5__alert_info_area(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	_ns5__alert_info_area *p;
	size_t k = sizeof(_ns5__alert_info_area);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE__ns5__alert_info_area, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, _ns5__alert_info_area);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, _ns5__alert_info_area, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated _ns5__alert_info_area location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int _ns5__alert_info_area::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out__ns5__alert_info_area(soap, tag ? tag : "ns5:alert-info-area", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns5__alert_info_area::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns5__alert_info_area(soap, this, tag, type);
}

SOAP_FMAC3 _ns5__alert_info_area * SOAP_FMAC4 soap_get__ns5__alert_info_area(struct soap *soap, _ns5__alert_info_area *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns5__alert_info_area(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void _ns5__alert_info_resource::soap_default(struct soap *soap)
{
	(void)soap; /* appease -Wall -Werror */
	soap_default_std__string(soap, &this->_ns5__alert_info_resource::resourceDesc);
	soap_default_std__string(soap, &this->_ns5__alert_info_resource::mimeType);
	this->_ns5__alert_info_resource::size = NULL;
	this->_ns5__alert_info_resource::uri = NULL;
	this->_ns5__alert_info_resource::derefUri = NULL;
	this->_ns5__alert_info_resource::digest = NULL;
}

void _ns5__alert_info_resource::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_embedded(soap, &this->_ns5__alert_info_resource::resourceDesc, SOAP_TYPE_std__string);
	soap_serialize_std__string(soap, &this->_ns5__alert_info_resource::resourceDesc);
	soap_embedded(soap, &this->_ns5__alert_info_resource::mimeType, SOAP_TYPE_std__string);
	soap_serialize_std__string(soap, &this->_ns5__alert_info_resource::mimeType);
	soap_serialize_PointerToxsd__integer(soap, &this->_ns5__alert_info_resource::size);
	soap_serialize_PointerToxsd__anyURI(soap, &this->_ns5__alert_info_resource::uri);
	soap_serialize_PointerTostd__string(soap, &this->_ns5__alert_info_resource::derefUri);
	soap_serialize_PointerTostd__string(soap, &this->_ns5__alert_info_resource::digest);
#endif
}

int _ns5__alert_info_resource::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns5__alert_info_resource(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns5__alert_info_resource(struct soap *soap, const char *tag, int id, const _ns5__alert_info_resource *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns5__alert_info_resource), type))
		return soap->error;
	if (soap_out_std__string(soap, "ns5:resourceDesc", -1, &a->_ns5__alert_info_resource::resourceDesc, "xsd:string"))
		return soap->error;
	if (soap_out_std__string(soap, "ns5:mimeType", -1, &a->_ns5__alert_info_resource::mimeType, "xsd:string"))
		return soap->error;
	if (soap_out_PointerToxsd__integer(soap, "ns5:size", -1, &a->_ns5__alert_info_resource::size, "xsd:integer"))
		return soap->error;
	if (soap_out_PointerToxsd__anyURI(soap, "ns5:uri", -1, &a->_ns5__alert_info_resource::uri, "xsd:anyURI"))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns5:derefUri", -1, &a->_ns5__alert_info_resource::derefUri, "xsd:string"))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns5:digest", -1, &a->_ns5__alert_info_resource::digest, "xsd:string"))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *_ns5__alert_info_resource::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in__ns5__alert_info_resource(soap, tag, this, type);
}

SOAP_FMAC3 _ns5__alert_info_resource * SOAP_FMAC4 soap_in__ns5__alert_info_resource(struct soap *soap, const char *tag, _ns5__alert_info_resource *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns5__alert_info_resource*)soap_id_enter(soap, soap->id, a, SOAP_TYPE__ns5__alert_info_resource, sizeof(_ns5__alert_info_resource), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE__ns5__alert_info_resource)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (_ns5__alert_info_resource *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag_resourceDesc1 = 1;
	size_t soap_flag_mimeType1 = 1;
	size_t soap_flag_size1 = 1;
	size_t soap_flag_uri1 = 1;
	size_t soap_flag_derefUri1 = 1;
	size_t soap_flag_digest1 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_resourceDesc1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_std__string(soap, "ns5:resourceDesc", &a->_ns5__alert_info_resource::resourceDesc, "xsd:string"))
				{	soap_flag_resourceDesc1--;
					continue;
				}
			}
			if (soap_flag_mimeType1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_std__string(soap, "ns5:mimeType", &a->_ns5__alert_info_resource::mimeType, "xsd:string"))
				{	soap_flag_mimeType1--;
					continue;
				}
			}
			if (soap_flag_size1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_PointerToxsd__integer(soap, "ns5:size", &a->_ns5__alert_info_resource::size, "xsd:integer"))
				{	soap_flag_size1--;
					continue;
				}
			}
			if (soap_flag_uri1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_PointerToxsd__anyURI(soap, "ns5:uri", &a->_ns5__alert_info_resource::uri, "xsd:anyURI"))
				{	soap_flag_uri1--;
					continue;
				}
			}
			if (soap_flag_derefUri1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_PointerTostd__string(soap, "ns5:derefUri", &a->_ns5__alert_info_resource::derefUri, "xsd:string"))
				{	soap_flag_derefUri1--;
					continue;
				}
			}
			if (soap_flag_digest1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_PointerTostd__string(soap, "ns5:digest", &a->_ns5__alert_info_resource::digest, "xsd:string"))
				{	soap_flag_digest1--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_resourceDesc1 > 0 || soap_flag_mimeType1 > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && *soap->href != '#')
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (_ns5__alert_info_resource *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns5__alert_info_resource, SOAP_TYPE__ns5__alert_info_resource, sizeof(_ns5__alert_info_resource), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 _ns5__alert_info_resource * SOAP_FMAC2 soap_instantiate__ns5__alert_info_resource(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns5__alert_info_resource(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	_ns5__alert_info_resource *p;
	size_t k = sizeof(_ns5__alert_info_resource);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE__ns5__alert_info_resource, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, _ns5__alert_info_resource);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, _ns5__alert_info_resource, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated _ns5__alert_info_resource location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int _ns5__alert_info_resource::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out__ns5__alert_info_resource(soap, tag ? tag : "ns5:alert-info-resource", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns5__alert_info_resource::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns5__alert_info_resource(soap, this, tag, type);
}

SOAP_FMAC3 _ns5__alert_info_resource * SOAP_FMAC4 soap_get__ns5__alert_info_resource(struct soap *soap, _ns5__alert_info_resource *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns5__alert_info_resource(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void _ns5__alert_info_parameter::soap_default(struct soap *soap)
{
	(void)soap; /* appease -Wall -Werror */
	soap_default_std__string(soap, &this->_ns5__alert_info_parameter::valueName);
	soap_default_std__string(soap, &this->_ns5__alert_info_parameter::value);
}

void _ns5__alert_info_parameter::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_embedded(soap, &this->_ns5__alert_info_parameter::valueName, SOAP_TYPE_std__string);
	soap_serialize_std__string(soap, &this->_ns5__alert_info_parameter::valueName);
	soap_embedded(soap, &this->_ns5__alert_info_parameter::value, SOAP_TYPE_std__string);
	soap_serialize_std__string(soap, &this->_ns5__alert_info_parameter::value);
#endif
}

int _ns5__alert_info_parameter::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns5__alert_info_parameter(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns5__alert_info_parameter(struct soap *soap, const char *tag, int id, const _ns5__alert_info_parameter *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns5__alert_info_parameter), type))
		return soap->error;
	if (soap_out_std__string(soap, "ns5:valueName", -1, &a->_ns5__alert_info_parameter::valueName, "xsd:string"))
		return soap->error;
	if (soap_out_std__string(soap, "ns5:value", -1, &a->_ns5__alert_info_parameter::value, "xsd:string"))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *_ns5__alert_info_parameter::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in__ns5__alert_info_parameter(soap, tag, this, type);
}

SOAP_FMAC3 _ns5__alert_info_parameter * SOAP_FMAC4 soap_in__ns5__alert_info_parameter(struct soap *soap, const char *tag, _ns5__alert_info_parameter *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns5__alert_info_parameter*)soap_id_enter(soap, soap->id, a, SOAP_TYPE__ns5__alert_info_parameter, sizeof(_ns5__alert_info_parameter), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE__ns5__alert_info_parameter)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (_ns5__alert_info_parameter *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag_valueName1 = 1;
	size_t soap_flag_value1 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_valueName1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_std__string(soap, "ns5:valueName", &a->_ns5__alert_info_parameter::valueName, "xsd:string"))
				{	soap_flag_valueName1--;
					continue;
				}
			}
			if (soap_flag_value1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_std__string(soap, "ns5:value", &a->_ns5__alert_info_parameter::value, "xsd:string"))
				{	soap_flag_value1--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_valueName1 > 0 || soap_flag_value1 > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && *soap->href != '#')
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (_ns5__alert_info_parameter *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns5__alert_info_parameter, SOAP_TYPE__ns5__alert_info_parameter, sizeof(_ns5__alert_info_parameter), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 _ns5__alert_info_parameter * SOAP_FMAC2 soap_instantiate__ns5__alert_info_parameter(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns5__alert_info_parameter(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	_ns5__alert_info_parameter *p;
	size_t k = sizeof(_ns5__alert_info_parameter);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE__ns5__alert_info_parameter, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, _ns5__alert_info_parameter);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, _ns5__alert_info_parameter, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated _ns5__alert_info_parameter location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int _ns5__alert_info_parameter::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out__ns5__alert_info_parameter(soap, tag ? tag : "ns5:alert-info-parameter", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns5__alert_info_parameter::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns5__alert_info_parameter(soap, this, tag, type);
}

SOAP_FMAC3 _ns5__alert_info_parameter * SOAP_FMAC4 soap_get__ns5__alert_info_parameter(struct soap *soap, _ns5__alert_info_parameter *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns5__alert_info_parameter(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void _ns5__alert_info_eventCode::soap_default(struct soap *soap)
{
	(void)soap; /* appease -Wall -Werror */
	soap_default_std__string(soap, &this->_ns5__alert_info_eventCode::valueName);
	soap_default_std__string(soap, &this->_ns5__alert_info_eventCode::value);
}

void _ns5__alert_info_eventCode::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_embedded(soap, &this->_ns5__alert_info_eventCode::valueName, SOAP_TYPE_std__string);
	soap_serialize_std__string(soap, &this->_ns5__alert_info_eventCode::valueName);
	soap_embedded(soap, &this->_ns5__alert_info_eventCode::value, SOAP_TYPE_std__string);
	soap_serialize_std__string(soap, &this->_ns5__alert_info_eventCode::value);
#endif
}

int _ns5__alert_info_eventCode::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns5__alert_info_eventCode(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns5__alert_info_eventCode(struct soap *soap, const char *tag, int id, const _ns5__alert_info_eventCode *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns5__alert_info_eventCode), type))
		return soap->error;
	if (soap_out_std__string(soap, "ns5:valueName", -1, &a->_ns5__alert_info_eventCode::valueName, "xsd:string"))
		return soap->error;
	if (soap_out_std__string(soap, "ns5:value", -1, &a->_ns5__alert_info_eventCode::value, "xsd:string"))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *_ns5__alert_info_eventCode::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in__ns5__alert_info_eventCode(soap, tag, this, type);
}

SOAP_FMAC3 _ns5__alert_info_eventCode * SOAP_FMAC4 soap_in__ns5__alert_info_eventCode(struct soap *soap, const char *tag, _ns5__alert_info_eventCode *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns5__alert_info_eventCode*)soap_id_enter(soap, soap->id, a, SOAP_TYPE__ns5__alert_info_eventCode, sizeof(_ns5__alert_info_eventCode), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE__ns5__alert_info_eventCode)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (_ns5__alert_info_eventCode *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag_valueName1 = 1;
	size_t soap_flag_value1 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_valueName1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_std__string(soap, "ns5:valueName", &a->_ns5__alert_info_eventCode::valueName, "xsd:string"))
				{	soap_flag_valueName1--;
					continue;
				}
			}
			if (soap_flag_value1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_std__string(soap, "ns5:value", &a->_ns5__alert_info_eventCode::value, "xsd:string"))
				{	soap_flag_value1--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_valueName1 > 0 || soap_flag_value1 > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && *soap->href != '#')
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (_ns5__alert_info_eventCode *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns5__alert_info_eventCode, SOAP_TYPE__ns5__alert_info_eventCode, sizeof(_ns5__alert_info_eventCode), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 _ns5__alert_info_eventCode * SOAP_FMAC2 soap_instantiate__ns5__alert_info_eventCode(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns5__alert_info_eventCode(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	_ns5__alert_info_eventCode *p;
	size_t k = sizeof(_ns5__alert_info_eventCode);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE__ns5__alert_info_eventCode, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, _ns5__alert_info_eventCode);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, _ns5__alert_info_eventCode, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated _ns5__alert_info_eventCode location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int _ns5__alert_info_eventCode::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out__ns5__alert_info_eventCode(soap, tag ? tag : "ns5:alert-info-eventCode", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns5__alert_info_eventCode::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns5__alert_info_eventCode(soap, this, tag, type);
}

SOAP_FMAC3 _ns5__alert_info_eventCode * SOAP_FMAC4 soap_get__ns5__alert_info_eventCode(struct soap *soap, _ns5__alert_info_eventCode *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns5__alert_info_eventCode(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void _ns5__alert_info::soap_default(struct soap *soap)
{
	(void)soap; /* appease -Wall -Werror */
	this->_ns5__alert_info::language = NULL;
	soap_default_std__vectorTemplateOf_ns5__alert_info_category(soap, &this->_ns5__alert_info::category);
	soap_default_std__string(soap, &this->_ns5__alert_info::event);
	soap_default_std__vectorTemplateOf_ns5__alert_info_responseType(soap, &this->_ns5__alert_info::responseType);
	soap_default__ns5__alert_info_urgency(soap, &this->_ns5__alert_info::urgency);
	soap_default__ns5__alert_info_severity(soap, &this->_ns5__alert_info::severity);
	soap_default__ns5__alert_info_certainty(soap, &this->_ns5__alert_info::certainty);
	this->_ns5__alert_info::audience = NULL;
	soap_default_std__vectorTemplateOf_ns5__alert_info_eventCode(soap, &this->_ns5__alert_info::eventCode);
	this->_ns5__alert_info::effective = NULL;
	this->_ns5__alert_info::onset = NULL;
	this->_ns5__alert_info::expires = NULL;
	this->_ns5__alert_info::senderName = NULL;
	this->_ns5__alert_info::headline = NULL;
	this->_ns5__alert_info::description = NULL;
	this->_ns5__alert_info::instruction = NULL;
	this->_ns5__alert_info::web = NULL;
	this->_ns5__alert_info::contact = NULL;
	soap_default_std__vectorTemplateOf_ns5__alert_info_parameter(soap, &this->_ns5__alert_info::parameter);
	soap_default_std__vectorTemplateOf_ns5__alert_info_resource(soap, &this->_ns5__alert_info::resource);
	soap_default_std__vectorTemplateOf_ns5__alert_info_area(soap, &this->_ns5__alert_info::area);
}

void _ns5__alert_info::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerToxsd__language(soap, &this->_ns5__alert_info::language);
	soap_serialize_std__vectorTemplateOf_ns5__alert_info_category(soap, &this->_ns5__alert_info::category);
	soap_embedded(soap, &this->_ns5__alert_info::event, SOAP_TYPE_std__string);
	soap_serialize_std__string(soap, &this->_ns5__alert_info::event);
	soap_serialize_std__vectorTemplateOf_ns5__alert_info_responseType(soap, &this->_ns5__alert_info::responseType);
	soap_serialize_PointerTostd__string(soap, &this->_ns5__alert_info::audience);
	soap_serialize_std__vectorTemplateOf_ns5__alert_info_eventCode(soap, &this->_ns5__alert_info::eventCode);
	soap_serialize_PointerTodateTime(soap, &this->_ns5__alert_info::effective);
	soap_serialize_PointerTodateTime(soap, &this->_ns5__alert_info::onset);
	soap_serialize_PointerTodateTime(soap, &this->_ns5__alert_info::expires);
	soap_serialize_PointerTostd__string(soap, &this->_ns5__alert_info::senderName);
	soap_serialize_PointerTostd__string(soap, &this->_ns5__alert_info::headline);
	soap_serialize_PointerTostd__string(soap, &this->_ns5__alert_info::description);
	soap_serialize_PointerTostd__string(soap, &this->_ns5__alert_info::instruction);
	soap_serialize_PointerToxsd__anyURI(soap, &this->_ns5__alert_info::web);
	soap_serialize_PointerTostd__string(soap, &this->_ns5__alert_info::contact);
	soap_serialize_std__vectorTemplateOf_ns5__alert_info_parameter(soap, &this->_ns5__alert_info::parameter);
	soap_serialize_std__vectorTemplateOf_ns5__alert_info_resource(soap, &this->_ns5__alert_info::resource);
	soap_serialize_std__vectorTemplateOf_ns5__alert_info_area(soap, &this->_ns5__alert_info::area);
#endif
}

int _ns5__alert_info::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns5__alert_info(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns5__alert_info(struct soap *soap, const char *tag, int id, const _ns5__alert_info *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns5__alert_info), type))
		return soap->error;
	if (soap_out_PointerToxsd__language(soap, "ns5:language", -1, &a->_ns5__alert_info::language, "xsd:language"))
		return soap->error;
	if (soap_out_std__vectorTemplateOf_ns5__alert_info_category(soap, "ns5:category", -1, &a->_ns5__alert_info::category, "ns5:alert-info-category"))
		return soap->error;
	if (soap_out_std__string(soap, "ns5:event", -1, &a->_ns5__alert_info::event, "xsd:string"))
		return soap->error;
	if (soap_out_std__vectorTemplateOf_ns5__alert_info_responseType(soap, "ns5:responseType", -1, &a->_ns5__alert_info::responseType, "ns5:alert-info-responseType"))
		return soap->error;
	if (soap_out__ns5__alert_info_urgency(soap, "ns5:urgency", -1, &a->_ns5__alert_info::urgency, "ns5:alert-info-urgency"))
		return soap->error;
	if (soap_out__ns5__alert_info_severity(soap, "ns5:severity", -1, &a->_ns5__alert_info::severity, "ns5:alert-info-severity"))
		return soap->error;
	if (soap_out__ns5__alert_info_certainty(soap, "ns5:certainty", -1, &a->_ns5__alert_info::certainty, "ns5:alert-info-certainty"))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns5:audience", -1, &a->_ns5__alert_info::audience, "xsd:string"))
		return soap->error;
	if (soap_out_std__vectorTemplateOf_ns5__alert_info_eventCode(soap, "ns5:eventCode", -1, &a->_ns5__alert_info::eventCode, ""))
		return soap->error;
	if (soap_out_PointerTodateTime(soap, "ns5:effective", -1, &a->_ns5__alert_info::effective, "xsd:dateTime"))
		return soap->error;
	if (soap_out_PointerTodateTime(soap, "ns5:onset", -1, &a->_ns5__alert_info::onset, "xsd:dateTime"))
		return soap->error;
	if (soap_out_PointerTodateTime(soap, "ns5:expires", -1, &a->_ns5__alert_info::expires, "xsd:dateTime"))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns5:senderName", -1, &a->_ns5__alert_info::senderName, "xsd:string"))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns5:headline", -1, &a->_ns5__alert_info::headline, "xsd:string"))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns5:description", -1, &a->_ns5__alert_info::description, "xsd:string"))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns5:instruction", -1, &a->_ns5__alert_info::instruction, "xsd:string"))
		return soap->error;
	if (soap_out_PointerToxsd__anyURI(soap, "ns5:web", -1, &a->_ns5__alert_info::web, "xsd:anyURI"))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns5:contact", -1, &a->_ns5__alert_info::contact, "xsd:string"))
		return soap->error;
	if (soap_out_std__vectorTemplateOf_ns5__alert_info_parameter(soap, "ns5:parameter", -1, &a->_ns5__alert_info::parameter, ""))
		return soap->error;
	if (soap_out_std__vectorTemplateOf_ns5__alert_info_resource(soap, "ns5:resource", -1, &a->_ns5__alert_info::resource, ""))
		return soap->error;
	if (soap_out_std__vectorTemplateOf_ns5__alert_info_area(soap, "ns5:area", -1, &a->_ns5__alert_info::area, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *_ns5__alert_info::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in__ns5__alert_info(soap, tag, this, type);
}

SOAP_FMAC3 _ns5__alert_info * SOAP_FMAC4 soap_in__ns5__alert_info(struct soap *soap, const char *tag, _ns5__alert_info *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns5__alert_info*)soap_id_enter(soap, soap->id, a, SOAP_TYPE__ns5__alert_info, sizeof(_ns5__alert_info), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE__ns5__alert_info)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (_ns5__alert_info *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag_language1 = 1;
	size_t soap_flag_event1 = 1;
	size_t soap_flag_urgency1 = 1;
	size_t soap_flag_severity1 = 1;
	size_t soap_flag_certainty1 = 1;
	size_t soap_flag_audience1 = 1;
	size_t soap_flag_effective1 = 1;
	size_t soap_flag_onset1 = 1;
	size_t soap_flag_expires1 = 1;
	size_t soap_flag_senderName1 = 1;
	size_t soap_flag_headline1 = 1;
	size_t soap_flag_description1 = 1;
	size_t soap_flag_instruction1 = 1;
	size_t soap_flag_web1 = 1;
	size_t soap_flag_contact1 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_language1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_PointerToxsd__language(soap, "ns5:language", &a->_ns5__alert_info::language, "xsd:language"))
				{	soap_flag_language1--;
					if (*soap->href != '#' && a->_ns5__alert_info::language && a->_ns5__alert_info::language->empty())
						*a->_ns5__alert_info::language = "en-US";
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_std__vectorTemplateOf_ns5__alert_info_category(soap, "ns5:category", &a->_ns5__alert_info::category, "ns5:alert-info-category"))
					continue;
			}
			if (soap_flag_event1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_std__string(soap, "ns5:event", &a->_ns5__alert_info::event, "xsd:string"))
				{	soap_flag_event1--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_std__vectorTemplateOf_ns5__alert_info_responseType(soap, "ns5:responseType", &a->_ns5__alert_info::responseType, "ns5:alert-info-responseType"))
					continue;
			}
			if (soap_flag_urgency1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in__ns5__alert_info_urgency(soap, "ns5:urgency", &a->_ns5__alert_info::urgency, "ns5:alert-info-urgency"))
				{	soap_flag_urgency1--;
					continue;
				}
			}
			if (soap_flag_severity1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in__ns5__alert_info_severity(soap, "ns5:severity", &a->_ns5__alert_info::severity, "ns5:alert-info-severity"))
				{	soap_flag_severity1--;
					continue;
				}
			}
			if (soap_flag_certainty1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in__ns5__alert_info_certainty(soap, "ns5:certainty", &a->_ns5__alert_info::certainty, "ns5:alert-info-certainty"))
				{	soap_flag_certainty1--;
					continue;
				}
			}
			if (soap_flag_audience1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_PointerTostd__string(soap, "ns5:audience", &a->_ns5__alert_info::audience, "xsd:string"))
				{	soap_flag_audience1--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_std__vectorTemplateOf_ns5__alert_info_eventCode(soap, "ns5:eventCode", &a->_ns5__alert_info::eventCode, ""))
					continue;
			}
			if (soap_flag_effective1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTodateTime(soap, "ns5:effective", &a->_ns5__alert_info::effective, "xsd:dateTime"))
				{	soap_flag_effective1--;
					continue;
				}
			}
			if (soap_flag_onset1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTodateTime(soap, "ns5:onset", &a->_ns5__alert_info::onset, "xsd:dateTime"))
				{	soap_flag_onset1--;
					continue;
				}
			}
			if (soap_flag_expires1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTodateTime(soap, "ns5:expires", &a->_ns5__alert_info::expires, "xsd:dateTime"))
				{	soap_flag_expires1--;
					continue;
				}
			}
			if (soap_flag_senderName1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_PointerTostd__string(soap, "ns5:senderName", &a->_ns5__alert_info::senderName, "xsd:string"))
				{	soap_flag_senderName1--;
					continue;
				}
			}
			if (soap_flag_headline1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_PointerTostd__string(soap, "ns5:headline", &a->_ns5__alert_info::headline, "xsd:string"))
				{	soap_flag_headline1--;
					continue;
				}
			}
			if (soap_flag_description1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_PointerTostd__string(soap, "ns5:description", &a->_ns5__alert_info::description, "xsd:string"))
				{	soap_flag_description1--;
					continue;
				}
			}
			if (soap_flag_instruction1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_PointerTostd__string(soap, "ns5:instruction", &a->_ns5__alert_info::instruction, "xsd:string"))
				{	soap_flag_instruction1--;
					continue;
				}
			}
			if (soap_flag_web1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_PointerToxsd__anyURI(soap, "ns5:web", &a->_ns5__alert_info::web, "xsd:anyURI"))
				{	soap_flag_web1--;
					continue;
				}
			}
			if (soap_flag_contact1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_PointerTostd__string(soap, "ns5:contact", &a->_ns5__alert_info::contact, "xsd:string"))
				{	soap_flag_contact1--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_std__vectorTemplateOf_ns5__alert_info_parameter(soap, "ns5:parameter", &a->_ns5__alert_info::parameter, ""))
					continue;
			}
			if (soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_std__vectorTemplateOf_ns5__alert_info_resource(soap, "ns5:resource", &a->_ns5__alert_info::resource, ""))
					continue;
			}
			if (soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_std__vectorTemplateOf_ns5__alert_info_area(soap, "ns5:area", &a->_ns5__alert_info::area, ""))
					continue;
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (a->_ns5__alert_info::category.size() < 1 || soap_flag_event1 > 0 || soap_flag_urgency1 > 0 || soap_flag_severity1 > 0 || soap_flag_certainty1 > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && *soap->href != '#')
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (_ns5__alert_info *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns5__alert_info, SOAP_TYPE__ns5__alert_info, sizeof(_ns5__alert_info), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 _ns5__alert_info * SOAP_FMAC2 soap_instantiate__ns5__alert_info(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns5__alert_info(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	_ns5__alert_info *p;
	size_t k = sizeof(_ns5__alert_info);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE__ns5__alert_info, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, _ns5__alert_info);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, _ns5__alert_info, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated _ns5__alert_info location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int _ns5__alert_info::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out__ns5__alert_info(soap, tag ? tag : "ns5:alert-info", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns5__alert_info::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns5__alert_info(soap, this, tag, type);
}

SOAP_FMAC3 _ns5__alert_info * SOAP_FMAC4 soap_get__ns5__alert_info(struct soap *soap, _ns5__alert_info *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns5__alert_info(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void _ns2__CAPHeaderTypeDef::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns2__CAPHeaderTypeDef::logonUser = NULL;
	this->_ns2__CAPHeaderTypeDef::logonCogId = NULL;
}

void _ns2__CAPHeaderTypeDef::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTostd__string(soap, &this->_ns2__CAPHeaderTypeDef::logonUser);
	soap_serialize_PointerToint(soap, &this->_ns2__CAPHeaderTypeDef::logonCogId);
#endif
}

int _ns2__CAPHeaderTypeDef::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns2__CAPHeaderTypeDef(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns2__CAPHeaderTypeDef(struct soap *soap, const char *tag, int id, const _ns2__CAPHeaderTypeDef *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns2__CAPHeaderTypeDef), type))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns2:logonUser", -1, &a->_ns2__CAPHeaderTypeDef::logonUser, "xsd:string"))
		return soap->error;
	if (soap_out_PointerToint(soap, "ns2:logonCogId", -1, &a->_ns2__CAPHeaderTypeDef::logonCogId, "xsd:int"))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *_ns2__CAPHeaderTypeDef::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in__ns2__CAPHeaderTypeDef(soap, tag, this, type);
}

SOAP_FMAC3 _ns2__CAPHeaderTypeDef * SOAP_FMAC4 soap_in__ns2__CAPHeaderTypeDef(struct soap *soap, const char *tag, _ns2__CAPHeaderTypeDef *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns2__CAPHeaderTypeDef*)soap_id_enter(soap, soap->id, a, SOAP_TYPE__ns2__CAPHeaderTypeDef, sizeof(_ns2__CAPHeaderTypeDef), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE__ns2__CAPHeaderTypeDef)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (_ns2__CAPHeaderTypeDef *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag_logonUser1 = 1;
	size_t soap_flag_logonCogId1 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_logonUser1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_PointerTostd__string(soap, "ns2:logonUser", &a->_ns2__CAPHeaderTypeDef::logonUser, "xsd:string"))
				{	soap_flag_logonUser1--;
					continue;
				}
			}
			if (soap_flag_logonCogId1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerToint(soap, "ns2:logonCogId", &a->_ns2__CAPHeaderTypeDef::logonCogId, "xsd:int"))
				{	soap_flag_logonCogId1--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns2__CAPHeaderTypeDef *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns2__CAPHeaderTypeDef, SOAP_TYPE__ns2__CAPHeaderTypeDef, sizeof(_ns2__CAPHeaderTypeDef), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 _ns2__CAPHeaderTypeDef * SOAP_FMAC2 soap_instantiate__ns2__CAPHeaderTypeDef(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns2__CAPHeaderTypeDef(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	_ns2__CAPHeaderTypeDef *p;
	size_t k = sizeof(_ns2__CAPHeaderTypeDef);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE__ns2__CAPHeaderTypeDef, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, _ns2__CAPHeaderTypeDef);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, _ns2__CAPHeaderTypeDef, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated _ns2__CAPHeaderTypeDef location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int _ns2__CAPHeaderTypeDef::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out__ns2__CAPHeaderTypeDef(soap, tag ? tag : "ns2:CAPHeaderTypeDef", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns2__CAPHeaderTypeDef::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns2__CAPHeaderTypeDef(soap, this, tag, type);
}

SOAP_FMAC3 _ns2__CAPHeaderTypeDef * SOAP_FMAC4 soap_get__ns2__CAPHeaderTypeDef(struct soap *soap, _ns2__CAPHeaderTypeDef *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns2__CAPHeaderTypeDef(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void _ns2__messageResponseTypeDef::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__vectorTemplateOfPointerTo_ns5__alert(soap, &this->_ns2__messageResponseTypeDef::ns5__alert);
}

void _ns2__messageResponseTypeDef::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_std__vectorTemplateOfPointerTo_ns5__alert(soap, &this->_ns2__messageResponseTypeDef::ns5__alert);
#endif
}

int _ns2__messageResponseTypeDef::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns2__messageResponseTypeDef(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns2__messageResponseTypeDef(struct soap *soap, const char *tag, int id, const _ns2__messageResponseTypeDef *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns2__messageResponseTypeDef), type))
		return soap->error;
	soap_element_result(soap, "ns5:alert");
	if (soap_out_std__vectorTemplateOfPointerTo_ns5__alert(soap, "ns5:alert", -1, &a->_ns2__messageResponseTypeDef::ns5__alert, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *_ns2__messageResponseTypeDef::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in__ns2__messageResponseTypeDef(soap, tag, this, type);
}

SOAP_FMAC3 _ns2__messageResponseTypeDef * SOAP_FMAC4 soap_in__ns2__messageResponseTypeDef(struct soap *soap, const char *tag, _ns2__messageResponseTypeDef *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns2__messageResponseTypeDef*)soap_id_enter(soap, soap->id, a, SOAP_TYPE__ns2__messageResponseTypeDef, sizeof(_ns2__messageResponseTypeDef), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE__ns2__messageResponseTypeDef)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (_ns2__messageResponseTypeDef *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_std__vectorTemplateOfPointerTo_ns5__alert(soap, "ns5:alert", &a->_ns2__messageResponseTypeDef::ns5__alert, ""))
					continue;
			}
			soap_check_result(soap, "ns5:alert");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns2__messageResponseTypeDef *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns2__messageResponseTypeDef, SOAP_TYPE__ns2__messageResponseTypeDef, sizeof(_ns2__messageResponseTypeDef), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 _ns2__messageResponseTypeDef * SOAP_FMAC2 soap_instantiate__ns2__messageResponseTypeDef(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns2__messageResponseTypeDef(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	_ns2__messageResponseTypeDef *p;
	size_t k = sizeof(_ns2__messageResponseTypeDef);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE__ns2__messageResponseTypeDef, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, _ns2__messageResponseTypeDef);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, _ns2__messageResponseTypeDef, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated _ns2__messageResponseTypeDef location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int _ns2__messageResponseTypeDef::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out__ns2__messageResponseTypeDef(soap, tag ? tag : "ns2:messageResponseTypeDef", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns2__messageResponseTypeDef::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns2__messageResponseTypeDef(soap, this, tag, type);
}

SOAP_FMAC3 _ns2__messageResponseTypeDef * SOAP_FMAC4 soap_get__ns2__messageResponseTypeDef(struct soap *soap, _ns2__messageResponseTypeDef *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns2__messageResponseTypeDef(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void _ns2__postCAPResponseTypeDef::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns2__postCAPResponseTypeDef::postCAPReturn = NULL;
}

void _ns2__postCAPResponseTypeDef::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTostd__string(soap, &this->_ns2__postCAPResponseTypeDef::postCAPReturn);
#endif
}

int _ns2__postCAPResponseTypeDef::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns2__postCAPResponseTypeDef(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns2__postCAPResponseTypeDef(struct soap *soap, const char *tag, int id, const _ns2__postCAPResponseTypeDef *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns2__postCAPResponseTypeDef), type))
		return soap->error;
	if (a->postCAPReturn)
		soap_element_result(soap, "ns2:postCAPReturn");
	if (!a->_ns2__postCAPResponseTypeDef::postCAPReturn)
	{	if (soap_element_nil(soap, "ns2:postCAPReturn"))
			return soap->error;
	}
	else if (soap_out_PointerTostd__string(soap, "ns2:postCAPReturn", -1, &a->_ns2__postCAPResponseTypeDef::postCAPReturn, "xsd:string"))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *_ns2__postCAPResponseTypeDef::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in__ns2__postCAPResponseTypeDef(soap, tag, this, type);
}

SOAP_FMAC3 _ns2__postCAPResponseTypeDef * SOAP_FMAC4 soap_in__ns2__postCAPResponseTypeDef(struct soap *soap, const char *tag, _ns2__postCAPResponseTypeDef *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns2__postCAPResponseTypeDef*)soap_id_enter(soap, soap->id, a, SOAP_TYPE__ns2__postCAPResponseTypeDef, sizeof(_ns2__postCAPResponseTypeDef), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE__ns2__postCAPResponseTypeDef)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (_ns2__postCAPResponseTypeDef *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag_postCAPReturn1 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_postCAPReturn1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_PointerTostd__string(soap, "ns2:postCAPReturn", &a->_ns2__postCAPResponseTypeDef::postCAPReturn, "xsd:string"))
				{	soap_flag_postCAPReturn1--;
					continue;
				}
			}
			soap_check_result(soap, "ns2:postCAPReturn");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_postCAPReturn1 > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && *soap->href != '#')
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (_ns2__postCAPResponseTypeDef *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns2__postCAPResponseTypeDef, SOAP_TYPE__ns2__postCAPResponseTypeDef, sizeof(_ns2__postCAPResponseTypeDef), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 _ns2__postCAPResponseTypeDef * SOAP_FMAC2 soap_instantiate__ns2__postCAPResponseTypeDef(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns2__postCAPResponseTypeDef(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	_ns2__postCAPResponseTypeDef *p;
	size_t k = sizeof(_ns2__postCAPResponseTypeDef);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE__ns2__postCAPResponseTypeDef, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, _ns2__postCAPResponseTypeDef);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, _ns2__postCAPResponseTypeDef, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated _ns2__postCAPResponseTypeDef location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int _ns2__postCAPResponseTypeDef::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out__ns2__postCAPResponseTypeDef(soap, tag ? tag : "ns2:postCAPResponseTypeDef", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns2__postCAPResponseTypeDef::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns2__postCAPResponseTypeDef(soap, this, tag, type);
}

SOAP_FMAC3 _ns2__postCAPResponseTypeDef * SOAP_FMAC4 soap_get__ns2__postCAPResponseTypeDef(struct soap *soap, _ns2__postCAPResponseTypeDef *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns2__postCAPResponseTypeDef(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void _ns2__CAPServiceException::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns2__CAPServiceException::errorCode = NULL;
	this->_ns2__CAPServiceException::message = NULL;
}

void _ns2__CAPServiceException::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTostd__string(soap, &this->_ns2__CAPServiceException::errorCode);
	soap_serialize_PointerTostd__string(soap, &this->_ns2__CAPServiceException::message);
#endif
}

int _ns2__CAPServiceException::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns2__CAPServiceException(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns2__CAPServiceException(struct soap *soap, const char *tag, int id, const _ns2__CAPServiceException *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns2__CAPServiceException), type))
		return soap->error;
	if (!a->_ns2__CAPServiceException::errorCode)
	{	if (soap_element_nil(soap, "ns2:errorCode"))
			return soap->error;
	}
	else if (soap_out_PointerTostd__string(soap, "ns2:errorCode", -1, &a->_ns2__CAPServiceException::errorCode, "xsd:string"))
		return soap->error;
	if (!a->_ns2__CAPServiceException::message)
	{	if (soap_element_nil(soap, "ns2:message"))
			return soap->error;
	}
	else if (soap_out_PointerTostd__string(soap, "ns2:message", -1, &a->_ns2__CAPServiceException::message, "xsd:string"))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *_ns2__CAPServiceException::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in__ns2__CAPServiceException(soap, tag, this, type);
}

SOAP_FMAC3 _ns2__CAPServiceException * SOAP_FMAC4 soap_in__ns2__CAPServiceException(struct soap *soap, const char *tag, _ns2__CAPServiceException *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns2__CAPServiceException*)soap_id_enter(soap, soap->id, a, SOAP_TYPE__ns2__CAPServiceException, sizeof(_ns2__CAPServiceException), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE__ns2__CAPServiceException)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (_ns2__CAPServiceException *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag_errorCode1 = 1;
	size_t soap_flag_message1 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_errorCode1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_PointerTostd__string(soap, "ns2:errorCode", &a->_ns2__CAPServiceException::errorCode, "xsd:string"))
				{	soap_flag_errorCode1--;
					continue;
				}
			}
			if (soap_flag_message1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_PointerTostd__string(soap, "ns2:message", &a->_ns2__CAPServiceException::message, "xsd:string"))
				{	soap_flag_message1--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_errorCode1 > 0 || soap_flag_message1 > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && *soap->href != '#')
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (_ns2__CAPServiceException *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns2__CAPServiceException, SOAP_TYPE__ns2__CAPServiceException, sizeof(_ns2__CAPServiceException), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 _ns2__CAPServiceException * SOAP_FMAC2 soap_instantiate__ns2__CAPServiceException(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns2__CAPServiceException(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	_ns2__CAPServiceException *p;
	size_t k = sizeof(_ns2__CAPServiceException);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE__ns2__CAPServiceException, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, _ns2__CAPServiceException);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, _ns2__CAPServiceException, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated _ns2__CAPServiceException location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int _ns2__CAPServiceException::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out__ns2__CAPServiceException(soap, tag ? tag : "ns2:CAPServiceException", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns2__CAPServiceException::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns2__CAPServiceException(soap, this, tag, type);
}

SOAP_FMAC3 _ns2__CAPServiceException * SOAP_FMAC4 soap_get__ns2__CAPServiceException(struct soap *soap, _ns2__CAPServiceException *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns2__CAPServiceException(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void _ns2__postCAPRequestTypeDef::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns2__postCAPRequestTypeDef::ns5__alert = NULL;
}

void _ns2__postCAPRequestTypeDef::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_ns5__alert(soap, &this->_ns2__postCAPRequestTypeDef::ns5__alert);
#endif
}

int _ns2__postCAPRequestTypeDef::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns2__postCAPRequestTypeDef(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns2__postCAPRequestTypeDef(struct soap *soap, const char *tag, int id, const _ns2__postCAPRequestTypeDef *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns2__postCAPRequestTypeDef), type))
		return soap->error;
	if (!a->_ns2__postCAPRequestTypeDef::ns5__alert)
	{	if (soap_element_empty(soap, "ns5:alert"))
			return soap->error;
	}
	else if (soap_out_PointerTo_ns5__alert(soap, "ns5:alert", -1, &a->_ns2__postCAPRequestTypeDef::ns5__alert, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *_ns2__postCAPRequestTypeDef::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in__ns2__postCAPRequestTypeDef(soap, tag, this, type);
}

SOAP_FMAC3 _ns2__postCAPRequestTypeDef * SOAP_FMAC4 soap_in__ns2__postCAPRequestTypeDef(struct soap *soap, const char *tag, _ns2__postCAPRequestTypeDef *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns2__postCAPRequestTypeDef*)soap_id_enter(soap, soap->id, a, SOAP_TYPE__ns2__postCAPRequestTypeDef, sizeof(_ns2__postCAPRequestTypeDef), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE__ns2__postCAPRequestTypeDef)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (_ns2__postCAPRequestTypeDef *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag_ns5__alert1 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns5__alert1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTo_ns5__alert(soap, "ns5:alert", &a->_ns2__postCAPRequestTypeDef::ns5__alert, ""))
				{	soap_flag_ns5__alert1--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (!a->_ns2__postCAPRequestTypeDef::ns5__alert))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && *soap->href != '#')
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (_ns2__postCAPRequestTypeDef *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns2__postCAPRequestTypeDef, SOAP_TYPE__ns2__postCAPRequestTypeDef, sizeof(_ns2__postCAPRequestTypeDef), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 _ns2__postCAPRequestTypeDef * SOAP_FMAC2 soap_instantiate__ns2__postCAPRequestTypeDef(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns2__postCAPRequestTypeDef(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	_ns2__postCAPRequestTypeDef *p;
	size_t k = sizeof(_ns2__postCAPRequestTypeDef);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE__ns2__postCAPRequestTypeDef, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, _ns2__postCAPRequestTypeDef);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, _ns2__postCAPRequestTypeDef, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated _ns2__postCAPRequestTypeDef location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int _ns2__postCAPRequestTypeDef::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out__ns2__postCAPRequestTypeDef(soap, tag ? tag : "ns2:postCAPRequestTypeDef", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns2__postCAPRequestTypeDef::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns2__postCAPRequestTypeDef(soap, this, tag, type);
}

SOAP_FMAC3 _ns2__postCAPRequestTypeDef * SOAP_FMAC4 soap_get__ns2__postCAPRequestTypeDef(struct soap *soap, _ns2__postCAPRequestTypeDef *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns2__postCAPRequestTypeDef(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void _ns5__alert::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__string(soap, &this->_ns5__alert::identifier);
	soap_default_std__string(soap, &this->_ns5__alert::sender);
	soap_default_dateTime(soap, &this->_ns5__alert::sent);
	soap_default__ns5__alert_status(soap, &this->_ns5__alert::status);
	soap_default__ns5__alert_msgType(soap, &this->_ns5__alert::msgType);
	this->_ns5__alert::source = NULL;
	soap_default__ns5__alert_scope(soap, &this->_ns5__alert::scope);
	this->_ns5__alert::restriction = NULL;
	this->_ns5__alert::addresses = NULL;
	soap_default_std__vectorTemplateOfstd__string(soap, &this->_ns5__alert::code);
	this->_ns5__alert::note = NULL;
	this->_ns5__alert::references = NULL;
	this->_ns5__alert::incidents = NULL;
	soap_default_std__vectorTemplateOf_ns5__alert_info(soap, &this->_ns5__alert::info);
	soap_default_std__vectorTemplateOf_XML(soap, &this->_ns5__alert::__any);
}

void _ns5__alert::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_embedded(soap, &this->_ns5__alert::identifier, SOAP_TYPE_std__string);
	soap_serialize_std__string(soap, &this->_ns5__alert::identifier);
	soap_embedded(soap, &this->_ns5__alert::sender, SOAP_TYPE_std__string);
	soap_serialize_std__string(soap, &this->_ns5__alert::sender);
	soap_embedded(soap, &this->_ns5__alert::sent, SOAP_TYPE_dateTime);
	soap_serialize_PointerTostd__string(soap, &this->_ns5__alert::source);
	soap_serialize_PointerTostd__string(soap, &this->_ns5__alert::restriction);
	soap_serialize_PointerTostd__string(soap, &this->_ns5__alert::addresses);
	soap_serialize_std__vectorTemplateOfstd__string(soap, &this->_ns5__alert::code);
	soap_serialize_PointerTostd__string(soap, &this->_ns5__alert::note);
	soap_serialize_PointerTostd__string(soap, &this->_ns5__alert::references);
	soap_serialize_PointerTostd__string(soap, &this->_ns5__alert::incidents);
	soap_serialize_std__vectorTemplateOf_ns5__alert_info(soap, &this->_ns5__alert::info);
	soap_serialize_std__vectorTemplateOf_XML(soap, &this->_ns5__alert::__any);
#endif
}

int _ns5__alert::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns5__alert(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns5__alert(struct soap *soap, const char *tag, int id, const _ns5__alert *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns5__alert), type))
		return soap->error;
	if (soap_out_std__string(soap, "ns5:identifier", -1, &a->_ns5__alert::identifier, "xsd:string"))
		return soap->error;
	if (soap_out_std__string(soap, "ns5:sender", -1, &a->_ns5__alert::sender, "xsd:string"))
		return soap->error;
	if (soap_out_dateTime(soap, "ns5:sent", -1, &a->_ns5__alert::sent, "xsd:dateTime"))
		return soap->error;
	if (soap_out__ns5__alert_status(soap, "ns5:status", -1, &a->_ns5__alert::status, "ns5:alert-status"))
		return soap->error;
	if (soap_out__ns5__alert_msgType(soap, "ns5:msgType", -1, &a->_ns5__alert::msgType, "ns5:alert-msgType"))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns5:source", -1, &a->_ns5__alert::source, "xsd:string"))
		return soap->error;
	if (soap_out__ns5__alert_scope(soap, "ns5:scope", -1, &a->_ns5__alert::scope, "ns5:alert-scope"))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns5:restriction", -1, &a->_ns5__alert::restriction, "xsd:string"))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns5:addresses", -1, &a->_ns5__alert::addresses, "xsd:string"))
		return soap->error;
	if (soap_out_std__vectorTemplateOfstd__string(soap, "ns5:code", -1, &a->_ns5__alert::code, "xsd:string"))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns5:note", -1, &a->_ns5__alert::note, "xsd:string"))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns5:references", -1, &a->_ns5__alert::references, "xsd:string"))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns5:incidents", -1, &a->_ns5__alert::incidents, "xsd:string"))
		return soap->error;
	if (soap_out_std__vectorTemplateOf_ns5__alert_info(soap, "ns5:info", -1, &a->_ns5__alert::info, ""))
		return soap->error;
	if (soap_out_std__vectorTemplateOf_XML(soap, "-any", -1, &a->_ns5__alert::__any, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *_ns5__alert::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in__ns5__alert(soap, tag, this, type);
}

SOAP_FMAC3 _ns5__alert * SOAP_FMAC4 soap_in__ns5__alert(struct soap *soap, const char *tag, _ns5__alert *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns5__alert*)soap_id_enter(soap, soap->id, a, SOAP_TYPE__ns5__alert, sizeof(_ns5__alert), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE__ns5__alert)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (_ns5__alert *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag_identifier1 = 1;
	size_t soap_flag_sender1 = 1;
	size_t soap_flag_sent1 = 1;
	size_t soap_flag_status1 = 1;
	size_t soap_flag_msgType1 = 1;
	size_t soap_flag_source1 = 1;
	size_t soap_flag_scope1 = 1;
	size_t soap_flag_restriction1 = 1;
	size_t soap_flag_addresses1 = 1;
	size_t soap_flag_note1 = 1;
	size_t soap_flag_references1 = 1;
	size_t soap_flag_incidents1 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_identifier1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_std__string(soap, "ns5:identifier", &a->_ns5__alert::identifier, "xsd:string"))
				{	soap_flag_identifier1--;
					continue;
				}
			}
			if (soap_flag_sender1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_std__string(soap, "ns5:sender", &a->_ns5__alert::sender, "xsd:string"))
				{	soap_flag_sender1--;
					continue;
				}
			}
			if (soap_flag_sent1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_dateTime(soap, "ns5:sent", &a->_ns5__alert::sent, "xsd:dateTime"))
				{	soap_flag_sent1--;
					continue;
				}
			}
			if (soap_flag_status1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in__ns5__alert_status(soap, "ns5:status", &a->_ns5__alert::status, "ns5:alert-status"))
				{	soap_flag_status1--;
					continue;
				}
			}
			if (soap_flag_msgType1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in__ns5__alert_msgType(soap, "ns5:msgType", &a->_ns5__alert::msgType, "ns5:alert-msgType"))
				{	soap_flag_msgType1--;
					continue;
				}
			}
			if (soap_flag_source1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_PointerTostd__string(soap, "ns5:source", &a->_ns5__alert::source, "xsd:string"))
				{	soap_flag_source1--;
					continue;
				}
			}
			if (soap_flag_scope1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in__ns5__alert_scope(soap, "ns5:scope", &a->_ns5__alert::scope, "ns5:alert-scope"))
				{	soap_flag_scope1--;
					continue;
				}
			}
			if (soap_flag_restriction1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_PointerTostd__string(soap, "ns5:restriction", &a->_ns5__alert::restriction, "xsd:string"))
				{	soap_flag_restriction1--;
					continue;
				}
			}
			if (soap_flag_addresses1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_PointerTostd__string(soap, "ns5:addresses", &a->_ns5__alert::addresses, "xsd:string"))
				{	soap_flag_addresses1--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_std__vectorTemplateOfstd__string(soap, "ns5:code", &a->_ns5__alert::code, "xsd:string"))
					continue;
			}
			if (soap_flag_note1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_PointerTostd__string(soap, "ns5:note", &a->_ns5__alert::note, "xsd:string"))
				{	soap_flag_note1--;
					continue;
				}
			}
			if (soap_flag_references1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_PointerTostd__string(soap, "ns5:references", &a->_ns5__alert::references, "xsd:string"))
				{	soap_flag_references1--;
					continue;
				}
			}
			if (soap_flag_incidents1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_PointerTostd__string(soap, "ns5:incidents", &a->_ns5__alert::incidents, "xsd:string"))
				{	soap_flag_incidents1--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_std__vectorTemplateOf_ns5__alert_info(soap, "ns5:info", &a->_ns5__alert::info, ""))
					continue;
			}
			if (soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_std__vectorTemplateOf_XML(soap, "-any", &a->_ns5__alert::__any, ""))
					continue;
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_identifier1 > 0 || soap_flag_sender1 > 0 || soap_flag_sent1 > 0 || soap_flag_status1 > 0 || soap_flag_msgType1 > 0 || soap_flag_scope1 > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && *soap->href != '#')
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (_ns5__alert *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns5__alert, SOAP_TYPE__ns5__alert, sizeof(_ns5__alert), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 _ns5__alert * SOAP_FMAC2 soap_instantiate__ns5__alert(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns5__alert(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	_ns5__alert *p;
	size_t k = sizeof(_ns5__alert);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE__ns5__alert, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, _ns5__alert);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, _ns5__alert, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated _ns5__alert location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int _ns5__alert::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out__ns5__alert(soap, tag ? tag : "ns5:alert", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns5__alert::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns5__alert(soap, this, tag, type);
}

SOAP_FMAC3 _ns5__alert * SOAP_FMAC4 soap_get__ns5__alert(struct soap *soap, _ns5__alert *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns5__alert(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void _ns4__parameterListItem::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns4__parameterListItem::parameterName = NULL;
	this->_ns4__parameterListItem::parameterValue = NULL;
	soap_default_std__vectorTemplateOfPointerTons4__subParameterListItem(soap, &this->_ns4__parameterListItem::subParaListItem);
}

void _ns4__parameterListItem::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTostd__string(soap, &this->_ns4__parameterListItem::parameterName);
	soap_serialize_PointerTostd__string(soap, &this->_ns4__parameterListItem::parameterValue);
	soap_serialize_std__vectorTemplateOfPointerTons4__subParameterListItem(soap, &this->_ns4__parameterListItem::subParaListItem);
#endif
}

int _ns4__parameterListItem::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns4__parameterListItem(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns4__parameterListItem(struct soap *soap, const char *tag, int id, const _ns4__parameterListItem *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns4__parameterListItem), type))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns4:parameterName", -1, &a->_ns4__parameterListItem::parameterName, "xsd:string"))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns4:parameterValue", -1, &a->_ns4__parameterListItem::parameterValue, "xsd:string"))
		return soap->error;
	if (soap_out_std__vectorTemplateOfPointerTons4__subParameterListItem(soap, "ns4:subParaListItem", -1, &a->_ns4__parameterListItem::subParaListItem, "ns4:subParameterListItem"))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *_ns4__parameterListItem::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in__ns4__parameterListItem(soap, tag, this, type);
}

SOAP_FMAC3 _ns4__parameterListItem * SOAP_FMAC4 soap_in__ns4__parameterListItem(struct soap *soap, const char *tag, _ns4__parameterListItem *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns4__parameterListItem*)soap_id_enter(soap, soap->id, a, SOAP_TYPE__ns4__parameterListItem, sizeof(_ns4__parameterListItem), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE__ns4__parameterListItem)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (_ns4__parameterListItem *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag_parameterName1 = 1;
	size_t soap_flag_parameterValue1 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_parameterName1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_PointerTostd__string(soap, "ns4:parameterName", &a->_ns4__parameterListItem::parameterName, "xsd:string"))
				{	soap_flag_parameterName1--;
					continue;
				}
			}
			if (soap_flag_parameterValue1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_PointerTostd__string(soap, "ns4:parameterValue", &a->_ns4__parameterListItem::parameterValue, "xsd:string"))
				{	soap_flag_parameterValue1--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_std__vectorTemplateOfPointerTons4__subParameterListItem(soap, "ns4:subParaListItem", &a->_ns4__parameterListItem::subParaListItem, "ns4:subParameterListItem"))
					continue;
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns4__parameterListItem *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns4__parameterListItem, SOAP_TYPE__ns4__parameterListItem, sizeof(_ns4__parameterListItem), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 _ns4__parameterListItem * SOAP_FMAC2 soap_instantiate__ns4__parameterListItem(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns4__parameterListItem(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	_ns4__parameterListItem *p;
	size_t k = sizeof(_ns4__parameterListItem);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE__ns4__parameterListItem, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, _ns4__parameterListItem);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, _ns4__parameterListItem, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated _ns4__parameterListItem location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int _ns4__parameterListItem::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out__ns4__parameterListItem(soap, tag ? tag : "ns4:parameterListItem", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns4__parameterListItem::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns4__parameterListItem(soap, this, tag, type);
}

SOAP_FMAC3 _ns4__parameterListItem * SOAP_FMAC4 soap_get__ns4__parameterListItem(struct soap *soap, _ns4__parameterListItem *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns4__parameterListItem(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void ns4__subParameterListItem::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->ns4__subParameterListItem::subParameterName = NULL;
	this->ns4__subParameterListItem::subParameterValue = NULL;
}

void ns4__subParameterListItem::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTostd__string(soap, &this->ns4__subParameterListItem::subParameterName);
	soap_serialize_PointerTostd__string(soap, &this->ns4__subParameterListItem::subParameterValue);
#endif
}

int ns4__subParameterListItem::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns4__subParameterListItem(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns4__subParameterListItem(struct soap *soap, const char *tag, int id, const ns4__subParameterListItem *a, const char *type)
{
	if (!type)
		type = "ns4:subParameterListItem";
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns4__subParameterListItem), type))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns4:subParameterName", -1, &a->ns4__subParameterListItem::subParameterName, "xsd:string"))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns4:subParameterValue", -1, &a->ns4__subParameterListItem::subParameterValue, "xsd:string"))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *ns4__subParameterListItem::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in_ns4__subParameterListItem(soap, tag, this, type);
}

SOAP_FMAC3 ns4__subParameterListItem * SOAP_FMAC4 soap_in_ns4__subParameterListItem(struct soap *soap, const char *tag, ns4__subParameterListItem *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns4__subParameterListItem*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns4__subParameterListItem, sizeof(ns4__subParameterListItem), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE_ns4__subParameterListItem)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (ns4__subParameterListItem *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag_subParameterName1 = 1;
	size_t soap_flag_subParameterValue1 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_subParameterName1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_PointerTostd__string(soap, "ns4:subParameterName", &a->ns4__subParameterListItem::subParameterName, "xsd:string"))
				{	soap_flag_subParameterName1--;
					continue;
				}
			}
			if (soap_flag_subParameterValue1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_PointerTostd__string(soap, "ns4:subParameterValue", &a->ns4__subParameterListItem::subParameterValue, "xsd:string"))
				{	soap_flag_subParameterValue1--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns4__subParameterListItem *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns4__subParameterListItem, SOAP_TYPE_ns4__subParameterListItem, sizeof(ns4__subParameterListItem), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 ns4__subParameterListItem * SOAP_FMAC2 soap_instantiate_ns4__subParameterListItem(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns4__subParameterListItem(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	ns4__subParameterListItem *p;
	size_t k = sizeof(ns4__subParameterListItem);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_ns4__subParameterListItem, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, ns4__subParameterListItem);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, ns4__subParameterListItem, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated ns4__subParameterListItem location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int ns4__subParameterListItem::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_ns4__subParameterListItem(soap, tag ? tag : "ns4:subParameterListItem", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns4__subParameterListItem::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns4__subParameterListItem(soap, this, tag, type);
}

SOAP_FMAC3 ns4__subParameterListItem * SOAP_FMAC4 soap_get_ns4__subParameterListItem(struct soap *soap, ns4__subParameterListItem *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns4__subParameterListItem(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void ns4__responseParameterList::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__vectorTemplateOfPointerTo_ns4__parameterListItem(soap, &this->ns4__responseParameterList::parameterListItem);
	this->ns4__responseParameterList::ResponseOperation = NULL;
	this->ns4__responseParameterList::ResponseType = NULL;
}

void ns4__responseParameterList::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_std__vectorTemplateOfPointerTo_ns4__parameterListItem(soap, &this->ns4__responseParameterList::parameterListItem);
	soap_serialize_PointerTostd__string(soap, &this->ns4__responseParameterList::ResponseOperation);
	soap_serialize_PointerTostd__string(soap, &this->ns4__responseParameterList::ResponseType);
#endif
}

int ns4__responseParameterList::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns4__responseParameterList(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns4__responseParameterList(struct soap *soap, const char *tag, int id, const ns4__responseParameterList *a, const char *type)
{
	if (!type)
		type = "ns4:responseParameterList";
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns4__responseParameterList), type))
		return soap->error;
	soap_element_result(soap, "ns4:parameterListItem");
	if (soap_out_std__vectorTemplateOfPointerTo_ns4__parameterListItem(soap, "ns4:parameterListItem", -1, &a->ns4__responseParameterList::parameterListItem, ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns4:ResponseOperation", -1, &a->ns4__responseParameterList::ResponseOperation, "xsd:string"))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns4:ResponseType", -1, &a->ns4__responseParameterList::ResponseType, "xsd:string"))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *ns4__responseParameterList::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in_ns4__responseParameterList(soap, tag, this, type);
}

SOAP_FMAC3 ns4__responseParameterList * SOAP_FMAC4 soap_in_ns4__responseParameterList(struct soap *soap, const char *tag, ns4__responseParameterList *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns4__responseParameterList*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns4__responseParameterList, sizeof(ns4__responseParameterList), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE_ns4__responseParameterList)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (ns4__responseParameterList *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag_ResponseOperation1 = 1;
	size_t soap_flag_ResponseType1 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_std__vectorTemplateOfPointerTo_ns4__parameterListItem(soap, "ns4:parameterListItem", &a->ns4__responseParameterList::parameterListItem, ""))
					continue;
			}
			if (soap_flag_ResponseOperation1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_PointerTostd__string(soap, "ns4:ResponseOperation", &a->ns4__responseParameterList::ResponseOperation, "xsd:string"))
				{	soap_flag_ResponseOperation1--;
					continue;
				}
			}
			if (soap_flag_ResponseType1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_PointerTostd__string(soap, "ns4:ResponseType", &a->ns4__responseParameterList::ResponseType, "xsd:string"))
				{	soap_flag_ResponseType1--;
					continue;
				}
			}
			soap_check_result(soap, "ns4:parameterListItem");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns4__responseParameterList *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns4__responseParameterList, SOAP_TYPE_ns4__responseParameterList, sizeof(ns4__responseParameterList), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 ns4__responseParameterList * SOAP_FMAC2 soap_instantiate_ns4__responseParameterList(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns4__responseParameterList(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	ns4__responseParameterList *p;
	size_t k = sizeof(ns4__responseParameterList);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_ns4__responseParameterList, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, ns4__responseParameterList);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, ns4__responseParameterList, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated ns4__responseParameterList location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int ns4__responseParameterList::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_ns4__responseParameterList(soap, tag ? tag : "ns4:responseParameterList", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns4__responseParameterList::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns4__responseParameterList(soap, this, tag, type);
}

SOAP_FMAC3 ns4__responseParameterList * SOAP_FMAC4 soap_get_ns4__responseParameterList(struct soap *soap, ns4__responseParameterList *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns4__responseParameterList(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void ns3__parameterListItem::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->ns3__parameterListItem::parameterName = NULL;
	this->ns3__parameterListItem::comparisonOp = NULL;
	soap_default_std__vectorTemplateOfstd__string(soap, &this->ns3__parameterListItem::parameterValue);
	this->ns3__parameterListItem::logicalOp = NULL;
}

void ns3__parameterListItem::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTostd__string(soap, &this->ns3__parameterListItem::parameterName);
	soap_serialize_PointerTostd__string(soap, &this->ns3__parameterListItem::comparisonOp);
	soap_serialize_std__vectorTemplateOfstd__string(soap, &this->ns3__parameterListItem::parameterValue);
	soap_serialize_PointerTostd__string(soap, &this->ns3__parameterListItem::logicalOp);
#endif
}

int ns3__parameterListItem::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns3__parameterListItem(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__parameterListItem(struct soap *soap, const char *tag, int id, const ns3__parameterListItem *a, const char *type)
{
	if (!type)
		type = "ns3:parameterListItem";
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns3__parameterListItem), type))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns3:parameterName", -1, &a->ns3__parameterListItem::parameterName, "xsd:string"))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns3:comparisonOp", -1, &a->ns3__parameterListItem::comparisonOp, "xsd:string"))
		return soap->error;
	if (soap_out_std__vectorTemplateOfstd__string(soap, "ns3:parameterValue", -1, &a->ns3__parameterListItem::parameterValue, "xsd:string"))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns3:logicalOp", -1, &a->ns3__parameterListItem::logicalOp, "xsd:string"))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *ns3__parameterListItem::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in_ns3__parameterListItem(soap, tag, this, type);
}

SOAP_FMAC3 ns3__parameterListItem * SOAP_FMAC4 soap_in_ns3__parameterListItem(struct soap *soap, const char *tag, ns3__parameterListItem *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns3__parameterListItem*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns3__parameterListItem, sizeof(ns3__parameterListItem), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE_ns3__parameterListItem)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (ns3__parameterListItem *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag_parameterName1 = 1;
	size_t soap_flag_comparisonOp1 = 1;
	size_t soap_flag_logicalOp1 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_parameterName1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_PointerTostd__string(soap, "ns3:parameterName", &a->ns3__parameterListItem::parameterName, "xsd:string"))
				{	soap_flag_parameterName1--;
					continue;
				}
			}
			if (soap_flag_comparisonOp1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_PointerTostd__string(soap, "ns3:comparisonOp", &a->ns3__parameterListItem::comparisonOp, "xsd:string"))
				{	soap_flag_comparisonOp1--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_std__vectorTemplateOfstd__string(soap, "ns3:parameterValue", &a->ns3__parameterListItem::parameterValue, "xsd:string"))
					continue;
			}
			if (soap_flag_logicalOp1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_PointerTostd__string(soap, "ns3:logicalOp", &a->ns3__parameterListItem::logicalOp, "xsd:string"))
				{	soap_flag_logicalOp1--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns3__parameterListItem *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns3__parameterListItem, SOAP_TYPE_ns3__parameterListItem, sizeof(ns3__parameterListItem), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 ns3__parameterListItem * SOAP_FMAC2 soap_instantiate_ns3__parameterListItem(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns3__parameterListItem(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	ns3__parameterListItem *p;
	size_t k = sizeof(ns3__parameterListItem);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_ns3__parameterListItem, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, ns3__parameterListItem);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, ns3__parameterListItem, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated ns3__parameterListItem location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int ns3__parameterListItem::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_ns3__parameterListItem(soap, tag ? tag : "ns3:parameterListItem", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns3__parameterListItem::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns3__parameterListItem(soap, this, tag, type);
}

SOAP_FMAC3 ns3__parameterListItem * SOAP_FMAC4 soap_get_ns3__parameterListItem(struct soap *soap, ns3__parameterListItem *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns3__parameterListItem(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void ns3__requestParameterList::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->ns3__requestParameterList::requestAPI = NULL;
	this->ns3__requestParameterList::requestOperation = NULL;
	soap_default_std__vectorTemplateOfPointerTons3__parameterListItem(soap, &this->ns3__requestParameterList::parameters);
}

void ns3__requestParameterList::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTostd__string(soap, &this->ns3__requestParameterList::requestAPI);
	soap_serialize_PointerTostd__string(soap, &this->ns3__requestParameterList::requestOperation);
	soap_serialize_std__vectorTemplateOfPointerTons3__parameterListItem(soap, &this->ns3__requestParameterList::parameters);
#endif
}

int ns3__requestParameterList::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns3__requestParameterList(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__requestParameterList(struct soap *soap, const char *tag, int id, const ns3__requestParameterList *a, const char *type)
{
	if (!type)
		type = "ns3:requestParameterList";
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns3__requestParameterList), type))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns3:requestAPI", -1, &a->ns3__requestParameterList::requestAPI, "xsd:string"))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns3:requestOperation", -1, &a->ns3__requestParameterList::requestOperation, "xsd:string"))
		return soap->error;
	if (soap_out_std__vectorTemplateOfPointerTons3__parameterListItem(soap, "ns3:parameters", -1, &a->ns3__requestParameterList::parameters, "ns3:parameterListItem"))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *ns3__requestParameterList::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in_ns3__requestParameterList(soap, tag, this, type);
}

SOAP_FMAC3 ns3__requestParameterList * SOAP_FMAC4 soap_in_ns3__requestParameterList(struct soap *soap, const char *tag, ns3__requestParameterList *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns3__requestParameterList*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns3__requestParameterList, sizeof(ns3__requestParameterList), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE_ns3__requestParameterList)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (ns3__requestParameterList *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag_requestAPI1 = 1;
	size_t soap_flag_requestOperation1 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_requestAPI1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_PointerTostd__string(soap, "ns3:requestAPI", &a->ns3__requestParameterList::requestAPI, "xsd:string"))
				{	soap_flag_requestAPI1--;
					continue;
				}
			}
			if (soap_flag_requestOperation1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_PointerTostd__string(soap, "ns3:requestOperation", &a->ns3__requestParameterList::requestOperation, "xsd:string"))
				{	soap_flag_requestOperation1--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_std__vectorTemplateOfPointerTons3__parameterListItem(soap, "ns3:parameters", &a->ns3__requestParameterList::parameters, "ns3:parameterListItem"))
					continue;
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns3__requestParameterList *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns3__requestParameterList, SOAP_TYPE_ns3__requestParameterList, sizeof(ns3__requestParameterList), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 ns3__requestParameterList * SOAP_FMAC2 soap_instantiate_ns3__requestParameterList(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns3__requestParameterList(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	ns3__requestParameterList *p;
	size_t k = sizeof(ns3__requestParameterList);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_ns3__requestParameterList, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, ns3__requestParameterList);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, ns3__requestParameterList, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated ns3__requestParameterList location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int ns3__requestParameterList::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_ns3__requestParameterList(soap, tag ? tag : "ns3:requestParameterList", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns3__requestParameterList::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns3__requestParameterList(soap, this, tag, type);
}

SOAP_FMAC3 ns3__requestParameterList * SOAP_FMAC4 soap_get_ns3__requestParameterList(struct soap *soap, ns3__requestParameterList *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns3__requestParameterList(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__language(struct soap *soap, const std::string *a)
{	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__language(struct soap *soap, const char *tag, int id, const std::string *s, const char *type)
{
	if ((soap->mode & SOAP_C_NILSTRING) && s->empty())
		return soap_element_null(soap, tag, id, type);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, s, SOAP_TYPE_xsd__language), type) || soap_string_out(soap, s->c_str(), 0) || soap_element_end_out(soap, tag))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_xsd__language(struct soap *soap, const char *tag, std::string *s, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!s)
		s = soap_new_std__string(soap, -1);
	if (soap->null)
		if (s)
			s->erase();
	if (soap->body && *soap->href != '#')
	{	char *t;
		s = (std::string*)soap_id_enter(soap, soap->id, s, SOAP_TYPE_xsd__language, sizeof(std::string), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
		if (s)
		{	if (!(t = soap_string_in(soap, 5, 0, -1, "([a-zA-Z]{2}|[iI]-[a-zA-Z]+|[xX]-[a-zA-Z]{1,8})(-[a-zA-Z]{1,8})*")))
				return NULL;
			s->assign(t);
		}
	}
	else
		s = (std::string*)soap_id_forward(soap, soap->href, soap_id_enter(soap, soap->id, s, SOAP_TYPE_xsd__language, sizeof(std::string), soap->type, soap->arrayType, soap_instantiate, soap_fbase), 0, SOAP_TYPE_xsd__language, SOAP_TYPE_xsd__language, sizeof(std::string), 0, soap_finsert, NULL);
	if (soap->body && soap_element_end_in(soap, tag))
		return NULL;
	return s;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__language(struct soap *soap, const std::string *a, const char *tag, const char *type)
{
	if (soap_out_xsd__language(soap, tag ? tag : "xsd:language", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_xsd__language(struct soap *soap, std::string *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__language(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__integer(struct soap *soap, const std::string *a)
{	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__integer(struct soap *soap, const char *tag, int id, const std::string *s, const char *type)
{
	if ((soap->mode & SOAP_C_NILSTRING) && s->empty())
		return soap_element_null(soap, tag, id, type);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, s, SOAP_TYPE_xsd__integer), type) || soap_string_out(soap, s->c_str(), 0) || soap_element_end_out(soap, tag))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_xsd__integer(struct soap *soap, const char *tag, std::string *s, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!s)
		s = soap_new_std__string(soap, -1);
	if (soap->null)
		if (s)
			s->erase();
	if (soap->body && *soap->href != '#')
	{	char *t;
		s = (std::string*)soap_id_enter(soap, soap->id, s, SOAP_TYPE_xsd__integer, sizeof(std::string), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
		if (s)
		{	if (!(t = soap_string_in(soap, 5, 0, -1, "[-+]?\\d+")))
				return NULL;
			s->assign(t);
		}
	}
	else
		s = (std::string*)soap_id_forward(soap, soap->href, soap_id_enter(soap, soap->id, s, SOAP_TYPE_xsd__integer, sizeof(std::string), soap->type, soap->arrayType, soap_instantiate, soap_fbase), 0, SOAP_TYPE_xsd__integer, SOAP_TYPE_xsd__integer, sizeof(std::string), 0, soap_finsert, NULL);
	if (soap->body && soap_element_end_in(soap, tag))
		return NULL;
	return s;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__integer(struct soap *soap, const std::string *a, const char *tag, const char *type)
{
	if (soap_out_xsd__integer(soap, tag ? tag : "xsd:integer", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_xsd__integer(struct soap *soap, std::string *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__integer(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__decimal(struct soap *soap, const std::string *a)
{	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__decimal(struct soap *soap, const char *tag, int id, const std::string *s, const char *type)
{
	if ((soap->mode & SOAP_C_NILSTRING) && s->empty())
		return soap_element_null(soap, tag, id, type);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, s, SOAP_TYPE_xsd__decimal), type) || soap_string_out(soap, s->c_str(), 0) || soap_element_end_out(soap, tag))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_xsd__decimal(struct soap *soap, const char *tag, std::string *s, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!s)
		s = soap_new_std__string(soap, -1);
	if (soap->null)
		if (s)
			s->erase();
	if (soap->body && *soap->href != '#')
	{	char *t;
		s = (std::string*)soap_id_enter(soap, soap->id, s, SOAP_TYPE_xsd__decimal, sizeof(std::string), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
		if (s)
		{	if (!(t = soap_string_in(soap, 5, 0, -1, "[-+]?(\\d+|\\d*\\.\\d*)")))
				return NULL;
			s->assign(t);
		}
	}
	else
		s = (std::string*)soap_id_forward(soap, soap->href, soap_id_enter(soap, soap->id, s, SOAP_TYPE_xsd__decimal, sizeof(std::string), soap->type, soap->arrayType, soap_instantiate, soap_fbase), 0, SOAP_TYPE_xsd__decimal, SOAP_TYPE_xsd__decimal, sizeof(std::string), 0, soap_finsert, NULL);
	if (soap->body && soap_element_end_in(soap, tag))
		return NULL;
	return s;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__decimal(struct soap *soap, const std::string *a, const char *tag, const char *type)
{
	if (soap_out_xsd__decimal(soap, tag ? tag : "xsd:decimal", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_xsd__decimal(struct soap *soap, std::string *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__decimal(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__anyURI(struct soap *soap, const std::string *a)
{	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__anyURI(struct soap *soap, const char *tag, int id, const std::string *s, const char *type)
{
	if ((soap->mode & SOAP_C_NILSTRING) && s->empty())
		return soap_element_null(soap, tag, id, type);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, s, SOAP_TYPE_xsd__anyURI), type) || soap_string_out(soap, s->c_str(), 0) || soap_element_end_out(soap, tag))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_xsd__anyURI(struct soap *soap, const char *tag, std::string *s, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!s)
		s = soap_new_std__string(soap, -1);
	if (soap->null)
		if (s)
			s->erase();
	if (soap->body && *soap->href != '#')
	{	char *t;
		s = (std::string*)soap_id_enter(soap, soap->id, s, SOAP_TYPE_xsd__anyURI, sizeof(std::string), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
		if (s)
		{	if (!(t = soap_string_in(soap, 4, 0, -1, NULL)))
				return NULL;
			s->assign(t);
		}
	}
	else
		s = (std::string*)soap_id_forward(soap, soap->href, soap_id_enter(soap, soap->id, s, SOAP_TYPE_xsd__anyURI, sizeof(std::string), soap->type, soap->arrayType, soap_instantiate, soap_fbase), 0, SOAP_TYPE_xsd__anyURI, SOAP_TYPE_xsd__anyURI, sizeof(std::string), 0, soap_finsert, NULL);
	if (soap->body && soap_element_end_in(soap, tag))
		return NULL;
	return s;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__anyURI(struct soap *soap, const std::string *a, const char *tag, const char *type)
{
	if (soap_out_xsd__anyURI(soap, tag ? tag : "xsd:anyURI", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_xsd__anyURI(struct soap *soap, std::string *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__anyURI(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__string(struct soap *soap, const std::string *a)
{	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__string(struct soap *soap, const char *tag, int id, const std::string *s, const char *type)
{
	if ((soap->mode & SOAP_C_NILSTRING) && s->empty())
		return soap_element_null(soap, tag, id, type);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, s, SOAP_TYPE_std__string), type) || soap_string_out(soap, s->c_str(), 0) || soap_element_end_out(soap, tag))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_std__string(struct soap *soap, const char *tag, std::string *s, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!s)
		s = soap_new_std__string(soap, -1);
	if (soap->null)
		if (s)
			s->erase();
	if (soap->body && *soap->href != '#')
	{	char *t;
		s = (std::string*)soap_id_enter(soap, soap->id, s, SOAP_TYPE_std__string, sizeof(std::string), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
		if (s)
		{	if (!(t = soap_string_in(soap, 1, 0, -1, NULL)))
				return NULL;
			s->assign(t);
		}
	}
	else
		s = (std::string*)soap_id_forward(soap, soap->href, soap_id_enter(soap, soap->id, s, SOAP_TYPE_std__string, sizeof(std::string), soap->type, soap->arrayType, soap_instantiate, soap_fbase), 0, SOAP_TYPE_std__string, SOAP_TYPE_std__string, sizeof(std::string), 0, soap_finsert, NULL);
	if (soap->body && soap_element_end_in(soap, tag))
		return NULL;
	return s;
}

SOAP_FMAC1 std::string * SOAP_FMAC2 soap_instantiate_std__string(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__string(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	std::string *p;
	size_t k = sizeof(std::string);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_std__string, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, std::string);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, std::string, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated std::string location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_std__string(struct soap *soap, const std::string *a, const char *tag, const char *type)
{
	if (soap_out_std__string(soap, tag ? tag : "string", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_std__string(struct soap *soap, std::string *p, const char *tag, const char *type)
{
	if ((p = soap_in_std__string(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default__QName(soap, &a->faultcode);
	soap_default_string(soap, &a->faultstring);
	soap_default_string(soap, &a->faultactor);
	a->detail = NULL;
	a->SOAP_ENV__Code = NULL;
	a->SOAP_ENV__Reason = NULL;
	soap_default_string(soap, &a->SOAP_ENV__Node);
	soap_default_string(soap, &a->SOAP_ENV__Role);
	a->SOAP_ENV__Detail = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Fault(struct soap *soap, const struct SOAP_ENV__Fault *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize__QName(soap, (char*const*)&a->faultcode);
	soap_serialize_string(soap, (char*const*)&a->faultstring);
	soap_serialize_string(soap, (char*const*)&a->faultactor);
	soap_serialize_PointerToSOAP_ENV__Detail(soap, &a->detail);
	soap_serialize_PointerToSOAP_ENV__Code(soap, &a->SOAP_ENV__Code);
	soap_serialize_PointerToSOAP_ENV__Reason(soap, &a->SOAP_ENV__Reason);
	soap_serialize_string(soap, (char*const*)&a->SOAP_ENV__Node);
	soap_serialize_string(soap, (char*const*)&a->SOAP_ENV__Role);
	soap_serialize_PointerToSOAP_ENV__Detail(soap, &a->SOAP_ENV__Detail);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Fault(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Fault *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	const char *soap_tmp_faultcode = soap_QName2s(soap, a->faultcode);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Fault), type))
		return soap->error;
	if (soap_out__QName(soap, "faultcode", -1, (char*const*)(void*)&soap_tmp_faultcode, "xsd:QName"))
		return soap->error;
	if (soap_out_string(soap, "faultstring", -1, (char*const*)&a->faultstring, "xsd:string"))
		return soap->error;
	if (soap_out_string(soap, "faultactor", -1, (char*const*)&a->faultactor, "xsd:string"))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Detail(soap, "detail", -1, &a->detail, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Code", -1, &a->SOAP_ENV__Code, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Reason(soap, "SOAP-ENV:Reason", -1, &a->SOAP_ENV__Reason, ""))
		return soap->error;
	if (soap_out_string(soap, "SOAP-ENV:Node", -1, (char*const*)&a->SOAP_ENV__Node, "xsd:string"))
		return soap->error;
	if (soap_out_string(soap, "SOAP-ENV:Role", -1, (char*const*)&a->SOAP_ENV__Role, "xsd:string"))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Detail(soap, "SOAP-ENV:Detail", -1, &a->SOAP_ENV__Detail, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_in_SOAP_ENV__Fault(struct soap *soap, const char *tag, struct SOAP_ENV__Fault *a, const char *type)
{
	size_t soap_flag_faultcode = 1;
	size_t soap_flag_faultstring = 1;
	size_t soap_flag_faultactor = 1;
	size_t soap_flag_detail = 1;
	size_t soap_flag_SOAP_ENV__Code = 1;
	size_t soap_flag_SOAP_ENV__Reason = 1;
	size_t soap_flag_SOAP_ENV__Node = 1;
	size_t soap_flag_SOAP_ENV__Role = 1;
	size_t soap_flag_SOAP_ENV__Detail = 1;
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (struct SOAP_ENV__Fault*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Fault, sizeof(struct SOAP_ENV__Fault), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Fault(soap, a);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_faultcode && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in__QName(soap, "faultcode", (char**)&a->faultcode, "xsd:QName"))
				{	soap_flag_faultcode--;
					continue;
				}
			}
			if (soap_flag_faultstring && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "faultstring", (char**)&a->faultstring, "xsd:string"))
				{	soap_flag_faultstring--;
					continue;
				}
			}
			if (soap_flag_faultactor && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "faultactor", (char**)&a->faultactor, "xsd:string"))
				{	soap_flag_faultactor--;
					continue;
				}
			}
			if (soap_flag_detail && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerToSOAP_ENV__Detail(soap, "detail", &a->detail, ""))
				{	soap_flag_detail--;
					continue;
				}
			}
			if (soap_flag_SOAP_ENV__Code && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Code", &a->SOAP_ENV__Code, ""))
				{	soap_flag_SOAP_ENV__Code--;
					continue;
				}
			}
			if (soap_flag_SOAP_ENV__Reason && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerToSOAP_ENV__Reason(soap, "SOAP-ENV:Reason", &a->SOAP_ENV__Reason, ""))
				{	soap_flag_SOAP_ENV__Reason--;
					continue;
				}
			}
			if (soap_flag_SOAP_ENV__Node && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "SOAP-ENV:Node", (char**)&a->SOAP_ENV__Node, "xsd:string"))
				{	soap_flag_SOAP_ENV__Node--;
					continue;
				}
			}
			if (soap_flag_SOAP_ENV__Role && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "SOAP-ENV:Role", (char**)&a->SOAP_ENV__Role, "xsd:string"))
				{	soap_flag_SOAP_ENV__Role--;
					continue;
				}
			}
			if (soap_flag_SOAP_ENV__Detail && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerToSOAP_ENV__Detail(soap, "SOAP-ENV:Detail", &a->SOAP_ENV__Detail, ""))
				{	soap_flag_SOAP_ENV__Detail--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Fault *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Fault, SOAP_TYPE_SOAP_ENV__Fault, sizeof(struct SOAP_ENV__Fault), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct SOAP_ENV__Fault * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Fault(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Fault(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct SOAP_ENV__Fault *p;
	size_t k = sizeof(struct SOAP_ENV__Fault);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_SOAP_ENV__Fault, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct SOAP_ENV__Fault);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct SOAP_ENV__Fault, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct SOAP_ENV__Fault location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Fault(struct soap *soap, const struct SOAP_ENV__Fault *a, const char *tag, const char *type)
{
	if (soap_out_SOAP_ENV__Fault(soap, tag ? tag : "SOAP-ENV:Fault", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_get_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Fault(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_string(soap, &a->SOAP_ENV__Text);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Reason(struct soap *soap, const struct SOAP_ENV__Reason *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_string(soap, (char*const*)&a->SOAP_ENV__Text);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Reason(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Reason *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Reason), type))
		return soap->error;
	if (soap->lang)
		soap_set_attr(soap, "xml:lang", soap->lang, 1);
	if (soap_out_string(soap, "SOAP-ENV:Text", -1, (char*const*)&a->SOAP_ENV__Text, "xsd:string"))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_in_SOAP_ENV__Reason(struct soap *soap, const char *tag, struct SOAP_ENV__Reason *a, const char *type)
{
	size_t soap_flag_SOAP_ENV__Text = 1;
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (struct SOAP_ENV__Reason*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Reason, sizeof(struct SOAP_ENV__Reason), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Reason(soap, a);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SOAP_ENV__Text && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "SOAP-ENV:Text", (char**)&a->SOAP_ENV__Text, "xsd:string"))
				{	soap_flag_SOAP_ENV__Text--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Reason *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Reason, SOAP_TYPE_SOAP_ENV__Reason, sizeof(struct SOAP_ENV__Reason), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct SOAP_ENV__Reason * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Reason(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Reason(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct SOAP_ENV__Reason *p;
	size_t k = sizeof(struct SOAP_ENV__Reason);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_SOAP_ENV__Reason, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct SOAP_ENV__Reason);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct SOAP_ENV__Reason, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct SOAP_ENV__Reason location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Reason(struct soap *soap, const struct SOAP_ENV__Reason *a, const char *tag, const char *type)
{
	if (soap_out_SOAP_ENV__Reason(soap, tag ? tag : "SOAP-ENV:Reason", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_get_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Reason(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default__QName(soap, &a->SOAP_ENV__Value);
	a->SOAP_ENV__Subcode = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Code(struct soap *soap, const struct SOAP_ENV__Code *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize__QName(soap, (char*const*)&a->SOAP_ENV__Value);
	soap_serialize_PointerToSOAP_ENV__Code(soap, &a->SOAP_ENV__Subcode);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Code(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Code *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	const char *soap_tmp_SOAP_ENV__Value = soap_QName2s(soap, a->SOAP_ENV__Value);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Code), type))
		return soap->error;
	if (soap_out__QName(soap, "SOAP-ENV:Value", -1, (char*const*)(void*)&soap_tmp_SOAP_ENV__Value, "xsd:QName"))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Subcode", -1, &a->SOAP_ENV__Subcode, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_in_SOAP_ENV__Code(struct soap *soap, const char *tag, struct SOAP_ENV__Code *a, const char *type)
{
	size_t soap_flag_SOAP_ENV__Value = 1;
	size_t soap_flag_SOAP_ENV__Subcode = 1;
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (struct SOAP_ENV__Code*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Code(soap, a);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SOAP_ENV__Value && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in__QName(soap, "SOAP-ENV:Value", (char**)&a->SOAP_ENV__Value, "xsd:QName"))
				{	soap_flag_SOAP_ENV__Value--;
					continue;
				}
			}
			if (soap_flag_SOAP_ENV__Subcode && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Subcode", &a->SOAP_ENV__Subcode, ""))
				{	soap_flag_SOAP_ENV__Subcode--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Code *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Code, SOAP_TYPE_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct SOAP_ENV__Code * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Code(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Code(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct SOAP_ENV__Code *p;
	size_t k = sizeof(struct SOAP_ENV__Code);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_SOAP_ENV__Code, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct SOAP_ENV__Code);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct SOAP_ENV__Code, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct SOAP_ENV__Code location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Code(struct soap *soap, const struct SOAP_ENV__Code *a, const char *tag, const char *type)
{
	if (soap_out_SOAP_ENV__Code(soap, tag ? tag : "SOAP-ENV:Code", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_get_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Code(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns2__getMessage(struct soap *soap, struct __ns2__getMessage *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns2__getMessageTypeDef = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns2__getMessage(struct soap *soap, const struct __ns2__getMessage *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTons3__requestParameterList(soap, &a->ns2__getMessageTypeDef);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns2__getMessage(struct soap *soap, const char *tag, int id, const struct __ns2__getMessage *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (!type)
		type = "-ns2:getMessage";
	if (soap_out_PointerTons3__requestParameterList(soap, "ns2:getMessageTypeDef", -1, &a->ns2__getMessageTypeDef, "ns3:requestParameterList"))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns2__getMessage * SOAP_FMAC4 soap_in___ns2__getMessage(struct soap *soap, const char *tag, struct __ns2__getMessage *a, const char *type)
{
	size_t soap_flag_ns2__getMessageTypeDef = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns2__getMessage*)soap_id_enter(soap, "", a, SOAP_TYPE___ns2__getMessage, sizeof(struct __ns2__getMessage), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns2__getMessage(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns2__getMessageTypeDef && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTons3__requestParameterList(soap, "ns2:getMessageTypeDef", &a->ns2__getMessageTypeDef, "ns3:requestParameterList"))
				{	soap_flag_ns2__getMessageTypeDef--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH && soap_flag)
			{	soap->error = SOAP_OK;
				break;
			}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC1 struct __ns2__getMessage * SOAP_FMAC2 soap_instantiate___ns2__getMessage(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns2__getMessage(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct __ns2__getMessage *p;
	size_t k = sizeof(struct __ns2__getMessage);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE___ns2__getMessage, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct __ns2__getMessage);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct __ns2__getMessage, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct __ns2__getMessage location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns2__getMessage(struct soap *soap, const struct __ns2__getMessage *a, const char *tag, const char *type)
{
	if (soap_out___ns2__getMessage(soap, tag ? tag : "-ns2:getMessage", -2, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns2__getMessage * SOAP_FMAC4 soap_get___ns2__getMessage(struct soap *soap, struct __ns2__getMessage *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns2__getMessage(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns2__postCAP(struct soap *soap, struct __ns2__postCAP *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns2__postCAPRequestTypeDef = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns2__postCAP(struct soap *soap, const struct __ns2__postCAP *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_ns2__postCAPRequestTypeDef(soap, &a->ns2__postCAPRequestTypeDef);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns2__postCAP(struct soap *soap, const char *tag, int id, const struct __ns2__postCAP *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (!type)
		type = "-ns2:postCAP";
	if (soap_out_PointerTo_ns2__postCAPRequestTypeDef(soap, "ns2:postCAPRequestTypeDef", -1, &a->ns2__postCAPRequestTypeDef, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns2__postCAP * SOAP_FMAC4 soap_in___ns2__postCAP(struct soap *soap, const char *tag, struct __ns2__postCAP *a, const char *type)
{
	size_t soap_flag_ns2__postCAPRequestTypeDef = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns2__postCAP*)soap_id_enter(soap, "", a, SOAP_TYPE___ns2__postCAP, sizeof(struct __ns2__postCAP), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns2__postCAP(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns2__postCAPRequestTypeDef && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTo_ns2__postCAPRequestTypeDef(soap, "ns2:postCAPRequestTypeDef", &a->ns2__postCAPRequestTypeDef, ""))
				{	soap_flag_ns2__postCAPRequestTypeDef--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH && soap_flag)
			{	soap->error = SOAP_OK;
				break;
			}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC1 struct __ns2__postCAP * SOAP_FMAC2 soap_instantiate___ns2__postCAP(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns2__postCAP(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct __ns2__postCAP *p;
	size_t k = sizeof(struct __ns2__postCAP);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE___ns2__postCAP, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct __ns2__postCAP);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct __ns2__postCAP, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct __ns2__postCAP location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns2__postCAP(struct soap *soap, const struct __ns2__postCAP *a, const char *tag, const char *type)
{
	if (soap_out___ns2__postCAP(soap, tag ? tag : "-ns2:postCAP", -2, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns2__postCAP * SOAP_FMAC4 soap_get___ns2__postCAP(struct soap *soap, struct __ns2__postCAP *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns2__postCAP(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns2__getRequest(struct soap *soap, struct __ns2__getRequest *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns2__getRequestTypeDef = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns2__getRequest(struct soap *soap, const struct __ns2__getRequest *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTons3__requestParameterList(soap, &a->ns2__getRequestTypeDef);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns2__getRequest(struct soap *soap, const char *tag, int id, const struct __ns2__getRequest *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (!type)
		type = "-ns2:getRequest";
	if (soap_out_PointerTons3__requestParameterList(soap, "ns2:getRequestTypeDef", -1, &a->ns2__getRequestTypeDef, "ns3:requestParameterList"))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns2__getRequest * SOAP_FMAC4 soap_in___ns2__getRequest(struct soap *soap, const char *tag, struct __ns2__getRequest *a, const char *type)
{
	size_t soap_flag_ns2__getRequestTypeDef = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns2__getRequest*)soap_id_enter(soap, "", a, SOAP_TYPE___ns2__getRequest, sizeof(struct __ns2__getRequest), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns2__getRequest(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns2__getRequestTypeDef && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTons3__requestParameterList(soap, "ns2:getRequestTypeDef", &a->ns2__getRequestTypeDef, "ns3:requestParameterList"))
				{	soap_flag_ns2__getRequestTypeDef--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH && soap_flag)
			{	soap->error = SOAP_OK;
				break;
			}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC1 struct __ns2__getRequest * SOAP_FMAC2 soap_instantiate___ns2__getRequest(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns2__getRequest(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct __ns2__getRequest *p;
	size_t k = sizeof(struct __ns2__getRequest);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE___ns2__getRequest, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct __ns2__getRequest);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct __ns2__getRequest, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct __ns2__getRequest location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns2__getRequest(struct soap *soap, const struct __ns2__getRequest *a, const char *tag, const char *type)
{
	if (soap_out___ns2__getRequest(soap, tag ? tag : "-ns2:getRequest", -2, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns2__getRequest * SOAP_FMAC4 soap_get___ns2__getRequest(struct soap *soap, struct __ns2__getRequest *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns2__getRequest(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns2__CAPServiceException = NULL;
	a->__type = 0;
	a->fault = NULL;
	a->__any = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Detail(struct soap *soap, const struct SOAP_ENV__Detail *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_ns2__CAPServiceException(soap, &a->ns2__CAPServiceException);
	soap_markelement(soap, a->fault, a->__type);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Detail(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Detail *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Detail), type))
		return soap->error;
	if (soap_out_PointerTo_ns2__CAPServiceException(soap, "ns2:CAPServiceException", -1, &a->ns2__CAPServiceException, ""))
		return soap->error;
	if (soap_putelement(soap, a->fault, "fault", -1, a->__type))
		return soap->error;
	if (soap_outliteral(soap, "-any", (char*const*)&a->__any, NULL))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_in_SOAP_ENV__Detail(struct soap *soap, const char *tag, struct SOAP_ENV__Detail *a, const char *type)
{
	size_t soap_flag_ns2__CAPServiceException = 1;
	size_t soap_flag_fault = 1;
	size_t soap_flag___any = 1;
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (struct SOAP_ENV__Detail*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Detail(soap, a);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns2__CAPServiceException && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTo_ns2__CAPServiceException(soap, "ns2:CAPServiceException", &a->ns2__CAPServiceException, ""))
				{	soap_flag_ns2__CAPServiceException--;
					continue;
				}
			}
			if (soap_flag_fault && soap->error == SOAP_TAG_MISMATCH)
			{	if ((a->fault = soap_getelement(soap, "fault", &a->__type)))
				{	soap_flag_fault = 0;
					continue;
				}
			}
			if (soap_flag___any && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_inliteral(soap, "-any", (char**)&a->__any))
				{	soap_flag___any--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Detail *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Detail, SOAP_TYPE_SOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct SOAP_ENV__Detail * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Detail(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Detail(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct SOAP_ENV__Detail *p;
	size_t k = sizeof(struct SOAP_ENV__Detail);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_SOAP_ENV__Detail, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct SOAP_ENV__Detail);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct SOAP_ENV__Detail, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct SOAP_ENV__Detail location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Detail(struct soap *soap, const struct SOAP_ENV__Detail *a, const char *tag, const char *type)
{
	if (soap_out_SOAP_ENV__Detail(soap, tag ? tag : "SOAP-ENV:Detail", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_get_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Detail(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns2__CAPHeaderTypeDef = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Header(struct soap *soap, const struct SOAP_ENV__Header *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_ns2__CAPHeaderTypeDef(soap, &a->ns2__CAPHeaderTypeDef);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Header(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Header *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Header), type))
		return soap->error;
	soap->mustUnderstand = 1;
	if (soap_out_PointerTo_ns2__CAPHeaderTypeDef(soap, "ns2:CAPHeaderTypeDef", -1, &a->ns2__CAPHeaderTypeDef, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_in_SOAP_ENV__Header(struct soap *soap, const char *tag, struct SOAP_ENV__Header *a, const char *type)
{
	size_t soap_flag_ns2__CAPHeaderTypeDef = 1;
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (struct SOAP_ENV__Header*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Header, sizeof(struct SOAP_ENV__Header), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Header(soap, a);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns2__CAPHeaderTypeDef && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTo_ns2__CAPHeaderTypeDef(soap, "ns2:CAPHeaderTypeDef", &a->ns2__CAPHeaderTypeDef, ""))
				{	soap_flag_ns2__CAPHeaderTypeDef--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Header *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Header, SOAP_TYPE_SOAP_ENV__Header, sizeof(struct SOAP_ENV__Header), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct SOAP_ENV__Header * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Header(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Header(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct SOAP_ENV__Header *p;
	size_t k = sizeof(struct SOAP_ENV__Header);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_SOAP_ENV__Header, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct SOAP_ENV__Header);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct SOAP_ENV__Header, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct SOAP_ENV__Header location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Header(struct soap *soap, const struct SOAP_ENV__Header *a, const char *tag, const char *type)
{
	if (soap_out_SOAP_ENV__Header(soap, tag ? tag : "SOAP-ENV:Header", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_get_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Header(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Reason))
		soap_serialize_SOAP_ENV__Reason(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Reason(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Reason *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Reason, NULL);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Reason(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Reason(struct soap *soap, const char *tag, struct SOAP_ENV__Reason **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Reason **)soap_malloc(soap, sizeof(struct SOAP_ENV__Reason *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Reason(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Reason **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Reason, sizeof(struct SOAP_ENV__Reason), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerToSOAP_ENV__Reason(soap, tag ? tag : "SOAP-ENV:Reason", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Reason(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Detail))
		soap_serialize_SOAP_ENV__Detail(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Detail(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Detail *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Detail, NULL);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Detail(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Detail(struct soap *soap, const char *tag, struct SOAP_ENV__Detail **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Detail **)soap_malloc(soap, sizeof(struct SOAP_ENV__Detail *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Detail(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Detail **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerToSOAP_ENV__Detail(soap, tag ? tag : "SOAP-ENV:Detail", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Detail(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Code))
		soap_serialize_SOAP_ENV__Code(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Code(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Code *const*a, const char *type)
{
	char *mark;
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Code, &mark);
	if (id < 0)
		return soap->error;
	(void)soap_out_SOAP_ENV__Code(soap, tag, id, *a, type);
	soap_unmark(soap, mark);
	return soap->error;
}

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Code(struct soap *soap, const char *tag, struct SOAP_ENV__Code **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Code **)soap_malloc(soap, sizeof(struct SOAP_ENV__Code *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Code(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Code **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerToSOAP_ENV__Code(soap, tag ? tag : "SOAP-ENV:Code", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Code(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns2__postCAPRequestTypeDef(struct soap *soap, _ns2__postCAPRequestTypeDef *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__ns2__postCAPRequestTypeDef))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns2__postCAPRequestTypeDef(struct soap *soap, const char *tag, int id, _ns2__postCAPRequestTypeDef *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns2__postCAPRequestTypeDef, NULL);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, (*a)->soap_type() == SOAP_TYPE__ns2__postCAPRequestTypeDef ? type : NULL);
}

SOAP_FMAC3 _ns2__postCAPRequestTypeDef ** SOAP_FMAC4 soap_in_PointerTo_ns2__postCAPRequestTypeDef(struct soap *soap, const char *tag, _ns2__postCAPRequestTypeDef **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns2__postCAPRequestTypeDef **)soap_malloc(soap, sizeof(_ns2__postCAPRequestTypeDef *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns2__postCAPRequestTypeDef *)soap_instantiate__ns2__postCAPRequestTypeDef(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
		{	*a = NULL;
			return NULL;
		}
	}
	else
	{	a = (_ns2__postCAPRequestTypeDef **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns2__postCAPRequestTypeDef, sizeof(_ns2__postCAPRequestTypeDef), 0, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns2__postCAPRequestTypeDef(struct soap *soap, _ns2__postCAPRequestTypeDef *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTo_ns2__postCAPRequestTypeDef(soap, tag ? tag : "ns2:postCAPRequestTypeDef", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns2__postCAPRequestTypeDef ** SOAP_FMAC4 soap_get_PointerTo_ns2__postCAPRequestTypeDef(struct soap *soap, _ns2__postCAPRequestTypeDef **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns2__postCAPRequestTypeDef(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__requestParameterList(struct soap *soap, ns3__requestParameterList *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns3__requestParameterList))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__requestParameterList(struct soap *soap, const char *tag, int id, ns3__requestParameterList *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns3__requestParameterList, NULL);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, (*a)->soap_type() == SOAP_TYPE_ns3__requestParameterList ? type : NULL);
}

SOAP_FMAC3 ns3__requestParameterList ** SOAP_FMAC4 soap_in_PointerTons3__requestParameterList(struct soap *soap, const char *tag, ns3__requestParameterList **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns3__requestParameterList **)soap_malloc(soap, sizeof(ns3__requestParameterList *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns3__requestParameterList *)soap_instantiate_ns3__requestParameterList(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
		{	*a = NULL;
			return NULL;
		}
	}
	else
	{	a = (ns3__requestParameterList **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns3__requestParameterList, sizeof(ns3__requestParameterList), 0, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__requestParameterList(struct soap *soap, ns3__requestParameterList *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTons3__requestParameterList(soap, tag ? tag : "ns3:requestParameterList", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns3__requestParameterList ** SOAP_FMAC4 soap_get_PointerTons3__requestParameterList(struct soap *soap, ns3__requestParameterList **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons3__requestParameterList(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns2__CAPServiceException(struct soap *soap, _ns2__CAPServiceException *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__ns2__CAPServiceException))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns2__CAPServiceException(struct soap *soap, const char *tag, int id, _ns2__CAPServiceException *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns2__CAPServiceException, NULL);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, (*a)->soap_type() == SOAP_TYPE__ns2__CAPServiceException ? type : NULL);
}

SOAP_FMAC3 _ns2__CAPServiceException ** SOAP_FMAC4 soap_in_PointerTo_ns2__CAPServiceException(struct soap *soap, const char *tag, _ns2__CAPServiceException **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns2__CAPServiceException **)soap_malloc(soap, sizeof(_ns2__CAPServiceException *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns2__CAPServiceException *)soap_instantiate__ns2__CAPServiceException(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
		{	*a = NULL;
			return NULL;
		}
	}
	else
	{	a = (_ns2__CAPServiceException **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns2__CAPServiceException, sizeof(_ns2__CAPServiceException), 0, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns2__CAPServiceException(struct soap *soap, _ns2__CAPServiceException *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTo_ns2__CAPServiceException(soap, tag ? tag : "ns2:CAPServiceException", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns2__CAPServiceException ** SOAP_FMAC4 soap_get_PointerTo_ns2__CAPServiceException(struct soap *soap, _ns2__CAPServiceException **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns2__CAPServiceException(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns2__CAPHeaderTypeDef(struct soap *soap, _ns2__CAPHeaderTypeDef *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__ns2__CAPHeaderTypeDef))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns2__CAPHeaderTypeDef(struct soap *soap, const char *tag, int id, _ns2__CAPHeaderTypeDef *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns2__CAPHeaderTypeDef, NULL);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, (*a)->soap_type() == SOAP_TYPE__ns2__CAPHeaderTypeDef ? type : NULL);
}

SOAP_FMAC3 _ns2__CAPHeaderTypeDef ** SOAP_FMAC4 soap_in_PointerTo_ns2__CAPHeaderTypeDef(struct soap *soap, const char *tag, _ns2__CAPHeaderTypeDef **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns2__CAPHeaderTypeDef **)soap_malloc(soap, sizeof(_ns2__CAPHeaderTypeDef *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns2__CAPHeaderTypeDef *)soap_instantiate__ns2__CAPHeaderTypeDef(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
		{	*a = NULL;
			return NULL;
		}
	}
	else
	{	a = (_ns2__CAPHeaderTypeDef **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns2__CAPHeaderTypeDef, sizeof(_ns2__CAPHeaderTypeDef), 0, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns2__CAPHeaderTypeDef(struct soap *soap, _ns2__CAPHeaderTypeDef *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTo_ns2__CAPHeaderTypeDef(soap, tag ? tag : "ns2:CAPHeaderTypeDef", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns2__CAPHeaderTypeDef ** SOAP_FMAC4 soap_get_PointerTo_ns2__CAPHeaderTypeDef(struct soap *soap, _ns2__CAPHeaderTypeDef **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns2__CAPHeaderTypeDef(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToint(struct soap *soap, int *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	(void)soap_reference(soap, *a, SOAP_TYPE_int);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToint(struct soap *soap, const char *tag, int id, int *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_int, NULL);
	if (id < 0)
		return soap->error;
	return soap_out_int(soap, tag, id, *a, type);
}

SOAP_FMAC3 int ** SOAP_FMAC4 soap_in_PointerToint(struct soap *soap, const char *tag, int **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (int **)soap_malloc(soap, sizeof(int *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_int(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (int **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_int, sizeof(int), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToint(struct soap *soap, int *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerToint(soap, tag ? tag : "int", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int ** SOAP_FMAC4 soap_get_PointerToint(struct soap *soap, int **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToint(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns5__alert(struct soap *soap, _ns5__alert *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__ns5__alert))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns5__alert(struct soap *soap, const char *tag, int id, _ns5__alert *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns5__alert, NULL);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, (*a)->soap_type() == SOAP_TYPE__ns5__alert ? type : NULL);
}

SOAP_FMAC3 _ns5__alert ** SOAP_FMAC4 soap_in_PointerTo_ns5__alert(struct soap *soap, const char *tag, _ns5__alert **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns5__alert **)soap_malloc(soap, sizeof(_ns5__alert *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns5__alert *)soap_instantiate__ns5__alert(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
		{	*a = NULL;
			return NULL;
		}
	}
	else
	{	a = (_ns5__alert **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns5__alert, sizeof(_ns5__alert), 0, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns5__alert(struct soap *soap, _ns5__alert *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTo_ns5__alert(soap, tag ? tag : "ns5:alert", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns5__alert ** SOAP_FMAC4 soap_get_PointerTo_ns5__alert(struct soap *soap, _ns5__alert **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns5__alert(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToxsd__decimal(struct soap *soap, std::string *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_xsd__decimal))
		soap_serialize_xsd__decimal(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToxsd__decimal(struct soap *soap, const char *tag, int id, std::string *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_xsd__decimal, NULL);
	if (id < 0)
		return soap->error;
	return soap_out_xsd__decimal(soap, tag, id, *a, type);
}

SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerToxsd__decimal(struct soap *soap, const char *tag, std::string **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (std::string **)soap_malloc(soap, sizeof(std::string *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_xsd__decimal(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (std::string **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_xsd__decimal, sizeof(std::string), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToxsd__decimal(struct soap *soap, std::string *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerToxsd__decimal(soap, tag ? tag : "xsd:decimal", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerToxsd__decimal(struct soap *soap, std::string **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToxsd__decimal(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToxsd__integer(struct soap *soap, std::string *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_xsd__integer))
		soap_serialize_xsd__integer(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToxsd__integer(struct soap *soap, const char *tag, int id, std::string *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_xsd__integer, NULL);
	if (id < 0)
		return soap->error;
	return soap_out_xsd__integer(soap, tag, id, *a, type);
}

SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerToxsd__integer(struct soap *soap, const char *tag, std::string **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (std::string **)soap_malloc(soap, sizeof(std::string *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_xsd__integer(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (std::string **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_xsd__integer, sizeof(std::string), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToxsd__integer(struct soap *soap, std::string *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerToxsd__integer(soap, tag ? tag : "xsd:integer", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerToxsd__integer(struct soap *soap, std::string **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToxsd__integer(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToxsd__anyURI(struct soap *soap, std::string *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_xsd__anyURI))
		soap_serialize_xsd__anyURI(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToxsd__anyURI(struct soap *soap, const char *tag, int id, std::string *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_xsd__anyURI, NULL);
	if (id < 0)
		return soap->error;
	return soap_out_xsd__anyURI(soap, tag, id, *a, type);
}

SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerToxsd__anyURI(struct soap *soap, const char *tag, std::string **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (std::string **)soap_malloc(soap, sizeof(std::string *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_xsd__anyURI(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (std::string **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_xsd__anyURI, sizeof(std::string), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToxsd__anyURI(struct soap *soap, std::string *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerToxsd__anyURI(soap, tag ? tag : "xsd:anyURI", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerToxsd__anyURI(struct soap *soap, std::string **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToxsd__anyURI(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTodateTime(struct soap *soap, time_t *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	(void)soap_reference(soap, *a, SOAP_TYPE_dateTime);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTodateTime(struct soap *soap, const char *tag, int id, time_t *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_dateTime, NULL);
	if (id < 0)
		return soap->error;
	return soap_out_dateTime(soap, tag, id, *a, type);
}

SOAP_FMAC3 time_t ** SOAP_FMAC4 soap_in_PointerTodateTime(struct soap *soap, const char *tag, time_t **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (time_t **)soap_malloc(soap, sizeof(time_t *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_dateTime(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (time_t **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_dateTime, sizeof(time_t), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTodateTime(struct soap *soap, time_t *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTodateTime(soap, tag ? tag : "dateTime", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 time_t ** SOAP_FMAC4 soap_get_PointerTodateTime(struct soap *soap, time_t **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTodateTime(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToxsd__language(struct soap *soap, std::string *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_xsd__language))
		soap_serialize_xsd__language(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToxsd__language(struct soap *soap, const char *tag, int id, std::string *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_xsd__language, NULL);
	if (id < 0)
		return soap->error;
	return soap_out_xsd__language(soap, tag, id, *a, type);
}

SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerToxsd__language(struct soap *soap, const char *tag, std::string **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (std::string **)soap_malloc(soap, sizeof(std::string *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_xsd__language(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (std::string **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_xsd__language, sizeof(std::string), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToxsd__language(struct soap *soap, std::string *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerToxsd__language(soap, tag ? tag : "xsd:language", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerToxsd__language(struct soap *soap, std::string **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToxsd__language(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons4__subParameterListItem(struct soap *soap, ns4__subParameterListItem *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns4__subParameterListItem))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons4__subParameterListItem(struct soap *soap, const char *tag, int id, ns4__subParameterListItem *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns4__subParameterListItem, NULL);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, (*a)->soap_type() == SOAP_TYPE_ns4__subParameterListItem ? type : NULL);
}

SOAP_FMAC3 ns4__subParameterListItem ** SOAP_FMAC4 soap_in_PointerTons4__subParameterListItem(struct soap *soap, const char *tag, ns4__subParameterListItem **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns4__subParameterListItem **)soap_malloc(soap, sizeof(ns4__subParameterListItem *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns4__subParameterListItem *)soap_instantiate_ns4__subParameterListItem(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
		{	*a = NULL;
			return NULL;
		}
	}
	else
	{	a = (ns4__subParameterListItem **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns4__subParameterListItem, sizeof(ns4__subParameterListItem), 0, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons4__subParameterListItem(struct soap *soap, ns4__subParameterListItem *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTons4__subParameterListItem(soap, tag ? tag : "ns4:subParameterListItem", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns4__subParameterListItem ** SOAP_FMAC4 soap_get_PointerTons4__subParameterListItem(struct soap *soap, ns4__subParameterListItem **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons4__subParameterListItem(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns4__parameterListItem(struct soap *soap, _ns4__parameterListItem *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__ns4__parameterListItem))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns4__parameterListItem(struct soap *soap, const char *tag, int id, _ns4__parameterListItem *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns4__parameterListItem, NULL);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, (*a)->soap_type() == SOAP_TYPE__ns4__parameterListItem ? type : NULL);
}

SOAP_FMAC3 _ns4__parameterListItem ** SOAP_FMAC4 soap_in_PointerTo_ns4__parameterListItem(struct soap *soap, const char *tag, _ns4__parameterListItem **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns4__parameterListItem **)soap_malloc(soap, sizeof(_ns4__parameterListItem *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns4__parameterListItem *)soap_instantiate__ns4__parameterListItem(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
		{	*a = NULL;
			return NULL;
		}
	}
	else
	{	a = (_ns4__parameterListItem **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns4__parameterListItem, sizeof(_ns4__parameterListItem), 0, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns4__parameterListItem(struct soap *soap, _ns4__parameterListItem *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTo_ns4__parameterListItem(soap, tag ? tag : "ns4:parameterListItem", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns4__parameterListItem ** SOAP_FMAC4 soap_get_PointerTo_ns4__parameterListItem(struct soap *soap, _ns4__parameterListItem **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns4__parameterListItem(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__parameterListItem(struct soap *soap, ns3__parameterListItem *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns3__parameterListItem))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__parameterListItem(struct soap *soap, const char *tag, int id, ns3__parameterListItem *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns3__parameterListItem, NULL);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, (*a)->soap_type() == SOAP_TYPE_ns3__parameterListItem ? type : NULL);
}

SOAP_FMAC3 ns3__parameterListItem ** SOAP_FMAC4 soap_in_PointerTons3__parameterListItem(struct soap *soap, const char *tag, ns3__parameterListItem **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns3__parameterListItem **)soap_malloc(soap, sizeof(ns3__parameterListItem *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns3__parameterListItem *)soap_instantiate_ns3__parameterListItem(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
		{	*a = NULL;
			return NULL;
		}
	}
	else
	{	a = (ns3__parameterListItem **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns3__parameterListItem, sizeof(ns3__parameterListItem), 0, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__parameterListItem(struct soap *soap, ns3__parameterListItem *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTons3__parameterListItem(soap, tag ? tag : "ns3:parameterListItem", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns3__parameterListItem ** SOAP_FMAC4 soap_get_PointerTons3__parameterListItem(struct soap *soap, ns3__parameterListItem **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons3__parameterListItem(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTostd__string(struct soap *soap, std::string *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_std__string))
		soap_serialize_std__string(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTostd__string(struct soap *soap, const char *tag, int id, std::string *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_std__string, NULL);
	if (id < 0)
		return soap->error;
	return soap_out_std__string(soap, tag, id, *a, type);
}

SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerTostd__string(struct soap *soap, const char *tag, std::string **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (std::string **)soap_malloc(soap, sizeof(std::string *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_std__string(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (std::string **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_std__string, sizeof(std::string), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTostd__string(struct soap *soap, std::string *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTostd__string(soap, tag ? tag : "string", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerTostd__string(struct soap *soap, std::string **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTostd__string(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__QName(struct soap *soap, char *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	(void)soap_reference(soap, *a, SOAP_TYPE__QName);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__QName(struct soap *soap, const char *tag, int id, char *const*a, const char *type)
{
	return soap_outstring(soap, tag, id, a, type, SOAP_TYPE__QName);
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in__QName(struct soap *soap, const char *tag, char **a, const char *type)
{
	a = soap_instring(soap, tag, a, type, SOAP_TYPE__QName, 2, 0, -1, NULL);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put__QName(struct soap *soap, char *const*a, const char *tag, const char *type)
{
	if (soap_out__QName(soap, tag ? tag : "QName", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get__QName(struct soap *soap, char **p, const char *tag, const char *type)
{
	if ((p = soap_in__QName(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_string(struct soap *soap, char *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	(void)soap_reference(soap, *a, SOAP_TYPE_string);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_string(struct soap *soap, const char *tag, int id, char *const*a, const char *type)
{
	return soap_outstring(soap, tag, id, a, type, SOAP_TYPE_string);
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_string(struct soap *soap, const char *tag, char **a, const char *type)
{
	a = soap_instring(soap, tag, a, type, SOAP_TYPE_string, 1, 0, -1, NULL);
	return a;
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_new_string(struct soap *soap, int n)
{
	char * *a = static_cast<char * *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(char *)));
	for (char * *p = a; p && n--; ++p)
		soap_default_string(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_string(struct soap *soap, char *const*a, const char *tag, const char *type)
{
	if (soap_out_string(soap, tag ? tag : "string", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_string(struct soap *soap, char **p, const char *tag, const char *type)
{
	if ((p = soap_in_string(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTo_ns5__alert(struct soap *soap, std::vector<_ns5__alert *> *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->clear();
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTo_ns5__alert(struct soap *soap, const std::vector<_ns5__alert *> *a)
{
	(void)soap; (void)a;/* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	for (std::vector<_ns5__alert *> ::const_iterator i = a->begin(); i != a->end(); ++i)
		soap_serialize_PointerTo_ns5__alert(soap, &(*i));
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTo_ns5__alert(struct soap *soap, const char *tag, int id, const std::vector<_ns5__alert *> *a, const char *type)
{
	(void)id; (void)type; /* appease -Wall -Werror */
	for (std::vector<_ns5__alert *> ::const_iterator i = a->begin(); i != a->end(); ++i)
	{
		if (soap_out_PointerTo_ns5__alert(soap, tag, id, &(*i), ""))
			return soap->error;
	}
	return SOAP_OK;
}

SOAP_FMAC3 std::vector<_ns5__alert *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTo_ns5__alert(struct soap *soap, const char *tag, std::vector<_ns5__alert *> *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	short soap_flag;
	for (soap_flag = 0;; soap_flag = 1)
	{
		if (tag && *tag != '-')
		{	if (soap_element_begin_in(soap, tag, 1, NULL))
				break;
			soap_revert(soap);
		}
		if (!a && !(a = soap_new_std__vectorTemplateOfPointerTo_ns5__alert(soap)))
			return NULL;
		else if (static_cast<size_t>(a->size()) > soap->maxoccurs)
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
		_ns5__alert *n;
		n = NULL;
		if (tag && *tag != '-' && (*soap->id || *soap->href == '#'))
		{	if (!soap_id_forward(soap, *soap->id?soap->id:soap->href, a, static_cast<size_t>(a->size()), SOAP_TYPE__ns5__alert, SOAP_TYPE_std__vectorTemplateOfPointerTo_ns5__alert, sizeof(_ns5__alert), 1, soap_finsert, soap_fbase))
				break;
			if (!soap_in_PointerTo_ns5__alert(soap, tag, NULL, ""))
				break;
		}
		else
		{	if (!soap_in_PointerTo_ns5__alert(soap, tag, &n, ""))
				break;
		}
		a->insert(a->end(), n);
		if (!tag || *tag == '-')
			return a;
	}
	if (soap_flag && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
	{	soap->error = SOAP_OK;
		return a;
	}
	return NULL;
}

SOAP_FMAC1 std::vector<_ns5__alert *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTo_ns5__alert(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__vectorTemplateOfPointerTo_ns5__alert(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	std::vector<_ns5__alert *> *p;
	size_t k = sizeof(std::vector<_ns5__alert *> );
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_std__vectorTemplateOfPointerTo_ns5__alert, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, std::vector<_ns5__alert *> );
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, std::vector<_ns5__alert *> , n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated std::vector<_ns5__alert *>  location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOf_XML(struct soap *soap, std::vector<char *> *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->clear();
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOf_XML(struct soap *soap, const std::vector<char *> *a)
{
	(void)soap; (void)a;/* appease -Wall -Werror */
#ifndef WITH_NOIDREF
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOf_XML(struct soap *soap, const char *tag, int id, const std::vector<char *> *a, const char *type)
{
	(void)id; (void)type; /* appease -Wall -Werror */
	for (std::vector<char *> ::const_iterator i = a->begin(); i != a->end(); ++i)
	{
		if (soap_outliteral(soap, tag, (char*const*)&(*i), NULL))
			return soap->error;
	}
	return SOAP_OK;
}

SOAP_FMAC3 std::vector<char *> * SOAP_FMAC4 soap_in_std__vectorTemplateOf_XML(struct soap *soap, const char *tag, std::vector<char *> *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	short soap_flag;
	for (soap_flag = 0;; soap_flag = 1)
	{
		if (tag && *tag != '-')
		{	if (soap_element_begin_in(soap, tag, 1, NULL))
				break;
			soap_revert(soap);
		}
		if (!a && !(a = soap_new_std__vectorTemplateOf_XML(soap)))
			return NULL;
		else if (static_cast<size_t>(a->size()) > soap->maxoccurs)
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
		char *n;
		n = NULL;
		if (tag && *tag != '-' && (*soap->id || *soap->href == '#'))
		{	if (!soap_id_forward(soap, *soap->id?soap->id:soap->href, a, static_cast<size_t>(a->size()), SOAP_TYPE__XML, SOAP_TYPE_std__vectorTemplateOf_XML, sizeof(char *), 1, soap_finsert, soap_fbase))
				break;
			if (!soap_inliteral(soap, tag, NULL))
				break;
		}
		else
		{	if (!soap_inliteral(soap, tag, &n))
				break;
		}
		a->insert(a->end(), n);
		if (!tag || *tag == '-')
			return a;
	}
	if (soap_flag && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
	{	soap->error = SOAP_OK;
		return a;
	}
	return NULL;
}

SOAP_FMAC1 std::vector<char *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOf_XML(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__vectorTemplateOf_XML(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	std::vector<char *> *p;
	size_t k = sizeof(std::vector<char *> );
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_std__vectorTemplateOf_XML, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, std::vector<char *> );
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, std::vector<char *> , n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated std::vector<char *>  location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOf_ns5__alert_info(struct soap *soap, std::vector<_ns5__alert_info> *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->clear();
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOf_ns5__alert_info(struct soap *soap, const std::vector<_ns5__alert_info> *a)
{
	(void)soap; (void)a;/* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	for (std::vector<_ns5__alert_info> ::const_iterator i = a->begin(); i != a->end(); ++i)
		(*i).soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOf_ns5__alert_info(struct soap *soap, const char *tag, int id, const std::vector<_ns5__alert_info> *a, const char *type)
{
	(void)id; (void)type; /* appease -Wall -Werror */
	for (std::vector<_ns5__alert_info> ::const_iterator i = a->begin(); i != a->end(); ++i)
	{
		if ((*i).soap_out(soap, tag, id, ""))
			return soap->error;
	}
	return SOAP_OK;
}

SOAP_FMAC3 std::vector<_ns5__alert_info> * SOAP_FMAC4 soap_in_std__vectorTemplateOf_ns5__alert_info(struct soap *soap, const char *tag, std::vector<_ns5__alert_info> *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	short soap_flag;
	for (soap_flag = 0;; soap_flag = 1)
	{
		if (tag && *tag != '-')
		{	if (soap_element_begin_in(soap, tag, 1, NULL))
				break;
			soap_revert(soap);
		}
		if (!a && !(a = soap_new_std__vectorTemplateOf_ns5__alert_info(soap)))
			return NULL;
		else if (static_cast<size_t>(a->size()) > soap->maxoccurs)
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
		_ns5__alert_info n;
		n.soap_default(soap);
		short soap_shaky = soap_begin_shaky(soap);
		if (tag && *tag != '-' && (*soap->id || *soap->href == '#'))
		{	if (!soap_id_forward(soap, *soap->id?soap->id:soap->href, a, static_cast<size_t>(a->size()), SOAP_TYPE__ns5__alert_info, SOAP_TYPE_std__vectorTemplateOf_ns5__alert_info, sizeof(_ns5__alert_info), 0, soap_finsert, soap_fbase))
				break;
			if (!soap_in__ns5__alert_info(soap, tag, NULL, ""))
				break;
		}
		else
		{	if (!soap_in__ns5__alert_info(soap, tag, &n, ""))
				break;
		}
		soap_end_shaky(soap, soap_shaky);
		if (a->size())
		{	const void *p = &*a->begin();
			soap_update_pointers(soap, (const char*)&(*a->insert(a->end(), n)), (const char*)&n, sizeof(_ns5__alert_info));
			if (p != &*a->begin())
			{	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container capacity increased: updating pointers\n"));
				soap_update_pointers(soap, (const char*)&*a->begin(), (const char*)p, (a->size() - 1) * sizeof(_ns5__alert_info));
			}
		}
		else
		{	soap_update_pointers(soap, (const char*)&(*a->insert(a->end(), n)), (const char*)&n, sizeof(_ns5__alert_info));
		}
		if (!tag || *tag == '-')
			return a;
	}
	if (soap_flag && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
	{	soap->error = SOAP_OK;
		return a;
	}
	return NULL;
}

SOAP_FMAC1 std::vector<_ns5__alert_info>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOf_ns5__alert_info(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__vectorTemplateOf_ns5__alert_info(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	std::vector<_ns5__alert_info> *p;
	size_t k = sizeof(std::vector<_ns5__alert_info> );
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_std__vectorTemplateOf_ns5__alert_info, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, std::vector<_ns5__alert_info> );
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, std::vector<_ns5__alert_info> , n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated std::vector<_ns5__alert_info>  location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOf_ns5__alert_info_area(struct soap *soap, std::vector<_ns5__alert_info_area> *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->clear();
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOf_ns5__alert_info_area(struct soap *soap, const std::vector<_ns5__alert_info_area> *a)
{
	(void)soap; (void)a;/* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	for (std::vector<_ns5__alert_info_area> ::const_iterator i = a->begin(); i != a->end(); ++i)
		(*i).soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOf_ns5__alert_info_area(struct soap *soap, const char *tag, int id, const std::vector<_ns5__alert_info_area> *a, const char *type)
{
	(void)id; (void)type; /* appease -Wall -Werror */
	for (std::vector<_ns5__alert_info_area> ::const_iterator i = a->begin(); i != a->end(); ++i)
	{
		if ((*i).soap_out(soap, tag, id, ""))
			return soap->error;
	}
	return SOAP_OK;
}

SOAP_FMAC3 std::vector<_ns5__alert_info_area> * SOAP_FMAC4 soap_in_std__vectorTemplateOf_ns5__alert_info_area(struct soap *soap, const char *tag, std::vector<_ns5__alert_info_area> *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	short soap_flag;
	for (soap_flag = 0;; soap_flag = 1)
	{
		if (tag && *tag != '-')
		{	if (soap_element_begin_in(soap, tag, 1, NULL))
				break;
			soap_revert(soap);
		}
		if (!a && !(a = soap_new_std__vectorTemplateOf_ns5__alert_info_area(soap)))
			return NULL;
		else if (static_cast<size_t>(a->size()) > soap->maxoccurs)
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
		_ns5__alert_info_area n;
		n.soap_default(soap);
		short soap_shaky = soap_begin_shaky(soap);
		if (tag && *tag != '-' && (*soap->id || *soap->href == '#'))
		{	if (!soap_id_forward(soap, *soap->id?soap->id:soap->href, a, static_cast<size_t>(a->size()), SOAP_TYPE__ns5__alert_info_area, SOAP_TYPE_std__vectorTemplateOf_ns5__alert_info_area, sizeof(_ns5__alert_info_area), 0, soap_finsert, soap_fbase))
				break;
			if (!soap_in__ns5__alert_info_area(soap, tag, NULL, ""))
				break;
		}
		else
		{	if (!soap_in__ns5__alert_info_area(soap, tag, &n, ""))
				break;
		}
		soap_end_shaky(soap, soap_shaky);
		if (a->size())
		{	const void *p = &*a->begin();
			soap_update_pointers(soap, (const char*)&(*a->insert(a->end(), n)), (const char*)&n, sizeof(_ns5__alert_info_area));
			if (p != &*a->begin())
			{	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container capacity increased: updating pointers\n"));
				soap_update_pointers(soap, (const char*)&*a->begin(), (const char*)p, (a->size() - 1) * sizeof(_ns5__alert_info_area));
			}
		}
		else
		{	soap_update_pointers(soap, (const char*)&(*a->insert(a->end(), n)), (const char*)&n, sizeof(_ns5__alert_info_area));
		}
		if (!tag || *tag == '-')
			return a;
	}
	if (soap_flag && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
	{	soap->error = SOAP_OK;
		return a;
	}
	return NULL;
}

SOAP_FMAC1 std::vector<_ns5__alert_info_area>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOf_ns5__alert_info_area(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__vectorTemplateOf_ns5__alert_info_area(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	std::vector<_ns5__alert_info_area> *p;
	size_t k = sizeof(std::vector<_ns5__alert_info_area> );
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_std__vectorTemplateOf_ns5__alert_info_area, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, std::vector<_ns5__alert_info_area> );
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, std::vector<_ns5__alert_info_area> , n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated std::vector<_ns5__alert_info_area>  location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOf_ns5__alert_info_area_geocode(struct soap *soap, std::vector<_ns5__alert_info_area_geocode> *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->clear();
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOf_ns5__alert_info_area_geocode(struct soap *soap, const std::vector<_ns5__alert_info_area_geocode> *a)
{
	(void)soap; (void)a;/* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	for (std::vector<_ns5__alert_info_area_geocode> ::const_iterator i = a->begin(); i != a->end(); ++i)
		(*i).soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOf_ns5__alert_info_area_geocode(struct soap *soap, const char *tag, int id, const std::vector<_ns5__alert_info_area_geocode> *a, const char *type)
{
	(void)id; (void)type; /* appease -Wall -Werror */
	for (std::vector<_ns5__alert_info_area_geocode> ::const_iterator i = a->begin(); i != a->end(); ++i)
	{
		if ((*i).soap_out(soap, tag, id, ""))
			return soap->error;
	}
	return SOAP_OK;
}

SOAP_FMAC3 std::vector<_ns5__alert_info_area_geocode> * SOAP_FMAC4 soap_in_std__vectorTemplateOf_ns5__alert_info_area_geocode(struct soap *soap, const char *tag, std::vector<_ns5__alert_info_area_geocode> *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	short soap_flag;
	for (soap_flag = 0;; soap_flag = 1)
	{
		if (tag && *tag != '-')
		{	if (soap_element_begin_in(soap, tag, 1, NULL))
				break;
			soap_revert(soap);
		}
		if (!a && !(a = soap_new_std__vectorTemplateOf_ns5__alert_info_area_geocode(soap)))
			return NULL;
		else if (static_cast<size_t>(a->size()) > soap->maxoccurs)
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
		_ns5__alert_info_area_geocode n;
		n.soap_default(soap);
		short soap_shaky = soap_begin_shaky(soap);
		if (tag && *tag != '-' && (*soap->id || *soap->href == '#'))
		{	if (!soap_id_forward(soap, *soap->id?soap->id:soap->href, a, static_cast<size_t>(a->size()), SOAP_TYPE__ns5__alert_info_area_geocode, SOAP_TYPE_std__vectorTemplateOf_ns5__alert_info_area_geocode, sizeof(_ns5__alert_info_area_geocode), 0, soap_finsert, soap_fbase))
				break;
			if (!soap_in__ns5__alert_info_area_geocode(soap, tag, NULL, ""))
				break;
		}
		else
		{	if (!soap_in__ns5__alert_info_area_geocode(soap, tag, &n, ""))
				break;
		}
		soap_end_shaky(soap, soap_shaky);
		if (a->size())
		{	const void *p = &*a->begin();
			soap_update_pointers(soap, (const char*)&(*a->insert(a->end(), n)), (const char*)&n, sizeof(_ns5__alert_info_area_geocode));
			if (p != &*a->begin())
			{	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container capacity increased: updating pointers\n"));
				soap_update_pointers(soap, (const char*)&*a->begin(), (const char*)p, (a->size() - 1) * sizeof(_ns5__alert_info_area_geocode));
			}
		}
		else
		{	soap_update_pointers(soap, (const char*)&(*a->insert(a->end(), n)), (const char*)&n, sizeof(_ns5__alert_info_area_geocode));
		}
		if (!tag || *tag == '-')
			return a;
	}
	if (soap_flag && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
	{	soap->error = SOAP_OK;
		return a;
	}
	return NULL;
}

SOAP_FMAC1 std::vector<_ns5__alert_info_area_geocode>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOf_ns5__alert_info_area_geocode(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__vectorTemplateOf_ns5__alert_info_area_geocode(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	std::vector<_ns5__alert_info_area_geocode> *p;
	size_t k = sizeof(std::vector<_ns5__alert_info_area_geocode> );
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_std__vectorTemplateOf_ns5__alert_info_area_geocode, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, std::vector<_ns5__alert_info_area_geocode> );
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, std::vector<_ns5__alert_info_area_geocode> , n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated std::vector<_ns5__alert_info_area_geocode>  location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOf_ns5__alert_info_resource(struct soap *soap, std::vector<_ns5__alert_info_resource> *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->clear();
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOf_ns5__alert_info_resource(struct soap *soap, const std::vector<_ns5__alert_info_resource> *a)
{
	(void)soap; (void)a;/* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	for (std::vector<_ns5__alert_info_resource> ::const_iterator i = a->begin(); i != a->end(); ++i)
		(*i).soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOf_ns5__alert_info_resource(struct soap *soap, const char *tag, int id, const std::vector<_ns5__alert_info_resource> *a, const char *type)
{
	(void)id; (void)type; /* appease -Wall -Werror */
	for (std::vector<_ns5__alert_info_resource> ::const_iterator i = a->begin(); i != a->end(); ++i)
	{
		if ((*i).soap_out(soap, tag, id, ""))
			return soap->error;
	}
	return SOAP_OK;
}

SOAP_FMAC3 std::vector<_ns5__alert_info_resource> * SOAP_FMAC4 soap_in_std__vectorTemplateOf_ns5__alert_info_resource(struct soap *soap, const char *tag, std::vector<_ns5__alert_info_resource> *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	short soap_flag;
	for (soap_flag = 0;; soap_flag = 1)
	{
		if (tag && *tag != '-')
		{	if (soap_element_begin_in(soap, tag, 1, NULL))
				break;
			soap_revert(soap);
		}
		if (!a && !(a = soap_new_std__vectorTemplateOf_ns5__alert_info_resource(soap)))
			return NULL;
		else if (static_cast<size_t>(a->size()) > soap->maxoccurs)
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
		_ns5__alert_info_resource n;
		n.soap_default(soap);
		short soap_shaky = soap_begin_shaky(soap);
		if (tag && *tag != '-' && (*soap->id || *soap->href == '#'))
		{	if (!soap_id_forward(soap, *soap->id?soap->id:soap->href, a, static_cast<size_t>(a->size()), SOAP_TYPE__ns5__alert_info_resource, SOAP_TYPE_std__vectorTemplateOf_ns5__alert_info_resource, sizeof(_ns5__alert_info_resource), 0, soap_finsert, soap_fbase))
				break;
			if (!soap_in__ns5__alert_info_resource(soap, tag, NULL, ""))
				break;
		}
		else
		{	if (!soap_in__ns5__alert_info_resource(soap, tag, &n, ""))
				break;
		}
		soap_end_shaky(soap, soap_shaky);
		if (a->size())
		{	const void *p = &*a->begin();
			soap_update_pointers(soap, (const char*)&(*a->insert(a->end(), n)), (const char*)&n, sizeof(_ns5__alert_info_resource));
			if (p != &*a->begin())
			{	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container capacity increased: updating pointers\n"));
				soap_update_pointers(soap, (const char*)&*a->begin(), (const char*)p, (a->size() - 1) * sizeof(_ns5__alert_info_resource));
			}
		}
		else
		{	soap_update_pointers(soap, (const char*)&(*a->insert(a->end(), n)), (const char*)&n, sizeof(_ns5__alert_info_resource));
		}
		if (!tag || *tag == '-')
			return a;
	}
	if (soap_flag && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
	{	soap->error = SOAP_OK;
		return a;
	}
	return NULL;
}

SOAP_FMAC1 std::vector<_ns5__alert_info_resource>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOf_ns5__alert_info_resource(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__vectorTemplateOf_ns5__alert_info_resource(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	std::vector<_ns5__alert_info_resource> *p;
	size_t k = sizeof(std::vector<_ns5__alert_info_resource> );
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_std__vectorTemplateOf_ns5__alert_info_resource, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, std::vector<_ns5__alert_info_resource> );
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, std::vector<_ns5__alert_info_resource> , n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated std::vector<_ns5__alert_info_resource>  location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOf_ns5__alert_info_parameter(struct soap *soap, std::vector<_ns5__alert_info_parameter> *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->clear();
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOf_ns5__alert_info_parameter(struct soap *soap, const std::vector<_ns5__alert_info_parameter> *a)
{
	(void)soap; (void)a;/* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	for (std::vector<_ns5__alert_info_parameter> ::const_iterator i = a->begin(); i != a->end(); ++i)
		(*i).soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOf_ns5__alert_info_parameter(struct soap *soap, const char *tag, int id, const std::vector<_ns5__alert_info_parameter> *a, const char *type)
{
	(void)id; (void)type; /* appease -Wall -Werror */
	for (std::vector<_ns5__alert_info_parameter> ::const_iterator i = a->begin(); i != a->end(); ++i)
	{
		if ((*i).soap_out(soap, tag, id, ""))
			return soap->error;
	}
	return SOAP_OK;
}

SOAP_FMAC3 std::vector<_ns5__alert_info_parameter> * SOAP_FMAC4 soap_in_std__vectorTemplateOf_ns5__alert_info_parameter(struct soap *soap, const char *tag, std::vector<_ns5__alert_info_parameter> *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	short soap_flag;
	for (soap_flag = 0;; soap_flag = 1)
	{
		if (tag && *tag != '-')
		{	if (soap_element_begin_in(soap, tag, 1, NULL))
				break;
			soap_revert(soap);
		}
		if (!a && !(a = soap_new_std__vectorTemplateOf_ns5__alert_info_parameter(soap)))
			return NULL;
		else if (static_cast<size_t>(a->size()) > soap->maxoccurs)
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
		_ns5__alert_info_parameter n;
		n.soap_default(soap);
		short soap_shaky = soap_begin_shaky(soap);
		if (tag && *tag != '-' && (*soap->id || *soap->href == '#'))
		{	if (!soap_id_forward(soap, *soap->id?soap->id:soap->href, a, static_cast<size_t>(a->size()), SOAP_TYPE__ns5__alert_info_parameter, SOAP_TYPE_std__vectorTemplateOf_ns5__alert_info_parameter, sizeof(_ns5__alert_info_parameter), 0, soap_finsert, soap_fbase))
				break;
			if (!soap_in__ns5__alert_info_parameter(soap, tag, NULL, ""))
				break;
		}
		else
		{	if (!soap_in__ns5__alert_info_parameter(soap, tag, &n, ""))
				break;
		}
		soap_end_shaky(soap, soap_shaky);
		if (a->size())
		{	const void *p = &*a->begin();
			soap_update_pointers(soap, (const char*)&(*a->insert(a->end(), n)), (const char*)&n, sizeof(_ns5__alert_info_parameter));
			if (p != &*a->begin())
			{	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container capacity increased: updating pointers\n"));
				soap_update_pointers(soap, (const char*)&*a->begin(), (const char*)p, (a->size() - 1) * sizeof(_ns5__alert_info_parameter));
			}
		}
		else
		{	soap_update_pointers(soap, (const char*)&(*a->insert(a->end(), n)), (const char*)&n, sizeof(_ns5__alert_info_parameter));
		}
		if (!tag || *tag == '-')
			return a;
	}
	if (soap_flag && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
	{	soap->error = SOAP_OK;
		return a;
	}
	return NULL;
}

SOAP_FMAC1 std::vector<_ns5__alert_info_parameter>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOf_ns5__alert_info_parameter(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__vectorTemplateOf_ns5__alert_info_parameter(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	std::vector<_ns5__alert_info_parameter> *p;
	size_t k = sizeof(std::vector<_ns5__alert_info_parameter> );
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_std__vectorTemplateOf_ns5__alert_info_parameter, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, std::vector<_ns5__alert_info_parameter> );
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, std::vector<_ns5__alert_info_parameter> , n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated std::vector<_ns5__alert_info_parameter>  location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOf_ns5__alert_info_eventCode(struct soap *soap, std::vector<_ns5__alert_info_eventCode> *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->clear();
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOf_ns5__alert_info_eventCode(struct soap *soap, const std::vector<_ns5__alert_info_eventCode> *a)
{
	(void)soap; (void)a;/* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	for (std::vector<_ns5__alert_info_eventCode> ::const_iterator i = a->begin(); i != a->end(); ++i)
		(*i).soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOf_ns5__alert_info_eventCode(struct soap *soap, const char *tag, int id, const std::vector<_ns5__alert_info_eventCode> *a, const char *type)
{
	(void)id; (void)type; /* appease -Wall -Werror */
	for (std::vector<_ns5__alert_info_eventCode> ::const_iterator i = a->begin(); i != a->end(); ++i)
	{
		if ((*i).soap_out(soap, tag, id, ""))
			return soap->error;
	}
	return SOAP_OK;
}

SOAP_FMAC3 std::vector<_ns5__alert_info_eventCode> * SOAP_FMAC4 soap_in_std__vectorTemplateOf_ns5__alert_info_eventCode(struct soap *soap, const char *tag, std::vector<_ns5__alert_info_eventCode> *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	short soap_flag;
	for (soap_flag = 0;; soap_flag = 1)
	{
		if (tag && *tag != '-')
		{	if (soap_element_begin_in(soap, tag, 1, NULL))
				break;
			soap_revert(soap);
		}
		if (!a && !(a = soap_new_std__vectorTemplateOf_ns5__alert_info_eventCode(soap)))
			return NULL;
		else if (static_cast<size_t>(a->size()) > soap->maxoccurs)
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
		_ns5__alert_info_eventCode n;
		n.soap_default(soap);
		short soap_shaky = soap_begin_shaky(soap);
		if (tag && *tag != '-' && (*soap->id || *soap->href == '#'))
		{	if (!soap_id_forward(soap, *soap->id?soap->id:soap->href, a, static_cast<size_t>(a->size()), SOAP_TYPE__ns5__alert_info_eventCode, SOAP_TYPE_std__vectorTemplateOf_ns5__alert_info_eventCode, sizeof(_ns5__alert_info_eventCode), 0, soap_finsert, soap_fbase))
				break;
			if (!soap_in__ns5__alert_info_eventCode(soap, tag, NULL, ""))
				break;
		}
		else
		{	if (!soap_in__ns5__alert_info_eventCode(soap, tag, &n, ""))
				break;
		}
		soap_end_shaky(soap, soap_shaky);
		if (a->size())
		{	const void *p = &*a->begin();
			soap_update_pointers(soap, (const char*)&(*a->insert(a->end(), n)), (const char*)&n, sizeof(_ns5__alert_info_eventCode));
			if (p != &*a->begin())
			{	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container capacity increased: updating pointers\n"));
				soap_update_pointers(soap, (const char*)&*a->begin(), (const char*)p, (a->size() - 1) * sizeof(_ns5__alert_info_eventCode));
			}
		}
		else
		{	soap_update_pointers(soap, (const char*)&(*a->insert(a->end(), n)), (const char*)&n, sizeof(_ns5__alert_info_eventCode));
		}
		if (!tag || *tag == '-')
			return a;
	}
	if (soap_flag && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
	{	soap->error = SOAP_OK;
		return a;
	}
	return NULL;
}

SOAP_FMAC1 std::vector<_ns5__alert_info_eventCode>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOf_ns5__alert_info_eventCode(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__vectorTemplateOf_ns5__alert_info_eventCode(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	std::vector<_ns5__alert_info_eventCode> *p;
	size_t k = sizeof(std::vector<_ns5__alert_info_eventCode> );
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_std__vectorTemplateOf_ns5__alert_info_eventCode, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, std::vector<_ns5__alert_info_eventCode> );
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, std::vector<_ns5__alert_info_eventCode> , n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated std::vector<_ns5__alert_info_eventCode>  location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOf_ns5__alert_info_responseType(struct soap *soap, std::vector<enum _ns5__alert_info_responseType> *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->clear();
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOf_ns5__alert_info_responseType(struct soap *soap, const std::vector<enum _ns5__alert_info_responseType> *a)
{
	(void)soap; (void)a;/* appease -Wall -Werror */
#ifndef WITH_NOIDREF
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOf_ns5__alert_info_responseType(struct soap *soap, const char *tag, int id, const std::vector<enum _ns5__alert_info_responseType> *a, const char *type)
{
	(void)id; (void)type; /* appease -Wall -Werror */
	for (std::vector<enum _ns5__alert_info_responseType> ::const_iterator i = a->begin(); i != a->end(); ++i)
	{
		if (soap_out__ns5__alert_info_responseType(soap, tag, id, &(*i), "ns5:alert-info-responseType"))
			return soap->error;
	}
	return SOAP_OK;
}

SOAP_FMAC3 std::vector<enum _ns5__alert_info_responseType> * SOAP_FMAC4 soap_in_std__vectorTemplateOf_ns5__alert_info_responseType(struct soap *soap, const char *tag, std::vector<enum _ns5__alert_info_responseType> *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	short soap_flag;
	for (soap_flag = 0;; soap_flag = 1)
	{
		if (tag && *tag != '-')
		{	if (soap_element_begin_in(soap, tag, 1, NULL))
				break;
			soap_revert(soap);
		}
		if (!a && !(a = soap_new_std__vectorTemplateOf_ns5__alert_info_responseType(soap)))
			return NULL;
		else if (static_cast<size_t>(a->size()) > soap->maxoccurs)
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
		enum _ns5__alert_info_responseType n;
		soap_default__ns5__alert_info_responseType(soap, &n);
		if (tag && *tag != '-' && (*soap->id || *soap->href == '#'))
		{	if (!soap_id_forward(soap, *soap->id?soap->id:soap->href, a, static_cast<size_t>(a->size()), SOAP_TYPE__ns5__alert_info_responseType, SOAP_TYPE_std__vectorTemplateOf_ns5__alert_info_responseType, sizeof(enum _ns5__alert_info_responseType), 0, soap_finsert, soap_fbase))
				break;
			if (!soap_in__ns5__alert_info_responseType(soap, tag, NULL, "ns5:alert-info-responseType"))
				break;
		}
		else
		{	if (!soap_in__ns5__alert_info_responseType(soap, tag, &n, "ns5:alert-info-responseType"))
				break;
		}
		a->insert(a->end(), n);
		if (!tag || *tag == '-')
			return a;
	}
	if (soap_flag && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
	{	soap->error = SOAP_OK;
		return a;
	}
	return NULL;
}

SOAP_FMAC1 std::vector<enum _ns5__alert_info_responseType>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOf_ns5__alert_info_responseType(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__vectorTemplateOf_ns5__alert_info_responseType(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	std::vector<enum _ns5__alert_info_responseType> *p;
	size_t k = sizeof(std::vector<enum _ns5__alert_info_responseType> );
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_std__vectorTemplateOf_ns5__alert_info_responseType, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, std::vector<enum _ns5__alert_info_responseType> );
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, std::vector<enum _ns5__alert_info_responseType> , n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated std::vector<enum _ns5__alert_info_responseType>  location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOf_ns5__alert_info_category(struct soap *soap, std::vector<enum _ns5__alert_info_category> *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->clear();
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOf_ns5__alert_info_category(struct soap *soap, const std::vector<enum _ns5__alert_info_category> *a)
{
	(void)soap; (void)a;/* appease -Wall -Werror */
#ifndef WITH_NOIDREF
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOf_ns5__alert_info_category(struct soap *soap, const char *tag, int id, const std::vector<enum _ns5__alert_info_category> *a, const char *type)
{
	(void)id; (void)type; /* appease -Wall -Werror */
	for (std::vector<enum _ns5__alert_info_category> ::const_iterator i = a->begin(); i != a->end(); ++i)
	{
		if (soap_out__ns5__alert_info_category(soap, tag, id, &(*i), "ns5:alert-info-category"))
			return soap->error;
	}
	return SOAP_OK;
}

SOAP_FMAC3 std::vector<enum _ns5__alert_info_category> * SOAP_FMAC4 soap_in_std__vectorTemplateOf_ns5__alert_info_category(struct soap *soap, const char *tag, std::vector<enum _ns5__alert_info_category> *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	short soap_flag;
	for (soap_flag = 0;; soap_flag = 1)
	{
		if (tag && *tag != '-')
		{	if (soap_element_begin_in(soap, tag, 1, NULL))
				break;
			soap_revert(soap);
		}
		if (!a && !(a = soap_new_std__vectorTemplateOf_ns5__alert_info_category(soap)))
			return NULL;
		else if (static_cast<size_t>(a->size()) > soap->maxoccurs)
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
		enum _ns5__alert_info_category n;
		soap_default__ns5__alert_info_category(soap, &n);
		if (tag && *tag != '-' && (*soap->id || *soap->href == '#'))
		{	if (!soap_id_forward(soap, *soap->id?soap->id:soap->href, a, static_cast<size_t>(a->size()), SOAP_TYPE__ns5__alert_info_category, SOAP_TYPE_std__vectorTemplateOf_ns5__alert_info_category, sizeof(enum _ns5__alert_info_category), 0, soap_finsert, soap_fbase))
				break;
			if (!soap_in__ns5__alert_info_category(soap, tag, NULL, "ns5:alert-info-category"))
				break;
		}
		else
		{	if (!soap_in__ns5__alert_info_category(soap, tag, &n, "ns5:alert-info-category"))
				break;
		}
		a->insert(a->end(), n);
		if (!tag || *tag == '-')
			return a;
	}
	if (soap_flag && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
	{	soap->error = SOAP_OK;
		return a;
	}
	return NULL;
}

SOAP_FMAC1 std::vector<enum _ns5__alert_info_category>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOf_ns5__alert_info_category(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__vectorTemplateOf_ns5__alert_info_category(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	std::vector<enum _ns5__alert_info_category> *p;
	size_t k = sizeof(std::vector<enum _ns5__alert_info_category> );
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_std__vectorTemplateOf_ns5__alert_info_category, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, std::vector<enum _ns5__alert_info_category> );
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, std::vector<enum _ns5__alert_info_category> , n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated std::vector<enum _ns5__alert_info_category>  location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons4__subParameterListItem(struct soap *soap, std::vector<ns4__subParameterListItem *> *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->clear();
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons4__subParameterListItem(struct soap *soap, const std::vector<ns4__subParameterListItem *> *a)
{
	(void)soap; (void)a;/* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	for (std::vector<ns4__subParameterListItem *> ::const_iterator i = a->begin(); i != a->end(); ++i)
		soap_serialize_PointerTons4__subParameterListItem(soap, &(*i));
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons4__subParameterListItem(struct soap *soap, const char *tag, int id, const std::vector<ns4__subParameterListItem *> *a, const char *type)
{
	(void)id; (void)type; /* appease -Wall -Werror */
	for (std::vector<ns4__subParameterListItem *> ::const_iterator i = a->begin(); i != a->end(); ++i)
	{
		if (soap_out_PointerTons4__subParameterListItem(soap, tag, id, &(*i), "ns4:subParameterListItem"))
			return soap->error;
	}
	return SOAP_OK;
}

SOAP_FMAC3 std::vector<ns4__subParameterListItem *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons4__subParameterListItem(struct soap *soap, const char *tag, std::vector<ns4__subParameterListItem *> *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	short soap_flag;
	for (soap_flag = 0;; soap_flag = 1)
	{
		if (tag && *tag != '-')
		{	if (soap_element_begin_in(soap, tag, 1, NULL))
				break;
			soap_revert(soap);
		}
		if (!a && !(a = soap_new_std__vectorTemplateOfPointerTons4__subParameterListItem(soap)))
			return NULL;
		else if (static_cast<size_t>(a->size()) > soap->maxoccurs)
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
		ns4__subParameterListItem *n;
		n = NULL;
		if (tag && *tag != '-' && (*soap->id || *soap->href == '#'))
		{	if (!soap_id_forward(soap, *soap->id?soap->id:soap->href, a, static_cast<size_t>(a->size()), SOAP_TYPE_ns4__subParameterListItem, SOAP_TYPE_std__vectorTemplateOfPointerTons4__subParameterListItem, sizeof(ns4__subParameterListItem), 1, soap_finsert, soap_fbase))
				break;
			if (!soap_in_PointerTons4__subParameterListItem(soap, tag, NULL, "ns4:subParameterListItem"))
				break;
		}
		else
		{	if (!soap_in_PointerTons4__subParameterListItem(soap, tag, &n, "ns4:subParameterListItem"))
				break;
		}
		a->insert(a->end(), n);
		if (!tag || *tag == '-')
			return a;
	}
	if (soap_flag && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
	{	soap->error = SOAP_OK;
		return a;
	}
	return NULL;
}

SOAP_FMAC1 std::vector<ns4__subParameterListItem *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons4__subParameterListItem(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__vectorTemplateOfPointerTons4__subParameterListItem(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	std::vector<ns4__subParameterListItem *> *p;
	size_t k = sizeof(std::vector<ns4__subParameterListItem *> );
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_std__vectorTemplateOfPointerTons4__subParameterListItem, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, std::vector<ns4__subParameterListItem *> );
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, std::vector<ns4__subParameterListItem *> , n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated std::vector<ns4__subParameterListItem *>  location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTo_ns4__parameterListItem(struct soap *soap, std::vector<_ns4__parameterListItem *> *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->clear();
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTo_ns4__parameterListItem(struct soap *soap, const std::vector<_ns4__parameterListItem *> *a)
{
	(void)soap; (void)a;/* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	for (std::vector<_ns4__parameterListItem *> ::const_iterator i = a->begin(); i != a->end(); ++i)
		soap_serialize_PointerTo_ns4__parameterListItem(soap, &(*i));
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTo_ns4__parameterListItem(struct soap *soap, const char *tag, int id, const std::vector<_ns4__parameterListItem *> *a, const char *type)
{
	(void)id; (void)type; /* appease -Wall -Werror */
	for (std::vector<_ns4__parameterListItem *> ::const_iterator i = a->begin(); i != a->end(); ++i)
	{
		if (soap_out_PointerTo_ns4__parameterListItem(soap, tag, id, &(*i), ""))
			return soap->error;
	}
	return SOAP_OK;
}

SOAP_FMAC3 std::vector<_ns4__parameterListItem *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTo_ns4__parameterListItem(struct soap *soap, const char *tag, std::vector<_ns4__parameterListItem *> *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	short soap_flag;
	for (soap_flag = 0;; soap_flag = 1)
	{
		if (tag && *tag != '-')
		{	if (soap_element_begin_in(soap, tag, 1, NULL))
				break;
			soap_revert(soap);
		}
		if (!a && !(a = soap_new_std__vectorTemplateOfPointerTo_ns4__parameterListItem(soap)))
			return NULL;
		else if (static_cast<size_t>(a->size()) > soap->maxoccurs)
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
		_ns4__parameterListItem *n;
		n = NULL;
		if (tag && *tag != '-' && (*soap->id || *soap->href == '#'))
		{	if (!soap_id_forward(soap, *soap->id?soap->id:soap->href, a, static_cast<size_t>(a->size()), SOAP_TYPE__ns4__parameterListItem, SOAP_TYPE_std__vectorTemplateOfPointerTo_ns4__parameterListItem, sizeof(_ns4__parameterListItem), 1, soap_finsert, soap_fbase))
				break;
			if (!soap_in_PointerTo_ns4__parameterListItem(soap, tag, NULL, ""))
				break;
		}
		else
		{	if (!soap_in_PointerTo_ns4__parameterListItem(soap, tag, &n, ""))
				break;
		}
		a->insert(a->end(), n);
		if (!tag || *tag == '-')
			return a;
	}
	if (soap_flag && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
	{	soap->error = SOAP_OK;
		return a;
	}
	return NULL;
}

SOAP_FMAC1 std::vector<_ns4__parameterListItem *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTo_ns4__parameterListItem(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__vectorTemplateOfPointerTo_ns4__parameterListItem(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	std::vector<_ns4__parameterListItem *> *p;
	size_t k = sizeof(std::vector<_ns4__parameterListItem *> );
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_std__vectorTemplateOfPointerTo_ns4__parameterListItem, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, std::vector<_ns4__parameterListItem *> );
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, std::vector<_ns4__parameterListItem *> , n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated std::vector<_ns4__parameterListItem *>  location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfstd__string(struct soap *soap, std::vector<std::string> *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->clear();
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfstd__string(struct soap *soap, const std::vector<std::string> *a)
{
	(void)soap; (void)a;/* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	for (std::vector<std::string> ::const_iterator i = a->begin(); i != a->end(); ++i)
		soap_serialize_std__string(soap, &(*i));
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfstd__string(struct soap *soap, const char *tag, int id, const std::vector<std::string> *a, const char *type)
{
	(void)id; (void)type; /* appease -Wall -Werror */
	for (std::vector<std::string> ::const_iterator i = a->begin(); i != a->end(); ++i)
	{
		if (soap_out_std__string(soap, tag, id, &(*i), "xsd:string"))
			return soap->error;
	}
	return SOAP_OK;
}

SOAP_FMAC3 std::vector<std::string> * SOAP_FMAC4 soap_in_std__vectorTemplateOfstd__string(struct soap *soap, const char *tag, std::vector<std::string> *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	short soap_flag;
	for (soap_flag = 0;; soap_flag = 1)
	{
		if (tag && *tag != '-')
		{	if (soap_element_begin_in(soap, tag, 1, NULL))
				break;
			soap_revert(soap);
		}
		if (!a && !(a = soap_new_std__vectorTemplateOfstd__string(soap)))
			return NULL;
		else if (static_cast<size_t>(a->size()) > soap->maxoccurs)
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
		std::string n;
		soap_default_std__string(soap, &n);
		short soap_shaky = soap_begin_shaky(soap);
		if (tag && *tag != '-' && (*soap->id || *soap->href == '#'))
		{	if (!soap_id_forward(soap, *soap->id?soap->id:soap->href, a, static_cast<size_t>(a->size()), SOAP_TYPE_std__string, SOAP_TYPE_std__vectorTemplateOfstd__string, sizeof(std::string), 0, soap_finsert, soap_fbase))
				break;
			if (!soap_in_std__string(soap, tag, NULL, "xsd:string"))
				break;
		}
		else
		{	if (!soap_in_std__string(soap, tag, &n, "xsd:string"))
				break;
		}
		soap_end_shaky(soap, soap_shaky);
		if (a->size())
		{	const void *p = &*a->begin();
			soap_update_pointers(soap, (const char*)&(*a->insert(a->end(), n)), (const char*)&n, sizeof(std::string));
			if (p != &*a->begin())
			{	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container capacity increased: updating pointers\n"));
				soap_update_pointers(soap, (const char*)&*a->begin(), (const char*)p, (a->size() - 1) * sizeof(std::string));
			}
		}
		else
		{	soap_update_pointers(soap, (const char*)&(*a->insert(a->end(), n)), (const char*)&n, sizeof(std::string));
		}
		if (!tag || *tag == '-')
			return a;
	}
	if (soap_flag && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
	{	soap->error = SOAP_OK;
		return a;
	}
	return NULL;
}

SOAP_FMAC1 std::vector<std::string>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfstd__string(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__vectorTemplateOfstd__string(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	std::vector<std::string> *p;
	size_t k = sizeof(std::vector<std::string> );
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_std__vectorTemplateOfstd__string, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, std::vector<std::string> );
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, std::vector<std::string> , n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated std::vector<std::string>  location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons3__parameterListItem(struct soap *soap, std::vector<ns3__parameterListItem *> *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->clear();
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons3__parameterListItem(struct soap *soap, const std::vector<ns3__parameterListItem *> *a)
{
	(void)soap; (void)a;/* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	for (std::vector<ns3__parameterListItem *> ::const_iterator i = a->begin(); i != a->end(); ++i)
		soap_serialize_PointerTons3__parameterListItem(soap, &(*i));
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons3__parameterListItem(struct soap *soap, const char *tag, int id, const std::vector<ns3__parameterListItem *> *a, const char *type)
{
	(void)id; (void)type; /* appease -Wall -Werror */
	for (std::vector<ns3__parameterListItem *> ::const_iterator i = a->begin(); i != a->end(); ++i)
	{
		if (soap_out_PointerTons3__parameterListItem(soap, tag, id, &(*i), "ns3:parameterListItem"))
			return soap->error;
	}
	return SOAP_OK;
}

SOAP_FMAC3 std::vector<ns3__parameterListItem *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons3__parameterListItem(struct soap *soap, const char *tag, std::vector<ns3__parameterListItem *> *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	short soap_flag;
	for (soap_flag = 0;; soap_flag = 1)
	{
		if (tag && *tag != '-')
		{	if (soap_element_begin_in(soap, tag, 1, NULL))
				break;
			soap_revert(soap);
		}
		if (!a && !(a = soap_new_std__vectorTemplateOfPointerTons3__parameterListItem(soap)))
			return NULL;
		else if (static_cast<size_t>(a->size()) > soap->maxoccurs)
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
		ns3__parameterListItem *n;
		n = NULL;
		if (tag && *tag != '-' && (*soap->id || *soap->href == '#'))
		{	if (!soap_id_forward(soap, *soap->id?soap->id:soap->href, a, static_cast<size_t>(a->size()), SOAP_TYPE_ns3__parameterListItem, SOAP_TYPE_std__vectorTemplateOfPointerTons3__parameterListItem, sizeof(ns3__parameterListItem), 1, soap_finsert, soap_fbase))
				break;
			if (!soap_in_PointerTons3__parameterListItem(soap, tag, NULL, "ns3:parameterListItem"))
				break;
		}
		else
		{	if (!soap_in_PointerTons3__parameterListItem(soap, tag, &n, "ns3:parameterListItem"))
				break;
		}
		a->insert(a->end(), n);
		if (!tag || *tag == '-')
			return a;
	}
	if (soap_flag && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
	{	soap->error = SOAP_OK;
		return a;
	}
	return NULL;
}

SOAP_FMAC1 std::vector<ns3__parameterListItem *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons3__parameterListItem(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__vectorTemplateOfPointerTons3__parameterListItem(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	std::vector<ns3__parameterListItem *> *p;
	size_t k = sizeof(std::vector<ns3__parameterListItem *> );
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_std__vectorTemplateOfPointerTons3__parameterListItem, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, std::vector<ns3__parameterListItem *> );
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, std::vector<ns3__parameterListItem *> , n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated std::vector<ns3__parameterListItem *>  location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

#if defined(__BORLANDC__)
#pragma option pop
#pragma option pop
#endif

/* End of soapC.cpp */
