/* soapStub.h
   Generated by gSOAP 2.8.75 for ipaws.h

gSOAP XML Web services tools
Copyright (C) 2000-2018, Robert van Engelen, Genivia Inc. All Rights Reserved.
The soapcpp2 tool and its generated software are released under the GPL.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial use license is available from Genivia Inc., contact@genivia.com
--------------------------------------------------------------------------------
*/

#include <vector>
#define SOAP_NAMESPACE_OF_ns3	"http://gov.fema.ipaws.services/caprequest"
#define SOAP_NAMESPACE_OF_ns4	"http://gov.fema.ipaws.services/capresponse"
#define SOAP_NAMESPACE_OF_ns5	"urn:oasis:names:tc:emergency:cap:1.2"
#define SOAP_NAMESPACE_OF_ns2	"http://gov.fema.ipaws.services/IPAWS_CAPService/"

#ifndef soapStub_H
#define soapStub_H
#include "stdsoap2.h"
#if GSOAP_VERSION != 20875
# error "GSOAP VERSION 20875 MISMATCH IN GENERATED CODE VERSUS LIBRARY CODE: PLEASE REINSTALL PACKAGE"
#endif


/******************************************************************************\
 *                                                                            *
 * Enumeration Types                                                          *
 *                                                                            *
\******************************************************************************/


/* ipaws.h:414 */
#ifndef SOAP_TYPE__ns5__alert_status
#define SOAP_TYPE__ns5__alert_status (34)
/* ns5:alert-status */
enum _ns5__alert_status {
	_ns5__alert_status__Actual = 0,
	_ns5__alert_status__Exercise = 1,
	_ns5__alert_status__System = 2,
	_ns5__alert_status__Test = 3,
	_ns5__alert_status__Draft = 4
};
#endif

/* ipaws.h:423 */
#ifndef SOAP_TYPE__ns5__alert_msgType
#define SOAP_TYPE__ns5__alert_msgType (35)
/* ns5:alert-msgType */
enum _ns5__alert_msgType {
	_ns5__alert_msgType__Alert = 0,
	_ns5__alert_msgType__Update = 1,
	_ns5__alert_msgType__Cancel = 2,
	_ns5__alert_msgType__Ack = 3,
	_ns5__alert_msgType__Error = 4
};
#endif

/* ipaws.h:434 */
#ifndef SOAP_TYPE__ns5__alert_scope
#define SOAP_TYPE__ns5__alert_scope (36)
/* ns5:alert-scope */
enum _ns5__alert_scope {
	_ns5__alert_scope__Public = 0,
	_ns5__alert_scope__Restricted = 1,
	_ns5__alert_scope__Private = 2
};
#endif

/* ipaws.h:472 */
#ifndef SOAP_TYPE__ns5__alert_info_category
#define SOAP_TYPE__ns5__alert_info_category (39)
/* ns5:alert-info-category */
enum _ns5__alert_info_category {
	_ns5__alert_info_category__Geo = 0,
	_ns5__alert_info_category__Met = 1,
	_ns5__alert_info_category__Safety = 2,
	_ns5__alert_info_category__Security = 3,
	_ns5__alert_info_category__Rescue = 4,
	_ns5__alert_info_category__Fire = 5,
	_ns5__alert_info_category__Health = 6,
	_ns5__alert_info_category__Env = 7,
	_ns5__alert_info_category__Transport = 8,
	_ns5__alert_info_category__Infra = 9,
	_ns5__alert_info_category__CBRNE = 10,
	_ns5__alert_info_category__Other = 11
};
#endif

/* ipaws.h:492 */
#ifndef SOAP_TYPE__ns5__alert_info_responseType
#define SOAP_TYPE__ns5__alert_info_responseType (41)
/* ns5:alert-info-responseType */
enum _ns5__alert_info_responseType {
	_ns5__alert_info_responseType__Shelter = 0,
	_ns5__alert_info_responseType__Evacuate = 1,
	_ns5__alert_info_responseType__Prepare = 2,
	_ns5__alert_info_responseType__Execute = 3,
	_ns5__alert_info_responseType__Avoid = 4,
	_ns5__alert_info_responseType__Monitor = 5,
	_ns5__alert_info_responseType__Assess = 6,
	_ns5__alert_info_responseType__AllClear = 7,
	_ns5__alert_info_responseType__None = 8
};
#endif

/* ipaws.h:505 */
#ifndef SOAP_TYPE__ns5__alert_info_urgency
#define SOAP_TYPE__ns5__alert_info_urgency (43)
/* ns5:alert-info-urgency */
enum _ns5__alert_info_urgency {
	_ns5__alert_info_urgency__Immediate = 0,
	_ns5__alert_info_urgency__Expected = 1,
	_ns5__alert_info_urgency__Future = 2,
	_ns5__alert_info_urgency__Past = 3,
	_ns5__alert_info_urgency__Unknown = 4
};
#endif

/* ipaws.h:514 */
#ifndef SOAP_TYPE__ns5__alert_info_severity
#define SOAP_TYPE__ns5__alert_info_severity (44)
/* ns5:alert-info-severity */
enum _ns5__alert_info_severity {
	_ns5__alert_info_severity__Extreme = 0,
	_ns5__alert_info_severity__Severe = 1,
	_ns5__alert_info_severity__Moderate = 2,
	_ns5__alert_info_severity__Minor = 3,
	_ns5__alert_info_severity__Unknown = 4
};
#endif

/* ipaws.h:523 */
#ifndef SOAP_TYPE__ns5__alert_info_certainty
#define SOAP_TYPE__ns5__alert_info_certainty (45)
/* ns5:alert-info-certainty */
enum _ns5__alert_info_certainty {
	_ns5__alert_info_certainty__Observed = 0,
	_ns5__alert_info_certainty__Likely = 1,
	_ns5__alert_info_certainty__Possible = 2,
	_ns5__alert_info_certainty__Unlikely = 3,
	_ns5__alert_info_certainty__Unknown = 4
};
#endif

/******************************************************************************\
 *                                                                            *
 * Types with Custom Serializers                                              *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Classes, Structs and Unions                                                *
 *                                                                            *
\******************************************************************************/

class ns3__requestParameterList;	/* ipaws.h:182 */
class ns3__parameterListItem;	/* ipaws.h:184 */
class ns4__responseParameterList;	/* ipaws.h:186 */
class ns4__subParameterListItem;	/* ipaws.h:188 */
class _ns4__parameterListItem;	/* ipaws.h:190 */
class _ns5__alert_info_eventCode;	/* ipaws.h:546 */
class _ns5__alert_info_parameter;	/* ipaws.h:587 */
class _ns5__alert_info_resource;	/* ipaws.h:607 */
class _ns5__alert_info_area_geocode;	/* ipaws.h:656 */
class _ns5__alert_info_area;	/* ipaws.h:635 */
class _ns5__alert_info;	/* ipaws.h:465 */
class _ns5__alert;	/* ipaws.h:192 */
class _ns2__postCAPRequestTypeDef;	/* ipaws.h:194 */
class _ns2__CAPServiceException;	/* ipaws.h:196 */
class _ns2__postCAPResponseTypeDef;	/* ipaws.h:198 */
class _ns2__messageResponseTypeDef;	/* ipaws.h:200 */
class _ns2__CAPHeaderTypeDef;	/* ipaws.h:202 */
struct __ns2__getRequest;	/* ipaws.h:1076 */
struct __ns2__postCAP;	/* ipaws.h:1153 */
struct __ns2__getMessage;	/* ipaws.h:1230 */

/* ipaws.h:182 */
#ifndef SOAP_TYPE_ns3__requestParameterList
#define SOAP_TYPE_ns3__requestParameterList (13)
/* complex XML schema type 'ns3:requestParameterList': */
class SOAP_CMAC ns3__requestParameterList {
      public:
        /// Optional element 'ns3:requestAPI' of XML schema type 'xsd:string'
        std::string *requestAPI;
        /// Optional element 'ns3:requestOperation' of XML schema type 'xsd:string'
        std::string *requestOperation;
        /// Optional element 'ns3:parameters' of XML schema type 'ns3:parameterListItem'
        std::vector<ns3__parameterListItem *> parameters;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_ns3__requestParameterList
        virtual long soap_type(void) const { return SOAP_TYPE_ns3__requestParameterList; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type ns3__requestParameterList, default initialized and not managed by a soap context
        virtual ns3__requestParameterList *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(ns3__requestParameterList); }
      public:
        /// Constructor with default initializations
        ns3__requestParameterList() : requestAPI(), requestOperation(), parameters(), soap() { }
        virtual ~ns3__requestParameterList() { }
        /// Friend allocator used by soap_new_ns3__requestParameterList(struct soap*, int)
        friend SOAP_FMAC1 ns3__requestParameterList * SOAP_FMAC2 soap_instantiate_ns3__requestParameterList(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* ipaws.h:184 */
#ifndef SOAP_TYPE_ns3__parameterListItem
#define SOAP_TYPE_ns3__parameterListItem (14)
/* complex XML schema type 'ns3:parameterListItem': */
class SOAP_CMAC ns3__parameterListItem {
      public:
        /// Optional element 'ns3:parameterName' of XML schema type 'xsd:string'
        std::string *parameterName;
        /// Optional element 'ns3:comparisonOp' of XML schema type 'xsd:string'
        std::string *comparisonOp;
        /// Optional element 'ns3:parameterValue' of XML schema type 'xsd:string'
        std::vector<std::string> parameterValue;
        /// Optional element 'ns3:logicalOp' of XML schema type 'xsd:string'
        std::string *logicalOp;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_ns3__parameterListItem
        virtual long soap_type(void) const { return SOAP_TYPE_ns3__parameterListItem; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type ns3__parameterListItem, default initialized and not managed by a soap context
        virtual ns3__parameterListItem *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(ns3__parameterListItem); }
      public:
        /// Constructor with default initializations
        ns3__parameterListItem() : parameterName(), comparisonOp(), parameterValue(), logicalOp(), soap() { }
        virtual ~ns3__parameterListItem() { }
        /// Friend allocator used by soap_new_ns3__parameterListItem(struct soap*, int)
        friend SOAP_FMAC1 ns3__parameterListItem * SOAP_FMAC2 soap_instantiate_ns3__parameterListItem(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* ipaws.h:186 */
#ifndef SOAP_TYPE_ns4__responseParameterList
#define SOAP_TYPE_ns4__responseParameterList (15)
/* complex XML schema type 'ns4:responseParameterList': */
class SOAP_CMAC ns4__responseParameterList {
      public:
        /// Optional element 'ns4:parameterListItem' of XML schema type 'ns4:parameterListItem'
        std::vector<_ns4__parameterListItem *> parameterListItem;
        /// Optional element 'ns4:ResponseOperation' of XML schema type 'xsd:string'
        std::string *ResponseOperation;
        /// Optional element 'ns4:ResponseType' of XML schema type 'xsd:string'
        std::string *ResponseType;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_ns4__responseParameterList
        virtual long soap_type(void) const { return SOAP_TYPE_ns4__responseParameterList; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type ns4__responseParameterList, default initialized and not managed by a soap context
        virtual ns4__responseParameterList *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(ns4__responseParameterList); }
      public:
        /// Constructor with default initializations
        ns4__responseParameterList() : parameterListItem(), ResponseOperation(), ResponseType(), soap() { }
        virtual ~ns4__responseParameterList() { }
        /// Friend allocator used by soap_new_ns4__responseParameterList(struct soap*, int)
        friend SOAP_FMAC1 ns4__responseParameterList * SOAP_FMAC2 soap_instantiate_ns4__responseParameterList(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* ipaws.h:188 */
#ifndef SOAP_TYPE_ns4__subParameterListItem
#define SOAP_TYPE_ns4__subParameterListItem (16)
/* complex XML schema type 'ns4:subParameterListItem': */
class SOAP_CMAC ns4__subParameterListItem {
      public:
        /// Optional element 'ns4:subParameterName' of XML schema type 'xsd:string'
        std::string *subParameterName;
        /// Optional element 'ns4:subParameterValue' of XML schema type 'xsd:string'
        std::string *subParameterValue;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_ns4__subParameterListItem
        virtual long soap_type(void) const { return SOAP_TYPE_ns4__subParameterListItem; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type ns4__subParameterListItem, default initialized and not managed by a soap context
        virtual ns4__subParameterListItem *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(ns4__subParameterListItem); }
      public:
        /// Constructor with default initializations
        ns4__subParameterListItem() : subParameterName(), subParameterValue(), soap() { }
        virtual ~ns4__subParameterListItem() { }
        /// Friend allocator used by soap_new_ns4__subParameterListItem(struct soap*, int)
        friend SOAP_FMAC1 ns4__subParameterListItem * SOAP_FMAC2 soap_instantiate_ns4__subParameterListItem(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* ipaws.h:190 */
#ifndef SOAP_TYPE__ns4__parameterListItem
#define SOAP_TYPE__ns4__parameterListItem (17)
/* complex XML schema type 'ns4:parameterListItem': */
class SOAP_CMAC _ns4__parameterListItem {
      public:
        /// Optional element 'ns4:parameterName' of XML schema type 'xsd:string'
        std::string *parameterName;
        /// Optional element 'ns4:parameterValue' of XML schema type 'xsd:string'
        std::string *parameterValue;
        /// Optional element 'ns4:subParaListItem' of XML schema type 'ns4:subParameterListItem'
        std::vector<ns4__subParameterListItem *> subParaListItem;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__ns4__parameterListItem
        virtual long soap_type(void) const { return SOAP_TYPE__ns4__parameterListItem; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns4__parameterListItem, default initialized and not managed by a soap context
        virtual _ns4__parameterListItem *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_ns4__parameterListItem); }
      public:
        /// Constructor with default initializations
        _ns4__parameterListItem() : parameterName(), parameterValue(), subParaListItem(), soap() { }
        virtual ~_ns4__parameterListItem() { }
        /// Friend allocator used by soap_new__ns4__parameterListItem(struct soap*, int)
        friend SOAP_FMAC1 _ns4__parameterListItem * SOAP_FMAC2 soap_instantiate__ns4__parameterListItem(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* ipaws.h:546 */
#ifndef SOAP_TYPE__ns5__alert_info_eventCode
#define SOAP_TYPE__ns5__alert_info_eventCode (46)
/* complex XML schema type 'ns5:alert-info-eventCode': */
class SOAP_CMAC _ns5__alert_info_eventCode {
      public:
        /// Required element 'ns5:valueName' of XML schema type 'xsd:string'
        std::string valueName;
        /// Required element 'ns5:value' of XML schema type 'xsd:string'
        std::string value;
      public:
        /// Return unique type id SOAP_TYPE__ns5__alert_info_eventCode
        virtual long soap_type(void) const { return SOAP_TYPE__ns5__alert_info_eventCode; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns5__alert_info_eventCode, default initialized and not managed by a soap context
        virtual _ns5__alert_info_eventCode *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_ns5__alert_info_eventCode); }
      public:
        /// Constructor with default initializations
        _ns5__alert_info_eventCode() : valueName(), value() { }
        virtual ~_ns5__alert_info_eventCode() { }
        /// Friend allocator used by soap_new__ns5__alert_info_eventCode(struct soap*, int)
        friend SOAP_FMAC1 _ns5__alert_info_eventCode * SOAP_FMAC2 soap_instantiate__ns5__alert_info_eventCode(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* ipaws.h:587 */
#ifndef SOAP_TYPE__ns5__alert_info_parameter
#define SOAP_TYPE__ns5__alert_info_parameter (50)
/* complex XML schema type 'ns5:alert-info-parameter': */
class SOAP_CMAC _ns5__alert_info_parameter {
      public:
        /// Required element 'ns5:valueName' of XML schema type 'xsd:string'
        std::string valueName;
        /// Required element 'ns5:value' of XML schema type 'xsd:string'
        std::string value;
      public:
        /// Return unique type id SOAP_TYPE__ns5__alert_info_parameter
        virtual long soap_type(void) const { return SOAP_TYPE__ns5__alert_info_parameter; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns5__alert_info_parameter, default initialized and not managed by a soap context
        virtual _ns5__alert_info_parameter *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_ns5__alert_info_parameter); }
      public:
        /// Constructor with default initializations
        _ns5__alert_info_parameter() : valueName(), value() { }
        virtual ~_ns5__alert_info_parameter() { }
        /// Friend allocator used by soap_new__ns5__alert_info_parameter(struct soap*, int)
        friend SOAP_FMAC1 _ns5__alert_info_parameter * SOAP_FMAC2 soap_instantiate__ns5__alert_info_parameter(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* ipaws.h:607 */
#ifndef SOAP_TYPE__ns5__alert_info_resource
#define SOAP_TYPE__ns5__alert_info_resource (52)
/* complex XML schema type 'ns5:alert-info-resource': */
class SOAP_CMAC _ns5__alert_info_resource {
      public:
        /// Required element 'ns5:resourceDesc' of XML schema type 'xsd:string'
        std::string resourceDesc;
        /// Required element 'ns5:mimeType' of XML schema type 'xsd:string'
        std::string mimeType;
        /// Optional element 'ns5:size' of XML schema type 'xsd:integer'
        std::string *size;
        /// Optional element 'ns5:uri' of XML schema type 'xsd:anyURI'
        std::string *uri;
        /// Optional element 'ns5:derefUri' of XML schema type 'xsd:string'
        std::string *derefUri;
        /// Optional element 'ns5:digest' of XML schema type 'xsd:string'
        std::string *digest;
      public:
        /// Return unique type id SOAP_TYPE__ns5__alert_info_resource
        virtual long soap_type(void) const { return SOAP_TYPE__ns5__alert_info_resource; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns5__alert_info_resource, default initialized and not managed by a soap context
        virtual _ns5__alert_info_resource *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_ns5__alert_info_resource); }
      public:
        /// Constructor with default initializations
        _ns5__alert_info_resource() : resourceDesc(), mimeType(), size(), uri(), derefUri(), digest() { }
        virtual ~_ns5__alert_info_resource() { }
        /// Friend allocator used by soap_new__ns5__alert_info_resource(struct soap*, int)
        friend SOAP_FMAC1 _ns5__alert_info_resource * SOAP_FMAC2 soap_instantiate__ns5__alert_info_resource(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* ipaws.h:656 */
#ifndef SOAP_TYPE__ns5__alert_info_area_geocode
#define SOAP_TYPE__ns5__alert_info_area_geocode (56)
/* complex XML schema type 'ns5:alert-info-area-geocode': */
class SOAP_CMAC _ns5__alert_info_area_geocode {
      public:
        /// Required element 'ns5:valueName' of XML schema type 'xsd:string'
        std::string valueName;
        /// Required element 'ns5:value' of XML schema type 'xsd:string'
        std::string value;
      public:
        /// Return unique type id SOAP_TYPE__ns5__alert_info_area_geocode
        virtual long soap_type(void) const { return SOAP_TYPE__ns5__alert_info_area_geocode; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns5__alert_info_area_geocode, default initialized and not managed by a soap context
        virtual _ns5__alert_info_area_geocode *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_ns5__alert_info_area_geocode); }
      public:
        /// Constructor with default initializations
        _ns5__alert_info_area_geocode() : valueName(), value() { }
        virtual ~_ns5__alert_info_area_geocode() { }
        /// Friend allocator used by soap_new__ns5__alert_info_area_geocode(struct soap*, int)
        friend SOAP_FMAC1 _ns5__alert_info_area_geocode * SOAP_FMAC2 soap_instantiate__ns5__alert_info_area_geocode(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* ipaws.h:635 */
#ifndef SOAP_TYPE__ns5__alert_info_area
#define SOAP_TYPE__ns5__alert_info_area (55)
/* complex XML schema type 'ns5:alert-info-area': */
class SOAP_CMAC _ns5__alert_info_area {
      public:
        /// Required element 'ns5:areaDesc' of XML schema type 'xsd:string'
        std::string areaDesc;
        /// Optional element 'ns5:polygon' of XML schema type 'xsd:string'
        std::vector<std::string> polygon;
        /// Optional element 'ns5:circle' of XML schema type 'xsd:string'
        std::vector<std::string> circle;
        /// Optional element 'ns5:geocode' of XML schema type 'ns5:alert-info-area-geocode'
        std::vector<_ns5__alert_info_area_geocode> geocode;
        /// Optional element 'ns5:altitude' of XML schema type 'xsd:decimal'
        std::string *altitude;
        /// Optional element 'ns5:ceiling' of XML schema type 'xsd:decimal'
        std::string *ceiling;
      public:
        /// Return unique type id SOAP_TYPE__ns5__alert_info_area
        virtual long soap_type(void) const { return SOAP_TYPE__ns5__alert_info_area; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns5__alert_info_area, default initialized and not managed by a soap context
        virtual _ns5__alert_info_area *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_ns5__alert_info_area); }
      public:
        /// Constructor with default initializations
        _ns5__alert_info_area() : areaDesc(), polygon(), circle(), geocode(), altitude(), ceiling() { }
        virtual ~_ns5__alert_info_area() { }
        /// Friend allocator used by soap_new__ns5__alert_info_area(struct soap*, int)
        friend SOAP_FMAC1 _ns5__alert_info_area * SOAP_FMAC2 soap_instantiate__ns5__alert_info_area(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* ipaws.h:465 */
#ifndef SOAP_TYPE__ns5__alert_info
#define SOAP_TYPE__ns5__alert_info (37)
/* complex XML schema type 'ns5:alert-info': */
class SOAP_CMAC _ns5__alert_info {
      public:
        /// Optional element 'ns5:language' of XML schema type 'xsd:language'
        std::string *language;	///< optional with default value = "en-US"
        /// Required element 'ns5:category' of XML schema type 'ns5:alert-info-category'
        std::vector<enum _ns5__alert_info_category> category;
        /// Required element 'ns5:event' of XML schema type 'xsd:string'
        std::string event;
        /// Optional element 'ns5:responseType' of XML schema type 'ns5:alert-info-responseType'
        std::vector<enum _ns5__alert_info_responseType> responseType;
        /// Required element 'ns5:urgency' of XML schema type 'ns5:alert-info-urgency'
        enum _ns5__alert_info_urgency urgency;
        /// Required element 'ns5:severity' of XML schema type 'ns5:alert-info-severity'
        enum _ns5__alert_info_severity severity;
        /// Required element 'ns5:certainty' of XML schema type 'ns5:alert-info-certainty'
        enum _ns5__alert_info_certainty certainty;
        /// Optional element 'ns5:audience' of XML schema type 'xsd:string'
        std::string *audience;
        /// Optional element 'ns5:eventCode' of XML schema type 'ns5:alert-info-eventCode'
        std::vector<_ns5__alert_info_eventCode> eventCode;
        /// Optional element 'ns5:effective' of XML schema type 'xsd:dateTime'
        time_t *effective;
        /// Optional element 'ns5:onset' of XML schema type 'xsd:dateTime'
        time_t *onset;
        /// Optional element 'ns5:expires' of XML schema type 'xsd:dateTime'
        time_t *expires;
        /// Optional element 'ns5:senderName' of XML schema type 'xsd:string'
        std::string *senderName;
        /// Optional element 'ns5:headline' of XML schema type 'xsd:string'
        std::string *headline;
        /// Optional element 'ns5:description' of XML schema type 'xsd:string'
        std::string *description;
        /// Optional element 'ns5:instruction' of XML schema type 'xsd:string'
        std::string *instruction;
        /// Optional element 'ns5:web' of XML schema type 'xsd:anyURI'
        std::string *web;
        /// Optional element 'ns5:contact' of XML schema type 'xsd:string'
        std::string *contact;
        /// Optional element 'ns5:parameter' of XML schema type 'ns5:alert-info-parameter'
        std::vector<_ns5__alert_info_parameter> parameter;
        /// Optional element 'ns5:resource' of XML schema type 'ns5:alert-info-resource'
        std::vector<_ns5__alert_info_resource> resource;
        /// Optional element 'ns5:area' of XML schema type 'ns5:alert-info-area'
        std::vector<_ns5__alert_info_area> area;
      public:
        /// Return unique type id SOAP_TYPE__ns5__alert_info
        virtual long soap_type(void) const { return SOAP_TYPE__ns5__alert_info; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns5__alert_info, default initialized and not managed by a soap context
        virtual _ns5__alert_info *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_ns5__alert_info); }
      public:
        /// Constructor with default initializations
        _ns5__alert_info() : language(), category(), event(), responseType(), urgency(), severity(), certainty(), audience(), eventCode(), effective(), onset(), expires(), senderName(), headline(), description(), instruction(), web(), contact(), parameter(), resource(), area() { }
        virtual ~_ns5__alert_info() { }
        /// Friend allocator used by soap_new__ns5__alert_info(struct soap*, int)
        friend SOAP_FMAC1 _ns5__alert_info * SOAP_FMAC2 soap_instantiate__ns5__alert_info(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* ipaws.h:192 */
#ifndef SOAP_TYPE__ns5__alert
#define SOAP_TYPE__ns5__alert (18)
/* complex XML schema type 'ns5:alert': */
class SOAP_CMAC _ns5__alert {
      public:
        /// Required element 'ns5:identifier' of XML schema type 'xsd:string'
        std::string identifier;
        /// Required element 'ns5:sender' of XML schema type 'xsd:string'
        std::string sender;
        /// Required element 'ns5:sent' of XML schema type 'xsd:dateTime'
        time_t sent;
        /// Required element 'ns5:status' of XML schema type 'ns5:alert-status'
        enum _ns5__alert_status status;
        /// Required element 'ns5:msgType' of XML schema type 'ns5:alert-msgType'
        enum _ns5__alert_msgType msgType;
        /// Optional element 'ns5:source' of XML schema type 'xsd:string'
        std::string *source;
        /// Required element 'ns5:scope' of XML schema type 'ns5:alert-scope'
        enum _ns5__alert_scope scope;
        /// Optional element 'ns5:restriction' of XML schema type 'xsd:string'
        std::string *restriction;
        /// Optional element 'ns5:addresses' of XML schema type 'xsd:string'
        std::string *addresses;
        /// Optional element 'ns5:code' of XML schema type 'xsd:string'
        std::vector<std::string> code;
        /// Optional element 'ns5:note' of XML schema type 'xsd:string'
        std::string *note;
        /// Optional element 'ns5:references' of XML schema type 'xsd:string'
        std::string *references;
        /// Optional element 'ns5:incidents' of XML schema type 'xsd:string'
        std::string *incidents;
        /// Optional element 'ns5:info' of XML schema type 'ns5:alert-info'
        std::vector<_ns5__alert_info> info;
        std::vector<char *> __any;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__ns5__alert
        virtual long soap_type(void) const { return SOAP_TYPE__ns5__alert; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns5__alert, default initialized and not managed by a soap context
        virtual _ns5__alert *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_ns5__alert); }
      public:
        /// Constructor with default initializations
        _ns5__alert() : identifier(), sender(), sent(), status(), msgType(), source(), scope(), restriction(), addresses(), code(), note(), references(), incidents(), info(), __any(), soap() { }
        virtual ~_ns5__alert() { }
        /// Friend allocator used by soap_new__ns5__alert(struct soap*, int)
        friend SOAP_FMAC1 _ns5__alert * SOAP_FMAC2 soap_instantiate__ns5__alert(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* ipaws.h:194 */
#ifndef SOAP_TYPE__ns2__postCAPRequestTypeDef
#define SOAP_TYPE__ns2__postCAPRequestTypeDef (19)
/* complex XML schema type 'ns2:postCAPRequestTypeDef': */
class SOAP_CMAC _ns2__postCAPRequestTypeDef {
      public:
        /// Required element 'ns5:alert' of XML schema type 'ns5:alert'
        _ns5__alert *ns5__alert;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__ns2__postCAPRequestTypeDef
        virtual long soap_type(void) const { return SOAP_TYPE__ns2__postCAPRequestTypeDef; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns2__postCAPRequestTypeDef, default initialized and not managed by a soap context
        virtual _ns2__postCAPRequestTypeDef *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_ns2__postCAPRequestTypeDef); }
      public:
        /// Constructor with default initializations
        _ns2__postCAPRequestTypeDef() : ns5__alert(), soap() { }
        virtual ~_ns2__postCAPRequestTypeDef() { }
        /// Friend allocator used by soap_new__ns2__postCAPRequestTypeDef(struct soap*, int)
        friend SOAP_FMAC1 _ns2__postCAPRequestTypeDef * SOAP_FMAC2 soap_instantiate__ns2__postCAPRequestTypeDef(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* ipaws.h:196 */
#ifndef SOAP_TYPE__ns2__CAPServiceException
#define SOAP_TYPE__ns2__CAPServiceException (20)
/* complex XML schema type 'ns2:CAPServiceException': */
class SOAP_CMAC _ns2__CAPServiceException {
      public:
        /// Required nillable (xsi:nil when NULL) element 'ns2:errorCode' of XML schema type 'xsd:string'
        std::string *errorCode;
        /// Required nillable (xsi:nil when NULL) element 'ns2:message' of XML schema type 'xsd:string'
        std::string *message;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__ns2__CAPServiceException
        virtual long soap_type(void) const { return SOAP_TYPE__ns2__CAPServiceException; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns2__CAPServiceException, default initialized and not managed by a soap context
        virtual _ns2__CAPServiceException *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_ns2__CAPServiceException); }
      public:
        /// Constructor with default initializations
        _ns2__CAPServiceException() : errorCode(), message(), soap() { }
        virtual ~_ns2__CAPServiceException() { }
        /// Friend allocator used by soap_new__ns2__CAPServiceException(struct soap*, int)
        friend SOAP_FMAC1 _ns2__CAPServiceException * SOAP_FMAC2 soap_instantiate__ns2__CAPServiceException(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* ipaws.h:198 */
#ifndef SOAP_TYPE__ns2__postCAPResponseTypeDef
#define SOAP_TYPE__ns2__postCAPResponseTypeDef (21)
/* complex XML schema type 'ns2:postCAPResponseTypeDef': */
class SOAP_CMAC _ns2__postCAPResponseTypeDef {
      public:
        /// Required nillable (xsi:nil when NULL) element 'ns2:postCAPReturn' of XML schema type 'xsd:string'
        std::string *postCAPReturn;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__ns2__postCAPResponseTypeDef
        virtual long soap_type(void) const { return SOAP_TYPE__ns2__postCAPResponseTypeDef; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns2__postCAPResponseTypeDef, default initialized and not managed by a soap context
        virtual _ns2__postCAPResponseTypeDef *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_ns2__postCAPResponseTypeDef); }
      public:
        /// Constructor with default initializations
        _ns2__postCAPResponseTypeDef() : postCAPReturn(), soap() { }
        virtual ~_ns2__postCAPResponseTypeDef() { }
        /// Friend allocator used by soap_new__ns2__postCAPResponseTypeDef(struct soap*, int)
        friend SOAP_FMAC1 _ns2__postCAPResponseTypeDef * SOAP_FMAC2 soap_instantiate__ns2__postCAPResponseTypeDef(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* ipaws.h:200 */
#ifndef SOAP_TYPE__ns2__messageResponseTypeDef
#define SOAP_TYPE__ns2__messageResponseTypeDef (22)
/* complex XML schema type 'ns2:messageResponseTypeDef': */
class SOAP_CMAC _ns2__messageResponseTypeDef {
      public:
        /// Optional element 'ns5:alert' of XML schema type 'ns5:alert'
        std::vector<_ns5__alert *> ns5__alert;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__ns2__messageResponseTypeDef
        virtual long soap_type(void) const { return SOAP_TYPE__ns2__messageResponseTypeDef; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns2__messageResponseTypeDef, default initialized and not managed by a soap context
        virtual _ns2__messageResponseTypeDef *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_ns2__messageResponseTypeDef); }
      public:
        /// Constructor with default initializations
        _ns2__messageResponseTypeDef() : ns5__alert(), soap() { }
        virtual ~_ns2__messageResponseTypeDef() { }
        /// Friend allocator used by soap_new__ns2__messageResponseTypeDef(struct soap*, int)
        friend SOAP_FMAC1 _ns2__messageResponseTypeDef * SOAP_FMAC2 soap_instantiate__ns2__messageResponseTypeDef(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* ipaws.h:202 */
#ifndef SOAP_TYPE__ns2__CAPHeaderTypeDef
#define SOAP_TYPE__ns2__CAPHeaderTypeDef (23)
/* complex XML schema type 'ns2:CAPHeaderTypeDef': */
class SOAP_CMAC _ns2__CAPHeaderTypeDef {
      public:
        /// Optional element 'ns2:logonUser' of XML schema type 'xsd:string'
        std::string *logonUser;
        /// Optional element 'ns2:logonCogId' of XML schema type 'xsd:int'
        int *logonCogId;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__ns2__CAPHeaderTypeDef
        virtual long soap_type(void) const { return SOAP_TYPE__ns2__CAPHeaderTypeDef; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns2__CAPHeaderTypeDef, default initialized and not managed by a soap context
        virtual _ns2__CAPHeaderTypeDef *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_ns2__CAPHeaderTypeDef); }
      public:
        /// Constructor with default initializations
        _ns2__CAPHeaderTypeDef() : logonUser(), logonCogId(), soap() { }
        virtual ~_ns2__CAPHeaderTypeDef() { }
        /// Friend allocator used by soap_new__ns2__CAPHeaderTypeDef(struct soap*, int)
        friend SOAP_FMAC1 _ns2__CAPHeaderTypeDef * SOAP_FMAC2 soap_instantiate__ns2__CAPHeaderTypeDef(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* ipaws.h:960 */
#ifndef WITH_NOGLOBAL
#ifndef SOAP_TYPE_SOAP_ENV__Header
#define SOAP_TYPE_SOAP_ENV__Header (65)
/* SOAP_ENV__Header: */
struct SOAP_CMAC SOAP_ENV__Header {
      public:
        /** MustUnderstand */
        _ns2__CAPHeaderTypeDef *ns2__CAPHeaderTypeDef;
      public:
        /** Return unique type id SOAP_TYPE_SOAP_ENV__Header */
        long soap_type() const { return SOAP_TYPE_SOAP_ENV__Header; }
        /** Constructor with member initializations */
        SOAP_ENV__Header() : ns2__CAPHeaderTypeDef() { }
        /** Friend allocator */
        friend SOAP_FMAC1 SOAP_ENV__Header * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Header(struct soap*, int, const char*, const char*, size_t*);
};
#endif
#endif

/* ipaws.h:983 */
#ifndef WITH_NOGLOBAL
#ifndef SOAP_TYPE_SOAP_ENV__Detail
#define SOAP_TYPE_SOAP_ENV__Detail (67)
/* SOAP_ENV__Detail: */
struct SOAP_CMAC SOAP_ENV__Detail {
      public:
        /** Optional element 'ns2:CAPServiceException' of XML schema type 'ns2:CAPServiceException' */
        _ns2__CAPServiceException *ns2__CAPServiceException;
        /** Any type of element 'fault' assigned to fault with its SOAP_TYPE_<typename> assigned to __type */
        /** Do not create a cyclic data structure throught this member unless SOAP encoding or SOAP_XML_GRAPH are used for id-ref serialization */
        int __type;
        void *fault;
        char *__any;
      public:
        /** Return unique type id SOAP_TYPE_SOAP_ENV__Detail */
        long soap_type() const { return SOAP_TYPE_SOAP_ENV__Detail; }
        /** Constructor with member initializations */
        SOAP_ENV__Detail() : ns2__CAPServiceException(), __type(), fault(), __any() { }
        /** Friend allocator */
        friend SOAP_FMAC1 SOAP_ENV__Detail * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Detail(struct soap*, int, const char*, const char*, size_t*);
};
#endif
#endif

/* ipaws.h:1076 */
#ifndef SOAP_TYPE___ns2__getRequest
#define SOAP_TYPE___ns2__getRequest (74)
/* Wrapper: */
struct SOAP_CMAC __ns2__getRequest {
      public:
        /** Optional element 'ns2:getRequestTypeDef' of XML schema type 'ns3:requestParameterList' */
        ns3__requestParameterList *ns2__getRequestTypeDef;
      public:
        /** Return unique type id SOAP_TYPE___ns2__getRequest */
        long soap_type() const { return SOAP_TYPE___ns2__getRequest; }
        /** Constructor with member initializations */
        __ns2__getRequest() : ns2__getRequestTypeDef() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __ns2__getRequest * SOAP_FMAC2 soap_instantiate___ns2__getRequest(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* ipaws.h:1153 */
#ifndef SOAP_TYPE___ns2__postCAP
#define SOAP_TYPE___ns2__postCAP (78)
/* Wrapper: */
struct SOAP_CMAC __ns2__postCAP {
      public:
        /** Optional element 'ns2:postCAPRequestTypeDef' of XML schema type 'ns2:postCAPRequestTypeDef' */
        _ns2__postCAPRequestTypeDef *ns2__postCAPRequestTypeDef;
      public:
        /** Return unique type id SOAP_TYPE___ns2__postCAP */
        long soap_type() const { return SOAP_TYPE___ns2__postCAP; }
        /** Constructor with member initializations */
        __ns2__postCAP() : ns2__postCAPRequestTypeDef() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __ns2__postCAP * SOAP_FMAC2 soap_instantiate___ns2__postCAP(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* ipaws.h:1230 */
#ifndef SOAP_TYPE___ns2__getMessage
#define SOAP_TYPE___ns2__getMessage (81)
/* Wrapper: */
struct SOAP_CMAC __ns2__getMessage {
      public:
        /** Optional element 'ns2:getMessageTypeDef' of XML schema type 'ns3:requestParameterList' */
        ns3__requestParameterList *ns2__getMessageTypeDef;
      public:
        /** Return unique type id SOAP_TYPE___ns2__getMessage */
        long soap_type() const { return SOAP_TYPE___ns2__getMessage; }
        /** Constructor with member initializations */
        __ns2__getMessage() : ns2__getMessageTypeDef() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __ns2__getMessage * SOAP_FMAC2 soap_instantiate___ns2__getMessage(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* ipaws.h:1412 */
#ifndef WITH_NOGLOBAL
#ifndef SOAP_TYPE_SOAP_ENV__Code
#define SOAP_TYPE_SOAP_ENV__Code (82)
/* Type SOAP_ENV__Code is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* SOAP_ENV__Code: */
struct SOAP_CMAC SOAP_ENV__Code {
      public:
        /** Optional element 'SOAP-ENV:Value' of XML schema type 'xsd:QName' */
        char *SOAP_ENV__Value;
        /** Optional element 'SOAP-ENV:Subcode' of XML schema type 'SOAP-ENV:Code' */
        struct SOAP_ENV__Code *SOAP_ENV__Subcode;
      public:
        /** Return unique type id SOAP_TYPE_SOAP_ENV__Code */
        long soap_type() const { return SOAP_TYPE_SOAP_ENV__Code; }
        /** Constructor with member initializations */
        SOAP_ENV__Code() : SOAP_ENV__Value(), SOAP_ENV__Subcode() { }
        /** Friend allocator */
        friend SOAP_FMAC1 SOAP_ENV__Code * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Code(struct soap*, int, const char*, const char*, size_t*);
};
#endif
#endif

/* ipaws.h:1412 */
#ifndef WITH_NOGLOBAL
#ifndef SOAP_TYPE_SOAP_ENV__Reason
#define SOAP_TYPE_SOAP_ENV__Reason (84)
/* SOAP_ENV__Reason: */
struct SOAP_CMAC SOAP_ENV__Reason {
      public:
        /** Optional element 'SOAP-ENV:Text' of XML schema type 'xsd:string' */
        char *SOAP_ENV__Text;
      public:
        /** Return unique type id SOAP_TYPE_SOAP_ENV__Reason */
        long soap_type() const { return SOAP_TYPE_SOAP_ENV__Reason; }
        /** Constructor with member initializations */
        SOAP_ENV__Reason() : SOAP_ENV__Text() { }
        /** Friend allocator */
        friend SOAP_FMAC1 SOAP_ENV__Reason * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Reason(struct soap*, int, const char*, const char*, size_t*);
};
#endif
#endif

/* ipaws.h:1412 */
#ifndef WITH_NOGLOBAL
#ifndef SOAP_TYPE_SOAP_ENV__Fault
#define SOAP_TYPE_SOAP_ENV__Fault (85)
/* SOAP_ENV__Fault: */
struct SOAP_CMAC SOAP_ENV__Fault {
      public:
        /** Optional element 'faultcode' of XML schema type 'xsd:QName' */
        char *faultcode;
        /** Optional element 'faultstring' of XML schema type 'xsd:string' */
        char *faultstring;
        /** Optional element 'faultactor' of XML schema type 'xsd:string' */
        char *faultactor;
        /** Optional element 'detail' of XML schema type 'SOAP-ENV:Detail' */
        struct SOAP_ENV__Detail *detail;
        /** Optional element 'SOAP-ENV:Code' of XML schema type 'SOAP-ENV:Code' */
        struct SOAP_ENV__Code *SOAP_ENV__Code;
        /** Optional element 'SOAP-ENV:Reason' of XML schema type 'SOAP-ENV:Reason' */
        struct SOAP_ENV__Reason *SOAP_ENV__Reason;
        /** Optional element 'SOAP-ENV:Node' of XML schema type 'xsd:string' */
        char *SOAP_ENV__Node;
        /** Optional element 'SOAP-ENV:Role' of XML schema type 'xsd:string' */
        char *SOAP_ENV__Role;
        /** Optional element 'SOAP-ENV:Detail' of XML schema type 'SOAP-ENV:Detail' */
        struct SOAP_ENV__Detail *SOAP_ENV__Detail;
      public:
        /** Return unique type id SOAP_TYPE_SOAP_ENV__Fault */
        long soap_type() const { return SOAP_TYPE_SOAP_ENV__Fault; }
        /** Constructor with member initializations */
        SOAP_ENV__Fault() : faultcode(), faultstring(), faultactor(), detail(), SOAP_ENV__Code(), SOAP_ENV__Reason(), SOAP_ENV__Node(), SOAP_ENV__Role(), SOAP_ENV__Detail() { }
        /** Friend allocator */
        friend SOAP_FMAC1 SOAP_ENV__Fault * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Fault(struct soap*, int, const char*, const char*, size_t*);
};
#endif
#endif

/******************************************************************************\
 *                                                                            *
 * Typedefs                                                                   *
 *                                                                            *
\******************************************************************************/


/* (built-in):0 */
#ifndef SOAP_TYPE__XML
#define SOAP_TYPE__XML (5)
typedef char *_XML;
#endif

/* (built-in):0 */
#ifndef SOAP_TYPE__QName
#define SOAP_TYPE__QName (6)
typedef char *_QName;
#endif

/* ipaws.h:163 */
#ifndef SOAP_TYPE_xsd__anyURI
#define SOAP_TYPE_xsd__anyURI (9)
typedef std::string xsd__anyURI;
#endif

/* ipaws.h:166 */
#ifndef SOAP_TYPE_xsd__decimal
#define SOAP_TYPE_xsd__decimal (10)
typedef std::string xsd__decimal;
#endif

/* ipaws.h:169 */
#ifndef SOAP_TYPE_xsd__integer
#define SOAP_TYPE_xsd__integer (11)
typedef std::string xsd__integer;
#endif

/* ipaws.h:172 */
#ifndef SOAP_TYPE_xsd__language
#define SOAP_TYPE_xsd__language (12)
typedef std::string xsd__language;
#endif

/******************************************************************************\
 *                                                                            *
 * Serializable Types                                                         *
 *                                                                            *
\******************************************************************************/


/* char has binding name 'byte' for type 'xsd:byte' */
#ifndef SOAP_TYPE_byte
#define SOAP_TYPE_byte (3)
#endif

/* int has binding name 'int' for type 'xsd:int' */
#ifndef SOAP_TYPE_int
#define SOAP_TYPE_int (1)
#endif

/* time_t has binding name 'dateTime' for type 'xsd:dateTime' */
#ifndef SOAP_TYPE_dateTime
#define SOAP_TYPE_dateTime (33)
#endif

/* enum _ns5__alert_info_certainty has binding name '_ns5__alert_info_certainty' for type 'ns5:alert-info-certainty' */
#ifndef SOAP_TYPE__ns5__alert_info_certainty
#define SOAP_TYPE__ns5__alert_info_certainty (45)
#endif

/* enum _ns5__alert_info_severity has binding name '_ns5__alert_info_severity' for type 'ns5:alert-info-severity' */
#ifndef SOAP_TYPE__ns5__alert_info_severity
#define SOAP_TYPE__ns5__alert_info_severity (44)
#endif

/* enum _ns5__alert_info_urgency has binding name '_ns5__alert_info_urgency' for type 'ns5:alert-info-urgency' */
#ifndef SOAP_TYPE__ns5__alert_info_urgency
#define SOAP_TYPE__ns5__alert_info_urgency (43)
#endif

/* enum _ns5__alert_info_responseType has binding name '_ns5__alert_info_responseType' for type 'ns5:alert-info-responseType' */
#ifndef SOAP_TYPE__ns5__alert_info_responseType
#define SOAP_TYPE__ns5__alert_info_responseType (41)
#endif

/* enum _ns5__alert_info_category has binding name '_ns5__alert_info_category' for type 'ns5:alert-info-category' */
#ifndef SOAP_TYPE__ns5__alert_info_category
#define SOAP_TYPE__ns5__alert_info_category (39)
#endif

/* enum _ns5__alert_scope has binding name '_ns5__alert_scope' for type 'ns5:alert-scope' */
#ifndef SOAP_TYPE__ns5__alert_scope
#define SOAP_TYPE__ns5__alert_scope (36)
#endif

/* enum _ns5__alert_msgType has binding name '_ns5__alert_msgType' for type 'ns5:alert-msgType' */
#ifndef SOAP_TYPE__ns5__alert_msgType
#define SOAP_TYPE__ns5__alert_msgType (35)
#endif

/* enum _ns5__alert_status has binding name '_ns5__alert_status' for type 'ns5:alert-status' */
#ifndef SOAP_TYPE__ns5__alert_status
#define SOAP_TYPE__ns5__alert_status (34)
#endif

/* _ns5__alert_info_area_geocode has binding name '_ns5__alert_info_area_geocode' for type '' */
#ifndef SOAP_TYPE__ns5__alert_info_area_geocode
#define SOAP_TYPE__ns5__alert_info_area_geocode (56)
#endif

/* _ns5__alert_info_area has binding name '_ns5__alert_info_area' for type '' */
#ifndef SOAP_TYPE__ns5__alert_info_area
#define SOAP_TYPE__ns5__alert_info_area (55)
#endif

/* _ns5__alert_info_resource has binding name '_ns5__alert_info_resource' for type '' */
#ifndef SOAP_TYPE__ns5__alert_info_resource
#define SOAP_TYPE__ns5__alert_info_resource (52)
#endif

/* _ns5__alert_info_parameter has binding name '_ns5__alert_info_parameter' for type '' */
#ifndef SOAP_TYPE__ns5__alert_info_parameter
#define SOAP_TYPE__ns5__alert_info_parameter (50)
#endif

/* _ns5__alert_info_eventCode has binding name '_ns5__alert_info_eventCode' for type '' */
#ifndef SOAP_TYPE__ns5__alert_info_eventCode
#define SOAP_TYPE__ns5__alert_info_eventCode (46)
#endif

/* _ns5__alert_info has binding name '_ns5__alert_info' for type '' */
#ifndef SOAP_TYPE__ns5__alert_info
#define SOAP_TYPE__ns5__alert_info (37)
#endif

/* _ns2__CAPHeaderTypeDef has binding name '_ns2__CAPHeaderTypeDef' for type '' */
#ifndef SOAP_TYPE__ns2__CAPHeaderTypeDef
#define SOAP_TYPE__ns2__CAPHeaderTypeDef (23)
#endif

/* _ns2__messageResponseTypeDef has binding name '_ns2__messageResponseTypeDef' for type '' */
#ifndef SOAP_TYPE__ns2__messageResponseTypeDef
#define SOAP_TYPE__ns2__messageResponseTypeDef (22)
#endif

/* _ns2__postCAPResponseTypeDef has binding name '_ns2__postCAPResponseTypeDef' for type '' */
#ifndef SOAP_TYPE__ns2__postCAPResponseTypeDef
#define SOAP_TYPE__ns2__postCAPResponseTypeDef (21)
#endif

/* _ns2__CAPServiceException has binding name '_ns2__CAPServiceException' for type '' */
#ifndef SOAP_TYPE__ns2__CAPServiceException
#define SOAP_TYPE__ns2__CAPServiceException (20)
#endif

/* _ns2__postCAPRequestTypeDef has binding name '_ns2__postCAPRequestTypeDef' for type '' */
#ifndef SOAP_TYPE__ns2__postCAPRequestTypeDef
#define SOAP_TYPE__ns2__postCAPRequestTypeDef (19)
#endif

/* _ns5__alert has binding name '_ns5__alert' for type '' */
#ifndef SOAP_TYPE__ns5__alert
#define SOAP_TYPE__ns5__alert (18)
#endif

/* _ns4__parameterListItem has binding name '_ns4__parameterListItem' for type '' */
#ifndef SOAP_TYPE__ns4__parameterListItem
#define SOAP_TYPE__ns4__parameterListItem (17)
#endif

/* ns4__subParameterListItem has binding name 'ns4__subParameterListItem' for type 'ns4:subParameterListItem' */
#ifndef SOAP_TYPE_ns4__subParameterListItem
#define SOAP_TYPE_ns4__subParameterListItem (16)
#endif

/* ns4__responseParameterList has binding name 'ns4__responseParameterList' for type 'ns4:responseParameterList' */
#ifndef SOAP_TYPE_ns4__responseParameterList
#define SOAP_TYPE_ns4__responseParameterList (15)
#endif

/* ns3__parameterListItem has binding name 'ns3__parameterListItem' for type 'ns3:parameterListItem' */
#ifndef SOAP_TYPE_ns3__parameterListItem
#define SOAP_TYPE_ns3__parameterListItem (14)
#endif

/* ns3__requestParameterList has binding name 'ns3__requestParameterList' for type 'ns3:requestParameterList' */
#ifndef SOAP_TYPE_ns3__requestParameterList
#define SOAP_TYPE_ns3__requestParameterList (13)
#endif

/* xsd__language has binding name 'xsd__language' for type 'xsd:language' */
#ifndef SOAP_TYPE_xsd__language
#define SOAP_TYPE_xsd__language (12)
#endif

/* xsd__integer has binding name 'xsd__integer' for type 'xsd:integer' */
#ifndef SOAP_TYPE_xsd__integer
#define SOAP_TYPE_xsd__integer (11)
#endif

/* xsd__decimal has binding name 'xsd__decimal' for type 'xsd:decimal' */
#ifndef SOAP_TYPE_xsd__decimal
#define SOAP_TYPE_xsd__decimal (10)
#endif

/* xsd__anyURI has binding name 'xsd__anyURI' for type 'xsd:anyURI' */
#ifndef SOAP_TYPE_xsd__anyURI
#define SOAP_TYPE_xsd__anyURI (9)
#endif

/* std::string has binding name 'std__string' for type 'xsd:string' */
#ifndef SOAP_TYPE_std__string
#define SOAP_TYPE_std__string (8)
#endif

/* struct SOAP_ENV__Fault has binding name 'SOAP_ENV__Fault' for type '' */
#ifndef SOAP_TYPE_SOAP_ENV__Fault
#define SOAP_TYPE_SOAP_ENV__Fault (85)
#endif

/* struct SOAP_ENV__Reason has binding name 'SOAP_ENV__Reason' for type '' */
#ifndef SOAP_TYPE_SOAP_ENV__Reason
#define SOAP_TYPE_SOAP_ENV__Reason (84)
#endif

/* struct SOAP_ENV__Code has binding name 'SOAP_ENV__Code' for type '' */
#ifndef SOAP_TYPE_SOAP_ENV__Code
#define SOAP_TYPE_SOAP_ENV__Code (82)
#endif

/* struct SOAP_ENV__Detail has binding name 'SOAP_ENV__Detail' for type '' */
#ifndef SOAP_TYPE_SOAP_ENV__Detail
#define SOAP_TYPE_SOAP_ENV__Detail (67)
#endif

/* struct SOAP_ENV__Header has binding name 'SOAP_ENV__Header' for type '' */
#ifndef SOAP_TYPE_SOAP_ENV__Header
#define SOAP_TYPE_SOAP_ENV__Header (65)
#endif

/* struct SOAP_ENV__Reason * has binding name 'PointerToSOAP_ENV__Reason' for type '' */
#ifndef SOAP_TYPE_PointerToSOAP_ENV__Reason
#define SOAP_TYPE_PointerToSOAP_ENV__Reason (87)
#endif

/* struct SOAP_ENV__Detail * has binding name 'PointerToSOAP_ENV__Detail' for type '' */
#ifndef SOAP_TYPE_PointerToSOAP_ENV__Detail
#define SOAP_TYPE_PointerToSOAP_ENV__Detail (86)
#endif

/* struct SOAP_ENV__Code * has binding name 'PointerToSOAP_ENV__Code' for type '' */
#ifndef SOAP_TYPE_PointerToSOAP_ENV__Code
#define SOAP_TYPE_PointerToSOAP_ENV__Code (83)
#endif

/* _ns2__postCAPRequestTypeDef * has binding name 'PointerTo_ns2__postCAPRequestTypeDef' for type '' */
#ifndef SOAP_TYPE_PointerTo_ns2__postCAPRequestTypeDef
#define SOAP_TYPE_PointerTo_ns2__postCAPRequestTypeDef (75)
#endif

/* ns3__requestParameterList * has binding name 'PointerTons3__requestParameterList' for type 'ns3:requestParameterList' */
#ifndef SOAP_TYPE_PointerTons3__requestParameterList
#define SOAP_TYPE_PointerTons3__requestParameterList (71)
#endif

/* _ns2__CAPServiceException * has binding name 'PointerTo_ns2__CAPServiceException' for type '' */
#ifndef SOAP_TYPE_PointerTo_ns2__CAPServiceException
#define SOAP_TYPE_PointerTo_ns2__CAPServiceException (68)
#endif

/* _ns2__CAPHeaderTypeDef * has binding name 'PointerTo_ns2__CAPHeaderTypeDef' for type '' */
#ifndef SOAP_TYPE_PointerTo_ns2__CAPHeaderTypeDef
#define SOAP_TYPE_PointerTo_ns2__CAPHeaderTypeDef (66)
#endif

/* int * has binding name 'PointerToint' for type 'xsd:int' */
#ifndef SOAP_TYPE_PointerToint
#define SOAP_TYPE_PointerToint (64)
#endif

/* _ns5__alert * has binding name 'PointerTo_ns5__alert' for type '' */
#ifndef SOAP_TYPE_PointerTo_ns5__alert
#define SOAP_TYPE_PointerTo_ns5__alert (62)
#endif

/* std::string * has binding name 'PointerToxsd__decimal' for type 'xsd:decimal' */
#ifndef SOAP_TYPE_PointerToxsd__decimal
#define SOAP_TYPE_PointerToxsd__decimal (58)
#endif

/* std::string * has binding name 'PointerToxsd__integer' for type 'xsd:integer' */
#ifndef SOAP_TYPE_PointerToxsd__integer
#define SOAP_TYPE_PointerToxsd__integer (53)
#endif

/* std::string * has binding name 'PointerToxsd__anyURI' for type 'xsd:anyURI' */
#ifndef SOAP_TYPE_PointerToxsd__anyURI
#define SOAP_TYPE_PointerToxsd__anyURI (49)
#endif

/* time_t * has binding name 'PointerTodateTime' for type 'xsd:dateTime' */
#ifndef SOAP_TYPE_PointerTodateTime
#define SOAP_TYPE_PointerTodateTime (48)
#endif

/* std::string * has binding name 'PointerToxsd__language' for type 'xsd:language' */
#ifndef SOAP_TYPE_PointerToxsd__language
#define SOAP_TYPE_PointerToxsd__language (38)
#endif

/* ns4__subParameterListItem * has binding name 'PointerTons4__subParameterListItem' for type 'ns4:subParameterListItem' */
#ifndef SOAP_TYPE_PointerTons4__subParameterListItem
#define SOAP_TYPE_PointerTons4__subParameterListItem (31)
#endif

/* _ns4__parameterListItem * has binding name 'PointerTo_ns4__parameterListItem' for type '' */
#ifndef SOAP_TYPE_PointerTo_ns4__parameterListItem
#define SOAP_TYPE_PointerTo_ns4__parameterListItem (29)
#endif

/* ns3__parameterListItem * has binding name 'PointerTons3__parameterListItem' for type 'ns3:parameterListItem' */
#ifndef SOAP_TYPE_PointerTons3__parameterListItem
#define SOAP_TYPE_PointerTons3__parameterListItem (25)
#endif

/* std::string * has binding name 'PointerTostd__string' for type 'xsd:string' */
#ifndef SOAP_TYPE_PointerTostd__string
#define SOAP_TYPE_PointerTostd__string (24)
#endif

/* _QName has binding name '_QName' for type 'xsd:QName' */
#ifndef SOAP_TYPE__QName
#define SOAP_TYPE__QName (6)
#endif

/* _XML has binding name '_XML' for type '' */
#ifndef SOAP_TYPE__XML
#define SOAP_TYPE__XML (5)
#endif

/* char * has binding name 'string' for type 'xsd:string' */
#ifndef SOAP_TYPE_string
#define SOAP_TYPE_string (4)
#endif

/* std::vector<_ns5__alert *>  has binding name 'std__vectorTemplateOfPointerTo_ns5__alert' for type '' */
#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTo_ns5__alert
#define SOAP_TYPE_std__vectorTemplateOfPointerTo_ns5__alert (63)
#endif

/* std::vector<char *>  has binding name 'std__vectorTemplateOf_XML' for type '' */
#ifndef SOAP_TYPE_std__vectorTemplateOf_XML
#define SOAP_TYPE_std__vectorTemplateOf_XML (61)
#endif

/* std::vector<_ns5__alert_info>  has binding name 'std__vectorTemplateOf_ns5__alert_info' for type '' */
#ifndef SOAP_TYPE_std__vectorTemplateOf_ns5__alert_info
#define SOAP_TYPE_std__vectorTemplateOf_ns5__alert_info (60)
#endif

/* std::vector<_ns5__alert_info_area>  has binding name 'std__vectorTemplateOf_ns5__alert_info_area' for type '' */
#ifndef SOAP_TYPE_std__vectorTemplateOf_ns5__alert_info_area
#define SOAP_TYPE_std__vectorTemplateOf_ns5__alert_info_area (59)
#endif

/* std::vector<_ns5__alert_info_area_geocode>  has binding name 'std__vectorTemplateOf_ns5__alert_info_area_geocode' for type '' */
#ifndef SOAP_TYPE_std__vectorTemplateOf_ns5__alert_info_area_geocode
#define SOAP_TYPE_std__vectorTemplateOf_ns5__alert_info_area_geocode (57)
#endif

/* std::vector<_ns5__alert_info_resource>  has binding name 'std__vectorTemplateOf_ns5__alert_info_resource' for type '' */
#ifndef SOAP_TYPE_std__vectorTemplateOf_ns5__alert_info_resource
#define SOAP_TYPE_std__vectorTemplateOf_ns5__alert_info_resource (54)
#endif

/* std::vector<_ns5__alert_info_parameter>  has binding name 'std__vectorTemplateOf_ns5__alert_info_parameter' for type '' */
#ifndef SOAP_TYPE_std__vectorTemplateOf_ns5__alert_info_parameter
#define SOAP_TYPE_std__vectorTemplateOf_ns5__alert_info_parameter (51)
#endif

/* std::vector<_ns5__alert_info_eventCode>  has binding name 'std__vectorTemplateOf_ns5__alert_info_eventCode' for type '' */
#ifndef SOAP_TYPE_std__vectorTemplateOf_ns5__alert_info_eventCode
#define SOAP_TYPE_std__vectorTemplateOf_ns5__alert_info_eventCode (47)
#endif

/* std::vector<enum _ns5__alert_info_responseType>  has binding name 'std__vectorTemplateOf_ns5__alert_info_responseType' for type 'ns5:alert-info-responseType' */
#ifndef SOAP_TYPE_std__vectorTemplateOf_ns5__alert_info_responseType
#define SOAP_TYPE_std__vectorTemplateOf_ns5__alert_info_responseType (42)
#endif

/* std::vector<enum _ns5__alert_info_category>  has binding name 'std__vectorTemplateOf_ns5__alert_info_category' for type 'ns5:alert-info-category' */
#ifndef SOAP_TYPE_std__vectorTemplateOf_ns5__alert_info_category
#define SOAP_TYPE_std__vectorTemplateOf_ns5__alert_info_category (40)
#endif

/* std::vector<ns4__subParameterListItem *>  has binding name 'std__vectorTemplateOfPointerTons4__subParameterListItem' for type 'ns4:subParameterListItem' */
#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons4__subParameterListItem
#define SOAP_TYPE_std__vectorTemplateOfPointerTons4__subParameterListItem (32)
#endif

/* std::vector<_ns4__parameterListItem *>  has binding name 'std__vectorTemplateOfPointerTo_ns4__parameterListItem' for type '' */
#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTo_ns4__parameterListItem
#define SOAP_TYPE_std__vectorTemplateOfPointerTo_ns4__parameterListItem (30)
#endif

/* std::vector<std::string>  has binding name 'std__vectorTemplateOfstd__string' for type 'xsd:string' */
#ifndef SOAP_TYPE_std__vectorTemplateOfstd__string
#define SOAP_TYPE_std__vectorTemplateOfstd__string (28)
#endif

/* std::vector<ns3__parameterListItem *>  has binding name 'std__vectorTemplateOfPointerTons3__parameterListItem' for type 'ns3:parameterListItem' */
#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons3__parameterListItem
#define SOAP_TYPE_std__vectorTemplateOfPointerTons3__parameterListItem (26)
#endif

/******************************************************************************\
 *                                                                            *
 * Externals                                                                  *
 *                                                                            *
\******************************************************************************/


#endif

/* End of soapStub.h */
