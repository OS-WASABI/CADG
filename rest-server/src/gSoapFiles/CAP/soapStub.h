/* soapStub.h
   Generated by gSOAP 2.8.75 for cap.h

gSOAP XML Web services tools
Copyright (C) 2000-2018, Robert van Engelen, Genivia Inc. All Rights Reserved.
The soapcpp2 tool and its generated software are released under the GPL.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial use license is available from Genivia Inc., contact@genivia.com
--------------------------------------------------------------------------------
*/

#include <vector>
#define SOAP_NAMESPACE_OF_ns2	"urn:oasis:names:tc:emergency:cap:1.2"

#ifndef soapStub_H
#define soapStub_H
#include "stdsoap2.h"
#if GSOAP_VERSION != 20875
# error "GSOAP VERSION 20875 MISMATCH IN GENERATED CODE VERSUS LIBRARY CODE: PLEASE REINSTALL PACKAGE"
#endif


/******************************************************************************\
 *                                                                            *
 * Enumeration Types                                                          *
 *                                                                            *
\******************************************************************************/


/* cap.h:210 */
#ifndef SOAP_TYPE__ns2__alert_status
#define SOAP_TYPE__ns2__alert_status (15)
/* ns2:alert-status */
enum _ns2__alert_status {
	_ns2__alert_status__Actual = 0,
	_ns2__alert_status__Exercise = 1,
	_ns2__alert_status__System = 2,
	_ns2__alert_status__Test = 3,
	_ns2__alert_status__Draft = 4
};
#endif

/* cap.h:219 */
#ifndef SOAP_TYPE__ns2__alert_msgType
#define SOAP_TYPE__ns2__alert_msgType (16)
/* ns2:alert-msgType */
enum _ns2__alert_msgType {
	_ns2__alert_msgType__Alert = 0,
	_ns2__alert_msgType__Update = 1,
	_ns2__alert_msgType__Cancel = 2,
	_ns2__alert_msgType__Ack = 3,
	_ns2__alert_msgType__Error = 4
};
#endif

/* cap.h:230 */
#ifndef SOAP_TYPE__ns2__alert_scope
#define SOAP_TYPE__ns2__alert_scope (18)
/* ns2:alert-scope */
enum _ns2__alert_scope {
	_ns2__alert_scope__Public = 0,
	_ns2__alert_scope__Restricted = 1,
	_ns2__alert_scope__Private = 2
};
#endif

/* cap.h:268 */
#ifndef SOAP_TYPE__ns2__alert_info_category
#define SOAP_TYPE__ns2__alert_info_category (22)
/* ns2:alert-info-category */
enum _ns2__alert_info_category {
	_ns2__alert_info_category__Geo = 0,
	_ns2__alert_info_category__Met = 1,
	_ns2__alert_info_category__Safety = 2,
	_ns2__alert_info_category__Security = 3,
	_ns2__alert_info_category__Rescue = 4,
	_ns2__alert_info_category__Fire = 5,
	_ns2__alert_info_category__Health = 6,
	_ns2__alert_info_category__Env = 7,
	_ns2__alert_info_category__Transport = 8,
	_ns2__alert_info_category__Infra = 9,
	_ns2__alert_info_category__CBRNE = 10,
	_ns2__alert_info_category__Other = 11
};
#endif

/* cap.h:288 */
#ifndef SOAP_TYPE__ns2__alert_info_responseType
#define SOAP_TYPE__ns2__alert_info_responseType (24)
/* ns2:alert-info-responseType */
enum _ns2__alert_info_responseType {
	_ns2__alert_info_responseType__Shelter = 0,
	_ns2__alert_info_responseType__Evacuate = 1,
	_ns2__alert_info_responseType__Prepare = 2,
	_ns2__alert_info_responseType__Execute = 3,
	_ns2__alert_info_responseType__Avoid = 4,
	_ns2__alert_info_responseType__Monitor = 5,
	_ns2__alert_info_responseType__Assess = 6,
	_ns2__alert_info_responseType__AllClear = 7,
	_ns2__alert_info_responseType__None = 8
};
#endif

/* cap.h:301 */
#ifndef SOAP_TYPE__ns2__alert_info_urgency
#define SOAP_TYPE__ns2__alert_info_urgency (26)
/* ns2:alert-info-urgency */
enum _ns2__alert_info_urgency {
	_ns2__alert_info_urgency__Immediate = 0,
	_ns2__alert_info_urgency__Expected = 1,
	_ns2__alert_info_urgency__Future = 2,
	_ns2__alert_info_urgency__Past = 3,
	_ns2__alert_info_urgency__Unknown = 4
};
#endif

/* cap.h:310 */
#ifndef SOAP_TYPE__ns2__alert_info_severity
#define SOAP_TYPE__ns2__alert_info_severity (27)
/* ns2:alert-info-severity */
enum _ns2__alert_info_severity {
	_ns2__alert_info_severity__Extreme = 0,
	_ns2__alert_info_severity__Severe = 1,
	_ns2__alert_info_severity__Moderate = 2,
	_ns2__alert_info_severity__Minor = 3,
	_ns2__alert_info_severity__Unknown = 4
};
#endif

/* cap.h:319 */
#ifndef SOAP_TYPE__ns2__alert_info_certainty
#define SOAP_TYPE__ns2__alert_info_certainty (28)
/* ns2:alert-info-certainty */
enum _ns2__alert_info_certainty {
	_ns2__alert_info_certainty__Observed = 0,
	_ns2__alert_info_certainty__Likely = 1,
	_ns2__alert_info_certainty__Possible = 2,
	_ns2__alert_info_certainty__Unlikely = 3,
	_ns2__alert_info_certainty__Unknown = 4
};
#endif

/******************************************************************************\
 *                                                                            *
 * Types with Custom Serializers                                              *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Classes, Structs and Unions                                                *
 *                                                                            *
\******************************************************************************/

class _ns2__alert_info_eventCode;	/* cap.h:342 */
class _ns2__alert_info_parameter;	/* cap.h:383 */
class _ns2__alert_info_resource;	/* cap.h:403 */
class _ns2__alert_info_area_geocode;	/* cap.h:452 */
class _ns2__alert_info_area;	/* cap.h:431 */
class _ns2__alert_info;	/* cap.h:261 */
class _ns2__alert;	/* cap.h:164 */

/* cap.h:342 */
#ifndef SOAP_TYPE__ns2__alert_info_eventCode
#define SOAP_TYPE__ns2__alert_info_eventCode (29)
/* complex XML schema type 'ns2:alert-info-eventCode': */
class SOAP_CMAC _ns2__alert_info_eventCode {
      public:
        /// Required element 'ns2:valueName' of XML schema type 'xsd:string'
        std::string valueName;
        /// Required element 'ns2:value' of XML schema type 'xsd:string'
        std::string value;
      public:
        /// Return unique type id SOAP_TYPE__ns2__alert_info_eventCode
        virtual long soap_type(void) const { return SOAP_TYPE__ns2__alert_info_eventCode; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns2__alert_info_eventCode, default initialized and not managed by a soap context
        virtual _ns2__alert_info_eventCode *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_ns2__alert_info_eventCode); }
      public:
        /// Constructor with default initializations
        _ns2__alert_info_eventCode() : valueName(), value() { }
        virtual ~_ns2__alert_info_eventCode() { }
        /// Friend allocator used by soap_new__ns2__alert_info_eventCode(struct soap*, int)
        friend SOAP_FMAC1 _ns2__alert_info_eventCode * SOAP_FMAC2 soap_instantiate__ns2__alert_info_eventCode(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* cap.h:383 */
#ifndef SOAP_TYPE__ns2__alert_info_parameter
#define SOAP_TYPE__ns2__alert_info_parameter (33)
/* complex XML schema type 'ns2:alert-info-parameter': */
class SOAP_CMAC _ns2__alert_info_parameter {
      public:
        /// Required element 'ns2:valueName' of XML schema type 'xsd:string'
        std::string valueName;
        /// Required element 'ns2:value' of XML schema type 'xsd:string'
        std::string value;
      public:
        /// Return unique type id SOAP_TYPE__ns2__alert_info_parameter
        virtual long soap_type(void) const { return SOAP_TYPE__ns2__alert_info_parameter; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns2__alert_info_parameter, default initialized and not managed by a soap context
        virtual _ns2__alert_info_parameter *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_ns2__alert_info_parameter); }
      public:
        /// Constructor with default initializations
        _ns2__alert_info_parameter() : valueName(), value() { }
        virtual ~_ns2__alert_info_parameter() { }
        /// Friend allocator used by soap_new__ns2__alert_info_parameter(struct soap*, int)
        friend SOAP_FMAC1 _ns2__alert_info_parameter * SOAP_FMAC2 soap_instantiate__ns2__alert_info_parameter(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* cap.h:403 */
#ifndef SOAP_TYPE__ns2__alert_info_resource
#define SOAP_TYPE__ns2__alert_info_resource (35)
/* complex XML schema type 'ns2:alert-info-resource': */
class SOAP_CMAC _ns2__alert_info_resource {
      public:
        /// Required element 'ns2:resourceDesc' of XML schema type 'xsd:string'
        std::string resourceDesc;
        /// Required element 'ns2:mimeType' of XML schema type 'xsd:string'
        std::string mimeType;
        /// Optional element 'ns2:size' of XML schema type 'xsd:integer'
        std::string *size;
        /// Optional element 'ns2:uri' of XML schema type 'xsd:anyURI'
        std::string *uri;
        /// Optional element 'ns2:derefUri' of XML schema type 'xsd:string'
        std::string *derefUri;
        /// Optional element 'ns2:digest' of XML schema type 'xsd:string'
        std::string *digest;
      public:
        /// Return unique type id SOAP_TYPE__ns2__alert_info_resource
        virtual long soap_type(void) const { return SOAP_TYPE__ns2__alert_info_resource; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns2__alert_info_resource, default initialized and not managed by a soap context
        virtual _ns2__alert_info_resource *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_ns2__alert_info_resource); }
      public:
        /// Constructor with default initializations
        _ns2__alert_info_resource() : resourceDesc(), mimeType(), size(), uri(), derefUri(), digest() { }
        virtual ~_ns2__alert_info_resource() { }
        /// Friend allocator used by soap_new__ns2__alert_info_resource(struct soap*, int)
        friend SOAP_FMAC1 _ns2__alert_info_resource * SOAP_FMAC2 soap_instantiate__ns2__alert_info_resource(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* cap.h:452 */
#ifndef SOAP_TYPE__ns2__alert_info_area_geocode
#define SOAP_TYPE__ns2__alert_info_area_geocode (39)
/* complex XML schema type 'ns2:alert-info-area-geocode': */
class SOAP_CMAC _ns2__alert_info_area_geocode {
      public:
        /// Required element 'ns2:valueName' of XML schema type 'xsd:string'
        std::string valueName;
        /// Required element 'ns2:value' of XML schema type 'xsd:string'
        std::string value;
      public:
        /// Return unique type id SOAP_TYPE__ns2__alert_info_area_geocode
        virtual long soap_type(void) const { return SOAP_TYPE__ns2__alert_info_area_geocode; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns2__alert_info_area_geocode, default initialized and not managed by a soap context
        virtual _ns2__alert_info_area_geocode *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_ns2__alert_info_area_geocode); }
      public:
        /// Constructor with default initializations
        _ns2__alert_info_area_geocode() : valueName(), value() { }
        virtual ~_ns2__alert_info_area_geocode() { }
        /// Friend allocator used by soap_new__ns2__alert_info_area_geocode(struct soap*, int)
        friend SOAP_FMAC1 _ns2__alert_info_area_geocode * SOAP_FMAC2 soap_instantiate__ns2__alert_info_area_geocode(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* cap.h:431 */
#ifndef SOAP_TYPE__ns2__alert_info_area
#define SOAP_TYPE__ns2__alert_info_area (38)
/* complex XML schema type 'ns2:alert-info-area': */
class SOAP_CMAC _ns2__alert_info_area {
      public:
        /// Required element 'ns2:areaDesc' of XML schema type 'xsd:string'
        std::string areaDesc;
        /// Optional element 'ns2:polygon' of XML schema type 'xsd:string'
        std::vector<std::string> polygon;
        /// Optional element 'ns2:circle' of XML schema type 'xsd:string'
        std::vector<std::string> circle;
        /// Optional element 'ns2:geocode' of XML schema type 'ns2:alert-info-area-geocode'
        std::vector<_ns2__alert_info_area_geocode> geocode;
        /// Optional element 'ns2:altitude' of XML schema type 'xsd:decimal'
        std::string *altitude;
        /// Optional element 'ns2:ceiling' of XML schema type 'xsd:decimal'
        std::string *ceiling;
      public:
        /// Return unique type id SOAP_TYPE__ns2__alert_info_area
        virtual long soap_type(void) const { return SOAP_TYPE__ns2__alert_info_area; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns2__alert_info_area, default initialized and not managed by a soap context
        virtual _ns2__alert_info_area *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_ns2__alert_info_area); }
      public:
        /// Constructor with default initializations
        _ns2__alert_info_area() : areaDesc(), polygon(), circle(), geocode(), altitude(), ceiling() { }
        virtual ~_ns2__alert_info_area() { }
        /// Friend allocator used by soap_new__ns2__alert_info_area(struct soap*, int)
        friend SOAP_FMAC1 _ns2__alert_info_area * SOAP_FMAC2 soap_instantiate__ns2__alert_info_area(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* cap.h:261 */
#ifndef SOAP_TYPE__ns2__alert_info
#define SOAP_TYPE__ns2__alert_info (20)
/* complex XML schema type 'ns2:alert-info': */
class SOAP_CMAC _ns2__alert_info {
      public:
        /// Optional element 'ns2:language' of XML schema type 'xsd:language'
        std::string *language;	///< optional with default value = "en-US"
        /// Required element 'ns2:category' of XML schema type 'ns2:alert-info-category'
        std::vector<enum _ns2__alert_info_category> category;
        /// Required element 'ns2:event' of XML schema type 'xsd:string'
        std::string event;
        /// Optional element 'ns2:responseType' of XML schema type 'ns2:alert-info-responseType'
        std::vector<enum _ns2__alert_info_responseType> responseType;
        /// Required element 'ns2:urgency' of XML schema type 'ns2:alert-info-urgency'
        enum _ns2__alert_info_urgency urgency;
        /// Required element 'ns2:severity' of XML schema type 'ns2:alert-info-severity'
        enum _ns2__alert_info_severity severity;
        /// Required element 'ns2:certainty' of XML schema type 'ns2:alert-info-certainty'
        enum _ns2__alert_info_certainty certainty;
        /// Optional element 'ns2:audience' of XML schema type 'xsd:string'
        std::string *audience;
        /// Optional element 'ns2:eventCode' of XML schema type 'ns2:alert-info-eventCode'
        std::vector<_ns2__alert_info_eventCode> eventCode;
        /// Optional element 'ns2:effective' of XML schema type 'xsd:dateTime'
        time_t *effective;
        /// Optional element 'ns2:onset' of XML schema type 'xsd:dateTime'
        time_t *onset;
        /// Optional element 'ns2:expires' of XML schema type 'xsd:dateTime'
        time_t *expires;
        /// Optional element 'ns2:senderName' of XML schema type 'xsd:string'
        std::string *senderName;
        /// Optional element 'ns2:headline' of XML schema type 'xsd:string'
        std::string *headline;
        /// Optional element 'ns2:description' of XML schema type 'xsd:string'
        std::string *description;
        /// Optional element 'ns2:instruction' of XML schema type 'xsd:string'
        std::string *instruction;
        /// Optional element 'ns2:web' of XML schema type 'xsd:anyURI'
        std::string *web;
        /// Optional element 'ns2:contact' of XML schema type 'xsd:string'
        std::string *contact;
        /// Optional element 'ns2:parameter' of XML schema type 'ns2:alert-info-parameter'
        std::vector<_ns2__alert_info_parameter> parameter;
        /// Optional element 'ns2:resource' of XML schema type 'ns2:alert-info-resource'
        std::vector<_ns2__alert_info_resource> resource;
        /// Optional element 'ns2:area' of XML schema type 'ns2:alert-info-area'
        std::vector<_ns2__alert_info_area> area;
      public:
        /// Return unique type id SOAP_TYPE__ns2__alert_info
        virtual long soap_type(void) const { return SOAP_TYPE__ns2__alert_info; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns2__alert_info, default initialized and not managed by a soap context
        virtual _ns2__alert_info *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_ns2__alert_info); }
      public:
        /// Constructor with default initializations
        _ns2__alert_info() : language(), category(), event(), responseType(), urgency(), severity(), certainty(), audience(), eventCode(), effective(), onset(), expires(), senderName(), headline(), description(), instruction(), web(), contact(), parameter(), resource(), area() { }
        virtual ~_ns2__alert_info() { }
        /// Friend allocator used by soap_new__ns2__alert_info(struct soap*, int)
        friend SOAP_FMAC1 _ns2__alert_info * SOAP_FMAC2 soap_instantiate__ns2__alert_info(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* cap.h:164 */
#ifndef SOAP_TYPE__ns2__alert
#define SOAP_TYPE__ns2__alert (13)
/* complex XML schema type 'ns2:alert': */
class SOAP_CMAC _ns2__alert {
      public:
        /// Required element 'ns2:identifier' of XML schema type 'xsd:string'
        std::string identifier;
        /// Required element 'ns2:sender' of XML schema type 'xsd:string'
        std::string sender;
        /// Required element 'ns2:sent' of XML schema type 'xsd:dateTime'
        time_t sent;
        /// Required element 'ns2:status' of XML schema type 'ns2:alert-status'
        enum _ns2__alert_status status;
        /// Required element 'ns2:msgType' of XML schema type 'ns2:alert-msgType'
        enum _ns2__alert_msgType msgType;
        /// Optional element 'ns2:source' of XML schema type 'xsd:string'
        std::string *source;
        /// Required element 'ns2:scope' of XML schema type 'ns2:alert-scope'
        enum _ns2__alert_scope scope;
        /// Optional element 'ns2:restriction' of XML schema type 'xsd:string'
        std::string *restriction;
        /// Optional element 'ns2:addresses' of XML schema type 'xsd:string'
        std::string *addresses;
        /// Optional element 'ns2:code' of XML schema type 'xsd:string'
        std::vector<std::string> code;
        /// Optional element 'ns2:note' of XML schema type 'xsd:string'
        std::string *note;
        /// Optional element 'ns2:references' of XML schema type 'xsd:string'
        std::string *references;
        /// Optional element 'ns2:incidents' of XML schema type 'xsd:string'
        std::string *incidents;
        /// Optional element 'ns2:info' of XML schema type 'ns2:alert-info'
        std::vector<_ns2__alert_info> info;
        std::vector<char *> __any;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__ns2__alert
        virtual long soap_type(void) const { return SOAP_TYPE__ns2__alert; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns2__alert, default initialized and not managed by a soap context
        virtual _ns2__alert *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_ns2__alert); }
      public:
        /// Constructor with default initializations
        _ns2__alert() : identifier(), sender(), sent(), status(), msgType(), source(), scope(), restriction(), addresses(), code(), note(), references(), incidents(), info(), __any(), soap() { }
        virtual ~_ns2__alert() { }
        /// Friend allocator used by soap_new__ns2__alert(struct soap*, int)
        friend SOAP_FMAC1 _ns2__alert * SOAP_FMAC2 soap_instantiate__ns2__alert(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* cap.h:568 */
#ifndef WITH_NOGLOBAL
#ifndef SOAP_TYPE_SOAP_ENV__Header
#define SOAP_TYPE_SOAP_ENV__Header (46)
/* SOAP_ENV__Header: */
struct SOAP_CMAC SOAP_ENV__Header {
      public:
        /** Return unique type id SOAP_TYPE_SOAP_ENV__Header */
        long soap_type() const { return SOAP_TYPE_SOAP_ENV__Header; }
        /** Constructor with member initializations */
        SOAP_ENV__Header() { }
        /** Friend allocator */
        friend SOAP_FMAC1 SOAP_ENV__Header * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Header(struct soap*, int, const char*, const char*, size_t*);
};
#endif
#endif

/* cap.h:568 */
#ifndef WITH_NOGLOBAL
#ifndef SOAP_TYPE_SOAP_ENV__Code
#define SOAP_TYPE_SOAP_ENV__Code (47)
/* Type SOAP_ENV__Code is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* SOAP_ENV__Code: */
struct SOAP_CMAC SOAP_ENV__Code {
      public:
        /** Optional element 'SOAP-ENV:Value' of XML schema type 'xsd:QName' */
        char *SOAP_ENV__Value;
        /** Optional element 'SOAP-ENV:Subcode' of XML schema type 'SOAP-ENV:Code' */
        struct SOAP_ENV__Code *SOAP_ENV__Subcode;
      public:
        /** Return unique type id SOAP_TYPE_SOAP_ENV__Code */
        long soap_type() const { return SOAP_TYPE_SOAP_ENV__Code; }
        /** Constructor with member initializations */
        SOAP_ENV__Code() : SOAP_ENV__Value(), SOAP_ENV__Subcode() { }
        /** Friend allocator */
        friend SOAP_FMAC1 SOAP_ENV__Code * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Code(struct soap*, int, const char*, const char*, size_t*);
};
#endif
#endif

/* cap.h:568 */
#ifndef WITH_NOGLOBAL
#ifndef SOAP_TYPE_SOAP_ENV__Detail
#define SOAP_TYPE_SOAP_ENV__Detail (49)
/* SOAP_ENV__Detail: */
struct SOAP_CMAC SOAP_ENV__Detail {
      public:
        char *__any;
        /** Any type of element 'fault' assigned to fault with its SOAP_TYPE_<typename> assigned to __type */
        /** Do not create a cyclic data structure throught this member unless SOAP encoding or SOAP_XML_GRAPH are used for id-ref serialization */
        int __type;
        void *fault;
      public:
        /** Return unique type id SOAP_TYPE_SOAP_ENV__Detail */
        long soap_type() const { return SOAP_TYPE_SOAP_ENV__Detail; }
        /** Constructor with member initializations */
        SOAP_ENV__Detail() : __any(), __type(), fault() { }
        /** Friend allocator */
        friend SOAP_FMAC1 SOAP_ENV__Detail * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Detail(struct soap*, int, const char*, const char*, size_t*);
};
#endif
#endif

/* cap.h:568 */
#ifndef WITH_NOGLOBAL
#ifndef SOAP_TYPE_SOAP_ENV__Reason
#define SOAP_TYPE_SOAP_ENV__Reason (52)
/* SOAP_ENV__Reason: */
struct SOAP_CMAC SOAP_ENV__Reason {
      public:
        /** Optional element 'SOAP-ENV:Text' of XML schema type 'xsd:string' */
        char *SOAP_ENV__Text;
      public:
        /** Return unique type id SOAP_TYPE_SOAP_ENV__Reason */
        long soap_type() const { return SOAP_TYPE_SOAP_ENV__Reason; }
        /** Constructor with member initializations */
        SOAP_ENV__Reason() : SOAP_ENV__Text() { }
        /** Friend allocator */
        friend SOAP_FMAC1 SOAP_ENV__Reason * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Reason(struct soap*, int, const char*, const char*, size_t*);
};
#endif
#endif

/* cap.h:568 */
#ifndef WITH_NOGLOBAL
#ifndef SOAP_TYPE_SOAP_ENV__Fault
#define SOAP_TYPE_SOAP_ENV__Fault (53)
/* SOAP_ENV__Fault: */
struct SOAP_CMAC SOAP_ENV__Fault {
      public:
        /** Optional element 'faultcode' of XML schema type 'xsd:QName' */
        char *faultcode;
        /** Optional element 'faultstring' of XML schema type 'xsd:string' */
        char *faultstring;
        /** Optional element 'faultactor' of XML schema type 'xsd:string' */
        char *faultactor;
        /** Optional element 'detail' of XML schema type 'SOAP-ENV:Detail' */
        struct SOAP_ENV__Detail *detail;
        /** Optional element 'SOAP-ENV:Code' of XML schema type 'SOAP-ENV:Code' */
        struct SOAP_ENV__Code *SOAP_ENV__Code;
        /** Optional element 'SOAP-ENV:Reason' of XML schema type 'SOAP-ENV:Reason' */
        struct SOAP_ENV__Reason *SOAP_ENV__Reason;
        /** Optional element 'SOAP-ENV:Node' of XML schema type 'xsd:string' */
        char *SOAP_ENV__Node;
        /** Optional element 'SOAP-ENV:Role' of XML schema type 'xsd:string' */
        char *SOAP_ENV__Role;
        /** Optional element 'SOAP-ENV:Detail' of XML schema type 'SOAP-ENV:Detail' */
        struct SOAP_ENV__Detail *SOAP_ENV__Detail;
      public:
        /** Return unique type id SOAP_TYPE_SOAP_ENV__Fault */
        long soap_type() const { return SOAP_TYPE_SOAP_ENV__Fault; }
        /** Constructor with member initializations */
        SOAP_ENV__Fault() : faultcode(), faultstring(), faultactor(), detail(), SOAP_ENV__Code(), SOAP_ENV__Reason(), SOAP_ENV__Node(), SOAP_ENV__Role(), SOAP_ENV__Detail() { }
        /** Friend allocator */
        friend SOAP_FMAC1 SOAP_ENV__Fault * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Fault(struct soap*, int, const char*, const char*, size_t*);
};
#endif
#endif

/******************************************************************************\
 *                                                                            *
 * Typedefs                                                                   *
 *                                                                            *
\******************************************************************************/


/* (built-in):0 */
#ifndef SOAP_TYPE__XML
#define SOAP_TYPE__XML (5)
typedef char *_XML;
#endif

/* (built-in):0 */
#ifndef SOAP_TYPE__QName
#define SOAP_TYPE__QName (6)
typedef char *_QName;
#endif

/* cap.h:145 */
#ifndef SOAP_TYPE_xsd__anyURI
#define SOAP_TYPE_xsd__anyURI (9)
typedef std::string xsd__anyURI;
#endif

/* cap.h:148 */
#ifndef SOAP_TYPE_xsd__decimal
#define SOAP_TYPE_xsd__decimal (10)
typedef std::string xsd__decimal;
#endif

/* cap.h:151 */
#ifndef SOAP_TYPE_xsd__integer
#define SOAP_TYPE_xsd__integer (11)
typedef std::string xsd__integer;
#endif

/* cap.h:154 */
#ifndef SOAP_TYPE_xsd__language
#define SOAP_TYPE_xsd__language (12)
typedef std::string xsd__language;
#endif

/******************************************************************************\
 *                                                                            *
 * Serializable Types                                                         *
 *                                                                            *
\******************************************************************************/


/* char has binding name 'byte' for type 'xsd:byte' */
#ifndef SOAP_TYPE_byte
#define SOAP_TYPE_byte (3)
#endif

/* int has binding name 'int' for type 'xsd:int' */
#ifndef SOAP_TYPE_int
#define SOAP_TYPE_int (1)
#endif

/* time_t has binding name 'dateTime' for type 'xsd:dateTime' */
#ifndef SOAP_TYPE_dateTime
#define SOAP_TYPE_dateTime (14)
#endif

/* enum _ns2__alert_info_certainty has binding name '_ns2__alert_info_certainty' for type 'ns2:alert-info-certainty' */
#ifndef SOAP_TYPE__ns2__alert_info_certainty
#define SOAP_TYPE__ns2__alert_info_certainty (28)
#endif

/* enum _ns2__alert_info_severity has binding name '_ns2__alert_info_severity' for type 'ns2:alert-info-severity' */
#ifndef SOAP_TYPE__ns2__alert_info_severity
#define SOAP_TYPE__ns2__alert_info_severity (27)
#endif

/* enum _ns2__alert_info_urgency has binding name '_ns2__alert_info_urgency' for type 'ns2:alert-info-urgency' */
#ifndef SOAP_TYPE__ns2__alert_info_urgency
#define SOAP_TYPE__ns2__alert_info_urgency (26)
#endif

/* enum _ns2__alert_info_responseType has binding name '_ns2__alert_info_responseType' for type 'ns2:alert-info-responseType' */
#ifndef SOAP_TYPE__ns2__alert_info_responseType
#define SOAP_TYPE__ns2__alert_info_responseType (24)
#endif

/* enum _ns2__alert_info_category has binding name '_ns2__alert_info_category' for type 'ns2:alert-info-category' */
#ifndef SOAP_TYPE__ns2__alert_info_category
#define SOAP_TYPE__ns2__alert_info_category (22)
#endif

/* enum _ns2__alert_scope has binding name '_ns2__alert_scope' for type 'ns2:alert-scope' */
#ifndef SOAP_TYPE__ns2__alert_scope
#define SOAP_TYPE__ns2__alert_scope (18)
#endif

/* enum _ns2__alert_msgType has binding name '_ns2__alert_msgType' for type 'ns2:alert-msgType' */
#ifndef SOAP_TYPE__ns2__alert_msgType
#define SOAP_TYPE__ns2__alert_msgType (16)
#endif

/* enum _ns2__alert_status has binding name '_ns2__alert_status' for type 'ns2:alert-status' */
#ifndef SOAP_TYPE__ns2__alert_status
#define SOAP_TYPE__ns2__alert_status (15)
#endif

/* _ns2__alert_info_area_geocode has binding name '_ns2__alert_info_area_geocode' for type '' */
#ifndef SOAP_TYPE__ns2__alert_info_area_geocode
#define SOAP_TYPE__ns2__alert_info_area_geocode (39)
#endif

/* _ns2__alert_info_area has binding name '_ns2__alert_info_area' for type '' */
#ifndef SOAP_TYPE__ns2__alert_info_area
#define SOAP_TYPE__ns2__alert_info_area (38)
#endif

/* _ns2__alert_info_resource has binding name '_ns2__alert_info_resource' for type '' */
#ifndef SOAP_TYPE__ns2__alert_info_resource
#define SOAP_TYPE__ns2__alert_info_resource (35)
#endif

/* _ns2__alert_info_parameter has binding name '_ns2__alert_info_parameter' for type '' */
#ifndef SOAP_TYPE__ns2__alert_info_parameter
#define SOAP_TYPE__ns2__alert_info_parameter (33)
#endif

/* _ns2__alert_info_eventCode has binding name '_ns2__alert_info_eventCode' for type '' */
#ifndef SOAP_TYPE__ns2__alert_info_eventCode
#define SOAP_TYPE__ns2__alert_info_eventCode (29)
#endif

/* _ns2__alert_info has binding name '_ns2__alert_info' for type '' */
#ifndef SOAP_TYPE__ns2__alert_info
#define SOAP_TYPE__ns2__alert_info (20)
#endif

/* _ns2__alert has binding name '_ns2__alert' for type '' */
#ifndef SOAP_TYPE__ns2__alert
#define SOAP_TYPE__ns2__alert (13)
#endif

/* xsd__language has binding name 'xsd__language' for type 'xsd:language' */
#ifndef SOAP_TYPE_xsd__language
#define SOAP_TYPE_xsd__language (12)
#endif

/* xsd__integer has binding name 'xsd__integer' for type 'xsd:integer' */
#ifndef SOAP_TYPE_xsd__integer
#define SOAP_TYPE_xsd__integer (11)
#endif

/* xsd__decimal has binding name 'xsd__decimal' for type 'xsd:decimal' */
#ifndef SOAP_TYPE_xsd__decimal
#define SOAP_TYPE_xsd__decimal (10)
#endif

/* xsd__anyURI has binding name 'xsd__anyURI' for type 'xsd:anyURI' */
#ifndef SOAP_TYPE_xsd__anyURI
#define SOAP_TYPE_xsd__anyURI (9)
#endif

/* std::string has binding name 'std__string' for type 'xsd:string' */
#ifndef SOAP_TYPE_std__string
#define SOAP_TYPE_std__string (8)
#endif

/* struct SOAP_ENV__Fault has binding name 'SOAP_ENV__Fault' for type '' */
#ifndef SOAP_TYPE_SOAP_ENV__Fault
#define SOAP_TYPE_SOAP_ENV__Fault (53)
#endif

/* struct SOAP_ENV__Reason has binding name 'SOAP_ENV__Reason' for type '' */
#ifndef SOAP_TYPE_SOAP_ENV__Reason
#define SOAP_TYPE_SOAP_ENV__Reason (52)
#endif

/* struct SOAP_ENV__Detail has binding name 'SOAP_ENV__Detail' for type '' */
#ifndef SOAP_TYPE_SOAP_ENV__Detail
#define SOAP_TYPE_SOAP_ENV__Detail (49)
#endif

/* struct SOAP_ENV__Code has binding name 'SOAP_ENV__Code' for type '' */
#ifndef SOAP_TYPE_SOAP_ENV__Code
#define SOAP_TYPE_SOAP_ENV__Code (47)
#endif

/* struct SOAP_ENV__Header has binding name 'SOAP_ENV__Header' for type '' */
#ifndef SOAP_TYPE_SOAP_ENV__Header
#define SOAP_TYPE_SOAP_ENV__Header (46)
#endif

/* struct SOAP_ENV__Reason * has binding name 'PointerToSOAP_ENV__Reason' for type '' */
#ifndef SOAP_TYPE_PointerToSOAP_ENV__Reason
#define SOAP_TYPE_PointerToSOAP_ENV__Reason (55)
#endif

/* struct SOAP_ENV__Detail * has binding name 'PointerToSOAP_ENV__Detail' for type '' */
#ifndef SOAP_TYPE_PointerToSOAP_ENV__Detail
#define SOAP_TYPE_PointerToSOAP_ENV__Detail (54)
#endif

/* struct SOAP_ENV__Code * has binding name 'PointerToSOAP_ENV__Code' for type '' */
#ifndef SOAP_TYPE_PointerToSOAP_ENV__Code
#define SOAP_TYPE_PointerToSOAP_ENV__Code (48)
#endif

/* std::string * has binding name 'PointerToxsd__decimal' for type 'xsd:decimal' */
#ifndef SOAP_TYPE_PointerToxsd__decimal
#define SOAP_TYPE_PointerToxsd__decimal (41)
#endif

/* std::string * has binding name 'PointerToxsd__integer' for type 'xsd:integer' */
#ifndef SOAP_TYPE_PointerToxsd__integer
#define SOAP_TYPE_PointerToxsd__integer (36)
#endif

/* std::string * has binding name 'PointerToxsd__anyURI' for type 'xsd:anyURI' */
#ifndef SOAP_TYPE_PointerToxsd__anyURI
#define SOAP_TYPE_PointerToxsd__anyURI (32)
#endif

/* time_t * has binding name 'PointerTodateTime' for type 'xsd:dateTime' */
#ifndef SOAP_TYPE_PointerTodateTime
#define SOAP_TYPE_PointerTodateTime (31)
#endif

/* std::string * has binding name 'PointerToxsd__language' for type 'xsd:language' */
#ifndef SOAP_TYPE_PointerToxsd__language
#define SOAP_TYPE_PointerToxsd__language (21)
#endif

/* std::string * has binding name 'PointerTostd__string' for type 'xsd:string' */
#ifndef SOAP_TYPE_PointerTostd__string
#define SOAP_TYPE_PointerTostd__string (17)
#endif

/* _QName has binding name '_QName' for type 'xsd:QName' */
#ifndef SOAP_TYPE__QName
#define SOAP_TYPE__QName (6)
#endif

/* _XML has binding name '_XML' for type '' */
#ifndef SOAP_TYPE__XML
#define SOAP_TYPE__XML (5)
#endif

/* char * has binding name 'string' for type 'xsd:string' */
#ifndef SOAP_TYPE_string
#define SOAP_TYPE_string (4)
#endif

/* std::vector<char *>  has binding name 'std__vectorTemplateOf_XML' for type '' */
#ifndef SOAP_TYPE_std__vectorTemplateOf_XML
#define SOAP_TYPE_std__vectorTemplateOf_XML (44)
#endif

/* std::vector<_ns2__alert_info>  has binding name 'std__vectorTemplateOf_ns2__alert_info' for type '' */
#ifndef SOAP_TYPE_std__vectorTemplateOf_ns2__alert_info
#define SOAP_TYPE_std__vectorTemplateOf_ns2__alert_info (43)
#endif

/* std::vector<_ns2__alert_info_area>  has binding name 'std__vectorTemplateOf_ns2__alert_info_area' for type '' */
#ifndef SOAP_TYPE_std__vectorTemplateOf_ns2__alert_info_area
#define SOAP_TYPE_std__vectorTemplateOf_ns2__alert_info_area (42)
#endif

/* std::vector<_ns2__alert_info_area_geocode>  has binding name 'std__vectorTemplateOf_ns2__alert_info_area_geocode' for type '' */
#ifndef SOAP_TYPE_std__vectorTemplateOf_ns2__alert_info_area_geocode
#define SOAP_TYPE_std__vectorTemplateOf_ns2__alert_info_area_geocode (40)
#endif

/* std::vector<_ns2__alert_info_resource>  has binding name 'std__vectorTemplateOf_ns2__alert_info_resource' for type '' */
#ifndef SOAP_TYPE_std__vectorTemplateOf_ns2__alert_info_resource
#define SOAP_TYPE_std__vectorTemplateOf_ns2__alert_info_resource (37)
#endif

/* std::vector<_ns2__alert_info_parameter>  has binding name 'std__vectorTemplateOf_ns2__alert_info_parameter' for type '' */
#ifndef SOAP_TYPE_std__vectorTemplateOf_ns2__alert_info_parameter
#define SOAP_TYPE_std__vectorTemplateOf_ns2__alert_info_parameter (34)
#endif

/* std::vector<_ns2__alert_info_eventCode>  has binding name 'std__vectorTemplateOf_ns2__alert_info_eventCode' for type '' */
#ifndef SOAP_TYPE_std__vectorTemplateOf_ns2__alert_info_eventCode
#define SOAP_TYPE_std__vectorTemplateOf_ns2__alert_info_eventCode (30)
#endif

/* std::vector<enum _ns2__alert_info_responseType>  has binding name 'std__vectorTemplateOf_ns2__alert_info_responseType' for type 'ns2:alert-info-responseType' */
#ifndef SOAP_TYPE_std__vectorTemplateOf_ns2__alert_info_responseType
#define SOAP_TYPE_std__vectorTemplateOf_ns2__alert_info_responseType (25)
#endif

/* std::vector<enum _ns2__alert_info_category>  has binding name 'std__vectorTemplateOf_ns2__alert_info_category' for type 'ns2:alert-info-category' */
#ifndef SOAP_TYPE_std__vectorTemplateOf_ns2__alert_info_category
#define SOAP_TYPE_std__vectorTemplateOf_ns2__alert_info_category (23)
#endif

/* std::vector<std::string>  has binding name 'std__vectorTemplateOfstd__string' for type 'xsd:string' */
#ifndef SOAP_TYPE_std__vectorTemplateOfstd__string
#define SOAP_TYPE_std__vectorTemplateOfstd__string (19)
#endif

/******************************************************************************\
 *                                                                            *
 * Externals                                                                  *
 *                                                                            *
\******************************************************************************/


#endif

/* End of soapStub.h */
