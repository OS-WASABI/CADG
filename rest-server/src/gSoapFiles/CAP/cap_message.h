namespace cadg_soap {
// Reminder: Modify typemap.dat to customize the header file generated by wsdl2h
/* cap_message.h
   Generated by wsdl2h 2.8.60 from CAP-v1.2.xsd and typemap.dat
   2018-11-27 14:51:22 GMT

   DO NOT INCLUDE THIS FILE DIRECTLY INTO YOUR PROJECT BUILDS
   USE THE soapcpp2-GENERATED SOURCE CODE FILES FOR YOUR PROJECT BUILDS

gSOAP XML Web services tools
Copyright (C) 2000-2018, Robert van Engelen, Genivia Inc. All Rights Reserved.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial use license is available from Genivia Inc., contact@genivia.com
--------------------------------------------------------------------------------
*/

/** @page page_notes Notes

@note HINTS:
 - Run soapcpp2 on cap_message.h to generate the SOAP/XML processing logic.
   Use soapcpp2 -I to specify paths for #import
   Use soapcpp2 -j to generate improved proxy and server classes.
   Use soapcpp2 -r to generate a report.
 - Use wsdl2h -c and -s to generate pure C code or C++ code without STL.
 - Use 'typemap.dat' to control namespace bindings and type mappings.
   It is strongly recommended to customize the names of the namespace prefixes
   generated by wsdl2h. To do so, modify the prefix bindings in the Namespaces
   section below and add the modified lines to 'typemap.dat' to rerun wsdl2h.
 - Run Doxygen (www.doxygen.org) on this file to generate documentation.
 - Use wsdl2h -R to generate REST operations.
 - Use wsdl2h -nname to use name as the base namespace prefix instead of 'ns'.
 - Use wsdl2h -Nname for service prefix and produce multiple service bindings
 - Use wsdl2h -d to enable DOM support for xsd:anyType.
 - Use wsdl2h -g to auto-generate readers and writers for root elements.
 - Use wsdl2h -b to auto-generate bi-directional operations (duplex ops).
 - Use wsdl2h -U to map XML names to C++ Unicode identifiers instead of _xNNNN.
 - Use wsdl2h -u to disable the generation of unions.
 - Struct/class members serialized as XML attributes are annotated with a '@'.
 - Struct/class members that have a special role are annotated with a '$'.

@warning
   DO NOT INCLUDE THIS ANNOTATED FILE DIRECTLY IN YOUR PROJECT SOURCE CODE.
   USE THE FILES GENERATED BY soapcpp2 FOR YOUR PROJECT'S SOURCE CODE:
   THE soapStub.h FILE CONTAINS THIS CONTENT WITHOUT ANNOTATIONS.

@copyright LICENSE:
@verbatim
--------------------------------------------------------------------------------
gSOAP XML Web services tools
Copyright (C) 2000-2018, Robert van Engelen, Genivia Inc. All Rights Reserved.
The wsdl2h tool and its generated software are released under the GPL.
This software is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
GPL license.

This program is free software; you can redistribute it and/or modify it under
the terms of the GNU General Public License as published by the Free Software
Foundation; either version 2 of the License, or (at your option) any later
version.

This program is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE. See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with
this program; if not, write to the Free Software Foundation, Inc., 59 Temple
Place, Suite 330, Boston, MA 02111-1307 USA

Author contact information:
engelen@genivia.com / engelen@acm.org

This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial-use license is available from Genivia, Inc., contact@genivia.com
--------------------------------------------------------------------------------
@endverbatim

*/


//gsoapopt c++11,w

/******************************************************************************\
 *                                                                            *
 * Definitions                                                                *
 *   urn:oasis:names:tc:emergency:cap:1.2                                     *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * $CONTAINER                                                                 *
 *   std::vector                                                              *
 *                                                                            *
\******************************************************************************/

#include <vector>
template <class T> class std::vector;

/******************************************************************************\
 *                                                                            *
 * Import                                                                     *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Namespaces                                                          *
 *                                                                            *
\******************************************************************************/


/* NOTE:

It is strongly recommended to customize the names of the namespace prefixes
generated by wsdl2h. To do so, modify the prefix bindings below and add the
modified lines to typemap.dat to rerun wsdl2h:

ns1 = "urn:oasis:names:tc:emergency:cap:1.2"

*/

#define SOAP_NAMESPACE_OF_ns1	"urn:oasis:names:tc:emergency:cap:1.2"
//gsoap ns1   schema namespace:	urn:oasis:names:tc:emergency:cap:1.2
//gsoap ns1   schema elementForm:	qualified
//gsoap ns1   schema attributeForm:	unqualified

/******************************************************************************\
 *                                                                            *
 * Built-in Schema Types and Top-Level Elements and Attributes                *
 *                                                                            *
\******************************************************************************/

/// Primitive built-in type "xs:anyURI".
typedef std::string xsd__anyURI;

/// Primitive built-in type "xs:decimal".
typedef std::string xsd__decimal;

/// Primitive built-in type "xs:integer".
typedef std::string xsd__integer;

/// Primitive built-in type "xs:language".
typedef std::string xsd__language;


/******************************************************************************\
 *                                                                            *
 * Forward Declarations                                                       *
 *                                                                            *
\******************************************************************************/


//  Forward declaration of class _ns1__alert.
class _ns1__alert;


/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   urn:oasis:names:tc:emergency:cap:1.2                                     *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Complex Types and Top-Level Elements                                *
 *   urn:oasis:names:tc:emergency:cap:1.2                                     *
 *                                                                            *
\******************************************************************************/

/// @brief Top-level root element "urn:oasis:names:tc:emergency:cap:1.2":alert
/// <PRE><BLOCKQUOTE>
///   CAP Alert Message (version 1.2)
/// </BLOCKQUOTE></PRE>
/// @brief "urn:oasis:names:tc:emergency:cap:1.2":alert is a complexType.
///
/// class _ns1__alert operations:
/// - _ns1__alert* soap_new__ns1__alert(soap*) allocate and default initialize
/// - _ns1__alert* soap_new__ns1__alert(soap*, int num) allocate array and default initialize values
/// - _ns1__alert* soap_new_req__ns1__alert(soap*, ...) allocate, set required members
/// - _ns1__alert* soap_new_set__ns1__alert(soap*, ...) allocate, set all public members
/// - _ns1__alert::soap_default(soap*) default initialize members
/// - int soap_read__ns1__alert(soap*, _ns1__alert*) deserialize from a stream
/// - int soap_write__ns1__alert(soap*, _ns1__alert*) serialize to a stream
/// - _ns1__alert* _ns1__alert::soap_dup(soap*) returns deep copy of _ns1__alert, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__alert::soap_del() deep deletes _ns1__alert data members, use only after _ns1__alert::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__alert
{ public:
/// Element "identifier" of XSD type xs:string.
    std::string                          identifier                     1;	///< Required element.
/// Element "sender" of XSD type xs:string.
    std::string                          sender                         1;	///< Required element.
/// Content pattern is "\\d\\d\\d\\d-\\d\\d-\\d\\dT\\d\\d:\\d\\d:\\d\\d[-,+]\\d\\d:\\d\\d".
    time_t                                                             
                                         sent                           1;	///< Required element.
    enum class _ns1__alert_status
    {
	Actual,	///< xs:string value="Actual"
	Exercise,	///< xs:string value="Exercise"
	System,	///< xs:string value="System"
	Test,	///< xs:string value="Test"
	Draft,	///< xs:string value="Draft"
    }
                                         status                         1;	///< Required element.
    enum class _ns1__alert_msgType
    {
	Alert,	///< xs:string value="Alert"
	Update,	///< xs:string value="Update"
	Cancel,	///< xs:string value="Cancel"
	Ack,	///< xs:string value="Ack"
	Error,	///< xs:string value="Error"
    }
                                         msgType                        1;	///< Required element.
/// Element "source" of XSD type xs:string.
    std::string*                         source                         0;	///< Optional element.
    enum class _ns1__alert_scope
    {
	Public,	///< xs:string value="Public"
	Restricted,	///< xs:string value="Restricted"
	Private,	///< xs:string value="Private"
    }
                                         scope                          1;	///< Required element.
/// Element "restriction" of XSD type xs:string.
    std::string*                         restriction                    0;	///< Optional element.
/// Element "addresses" of XSD type xs:string.
    std::string*                         addresses                      0;	///< Optional element.
/// Vector of std::string of length 0..unbounded.
    std::vector<std::string            > code                           0;	///< Multiple elements.
/// Element "note" of XSD type xs:string.
    std::string*                         note                           0;	///< Optional element.
/// Element "references" of XSD type xs:string.
    std::string*                         references                     0;	///< Optional element.
/// Element "incidents" of XSD type xs:string.
    std::string*                         incidents                      0;	///< Optional element.
/// Vector of info of length 0..unbounded.
    std::vector<
/// class _ns1__alert_info operations:
/// - _ns1__alert_info* soap_new__ns1__alert_info(soap*) allocate and default initialize
/// - _ns1__alert_info* soap_new__ns1__alert_info(soap*, int num) allocate array and default initialize values
/// - _ns1__alert_info* soap_new_req__ns1__alert_info(soap*, ...) allocate, set required members
/// - _ns1__alert_info* soap_new_set__ns1__alert_info(soap*, ...) allocate, set all public members
/// - _ns1__alert_info::soap_default(soap*) default initialize members
/// - int soap_read__ns1__alert_info(soap*, _ns1__alert_info*) deserialize from a stream
/// - int soap_write__ns1__alert_info(soap*, _ns1__alert_info*) serialize to a stream
/// - _ns1__alert_info* _ns1__alert_info::soap_dup(soap*) returns deep copy of _ns1__alert_info, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__alert_info::soap_del() deep deletes _ns1__alert_info data members, use only after _ns1__alert_info::soap_dup(NULL) (use soapcpp2 -Ed)
    class _ns1__alert_info
    {
/// Element "language" of XSD type xs:language.
    xsd__language*                       language                       0 = "en-US";	///< Optional element with default value="en-US".
/// Vector of category of length 1..unbounded.
    std::vector<
    enum class _ns1__alert_info_category
    {
	Geo,	///< xs:string value="Geo"
	Met,	///< xs:string value="Met"
	Safety,	///< xs:string value="Safety"
	Security,	///< xs:string value="Security"
	Rescue,	///< xs:string value="Rescue"
	Fire,	///< xs:string value="Fire"
	Health,	///< xs:string value="Health"
	Env,	///< xs:string value="Env"
	Transport,	///< xs:string value="Transport"
	Infra,	///< xs:string value="Infra"
	CBRNE,	///< xs:string value="CBRNE"
	Other,	///< xs:string value="Other"
    }
    >                                    category                       1;	///< Multiple elements.
/// Element "event" of XSD type xs:string.
    std::string                          event                          1;	///< Required element.
/// Vector of responseType of length 0..unbounded.
    std::vector<
    enum class _ns1__alert_info_responseType
    {
	Shelter,	///< xs:string value="Shelter"
	Evacuate,	///< xs:string value="Evacuate"
	Prepare,	///< xs:string value="Prepare"
	Execute,	///< xs:string value="Execute"
	Avoid,	///< xs:string value="Avoid"
	Monitor,	///< xs:string value="Monitor"
	Assess,	///< xs:string value="Assess"
	AllClear,	///< xs:string value="AllClear"
	None,	///< xs:string value="None"
    }
    >                                    responseType                   0;	///< Multiple elements.
    enum class _ns1__alert_info_urgency
    {
	Immediate,	///< xs:string value="Immediate"
	Expected,	///< xs:string value="Expected"
	Future,	///< xs:string value="Future"
	Past,	///< xs:string value="Past"
	Unknown,	///< xs:string value="Unknown"
    }
                                         urgency                        1;	///< Required element.
    enum class _ns1__alert_info_severity
    {
	Extreme,	///< xs:string value="Extreme"
	Severe,	///< xs:string value="Severe"
	Moderate,	///< xs:string value="Moderate"
	Minor,	///< xs:string value="Minor"
	Unknown,	///< xs:string value="Unknown"
    }
                                         severity                       1;	///< Required element.
    enum class _ns1__alert_info_certainty
    {
	Observed,	///< xs:string value="Observed"
	Likely,	///< xs:string value="Likely"
	Possible,	///< xs:string value="Possible"
	Unlikely,	///< xs:string value="Unlikely"
	Unknown,	///< xs:string value="Unknown"
    }
                                         certainty                      1;	///< Required element.
/// Element "audience" of XSD type xs:string.
    std::string*                         audience                       0;	///< Optional element.
/// Vector of eventCode of length 0..unbounded.
    std::vector<
/// class _ns1__alert_info_eventCode operations:
/// - _ns1__alert_info_eventCode* soap_new__ns1__alert_info_eventCode(soap*) allocate and default initialize
/// - _ns1__alert_info_eventCode* soap_new__ns1__alert_info_eventCode(soap*, int num) allocate array and default initialize values
/// - _ns1__alert_info_eventCode* soap_new_req__ns1__alert_info_eventCode(soap*, ...) allocate, set required members
/// - _ns1__alert_info_eventCode* soap_new_set__ns1__alert_info_eventCode(soap*, ...) allocate, set all public members
/// - _ns1__alert_info_eventCode::soap_default(soap*) default initialize members
/// - int soap_read__ns1__alert_info_eventCode(soap*, _ns1__alert_info_eventCode*) deserialize from a stream
/// - int soap_write__ns1__alert_info_eventCode(soap*, _ns1__alert_info_eventCode*) serialize to a stream
/// - _ns1__alert_info_eventCode* _ns1__alert_info_eventCode::soap_dup(soap*) returns deep copy of _ns1__alert_info_eventCode, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__alert_info_eventCode::soap_del() deep deletes _ns1__alert_info_eventCode data members, use only after _ns1__alert_info_eventCode::soap_dup(NULL) (use soapcpp2 -Ed)
    class _ns1__alert_info_eventCode
    {
/// Element reference "urn:oasis:names:tc:emergency:cap:1.2:""urn:oasis:names:tc:emergency:cap:1.2":valueName.
    std::string                          valueName                      1;	///< Required element.
/// Element reference "urn:oasis:names:tc:emergency:cap:1.2:""urn:oasis:names:tc:emergency:cap:1.2":value.
    std::string                          value                          1;	///< Required element.
    }>                                   eventCode                      0;	///< Multiple elements.
/// Content pattern is "\\d\\d\\d\\d-\\d\\d-\\d\\dT\\d\\d:\\d\\d:\\d\\d[-,+]\\d\\d:\\d\\d".
    time_t                                                             
                                        *effective                      0;	///< Optional element.
/// Content pattern is "\\d\\d\\d\\d-\\d\\d-\\d\\dT\\d\\d:\\d\\d:\\d\\d[-,+]\\d\\d:\\d\\d".
    time_t                                                             
                                        *onset                          0;	///< Optional element.
/// Content pattern is "\\d\\d\\d\\d-\\d\\d-\\d\\dT\\d\\d:\\d\\d:\\d\\d[-,+]\\d\\d:\\d\\d".
    time_t                                                             
                                        *expires                        0;	///< Optional element.
/// Element "senderName" of XSD type xs:string.
    std::string*                         senderName                     0;	///< Optional element.
/// Element "headline" of XSD type xs:string.
    std::string*                         headline                       0;	///< Optional element.
/// Element "description" of XSD type xs:string.
    std::string*                         description                    0;	///< Optional element.
/// Element "instruction" of XSD type xs:string.
    std::string*                         instruction                    0;	///< Optional element.
/// Element "web" of XSD type xs:anyURI.
    xsd__anyURI*                         web                            0;	///< Optional element.
/// Element "contact" of XSD type xs:string.
    std::string*                         contact                        0;	///< Optional element.
/// Vector of parameter of length 0..unbounded.
    std::vector<
/// class _ns1__alert_info_parameter operations:
/// - _ns1__alert_info_parameter* soap_new__ns1__alert_info_parameter(soap*) allocate and default initialize
/// - _ns1__alert_info_parameter* soap_new__ns1__alert_info_parameter(soap*, int num) allocate array and default initialize values
/// - _ns1__alert_info_parameter* soap_new_req__ns1__alert_info_parameter(soap*, ...) allocate, set required members
/// - _ns1__alert_info_parameter* soap_new_set__ns1__alert_info_parameter(soap*, ...) allocate, set all public members
/// - _ns1__alert_info_parameter::soap_default(soap*) default initialize members
/// - int soap_read__ns1__alert_info_parameter(soap*, _ns1__alert_info_parameter*) deserialize from a stream
/// - int soap_write__ns1__alert_info_parameter(soap*, _ns1__alert_info_parameter*) serialize to a stream
/// - _ns1__alert_info_parameter* _ns1__alert_info_parameter::soap_dup(soap*) returns deep copy of _ns1__alert_info_parameter, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__alert_info_parameter::soap_del() deep deletes _ns1__alert_info_parameter data members, use only after _ns1__alert_info_parameter::soap_dup(NULL) (use soapcpp2 -Ed)
    class _ns1__alert_info_parameter
    {
/// Element reference "urn:oasis:names:tc:emergency:cap:1.2:""urn:oasis:names:tc:emergency:cap:1.2":valueName.
    std::string                          valueName                      1;	///< Required element.
/// Element reference "urn:oasis:names:tc:emergency:cap:1.2:""urn:oasis:names:tc:emergency:cap:1.2":value.
    std::string                          value                          1;	///< Required element.
    }>                                   parameter                      0;	///< Multiple elements.
/// Vector of resource of length 0..unbounded.
    std::vector<
/// class _ns1__alert_info_resource operations:
/// - _ns1__alert_info_resource* soap_new__ns1__alert_info_resource(soap*) allocate and default initialize
/// - _ns1__alert_info_resource* soap_new__ns1__alert_info_resource(soap*, int num) allocate array and default initialize values
/// - _ns1__alert_info_resource* soap_new_req__ns1__alert_info_resource(soap*, ...) allocate, set required members
/// - _ns1__alert_info_resource* soap_new_set__ns1__alert_info_resource(soap*, ...) allocate, set all public members
/// - _ns1__alert_info_resource::soap_default(soap*) default initialize members
/// - int soap_read__ns1__alert_info_resource(soap*, _ns1__alert_info_resource*) deserialize from a stream
/// - int soap_write__ns1__alert_info_resource(soap*, _ns1__alert_info_resource*) serialize to a stream
/// - _ns1__alert_info_resource* _ns1__alert_info_resource::soap_dup(soap*) returns deep copy of _ns1__alert_info_resource, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__alert_info_resource::soap_del() deep deletes _ns1__alert_info_resource data members, use only after _ns1__alert_info_resource::soap_dup(NULL) (use soapcpp2 -Ed)
    class _ns1__alert_info_resource
    {
/// Element "resourceDesc" of XSD type xs:string.
    std::string                          resourceDesc                   1;	///< Required element.
/// Element "mimeType" of XSD type xs:string.
    std::string                          mimeType                       1;	///< Required element.
/// Element "size" of XSD type xs:integer.
    xsd__integer*                        size                           0;	///< Optional element.
/// Element "uri" of XSD type xs:anyURI.
    xsd__anyURI*                         uri                            0;	///< Optional element.
/// Element "derefUri" of XSD type xs:string.
    std::string*                         derefUri                       0;	///< Optional element.
/// Element "digest" of XSD type xs:string.
    std::string*                         digest                         0;	///< Optional element.
    }>                                   resource                       0;	///< Multiple elements.
/// Vector of area of length 0..unbounded.
    std::vector<
/// class _ns1__alert_info_area operations:
/// - _ns1__alert_info_area* soap_new__ns1__alert_info_area(soap*) allocate and default initialize
/// - _ns1__alert_info_area* soap_new__ns1__alert_info_area(soap*, int num) allocate array and default initialize values
/// - _ns1__alert_info_area* soap_new_req__ns1__alert_info_area(soap*, ...) allocate, set required members
/// - _ns1__alert_info_area* soap_new_set__ns1__alert_info_area(soap*, ...) allocate, set all public members
/// - _ns1__alert_info_area::soap_default(soap*) default initialize members
/// - int soap_read__ns1__alert_info_area(soap*, _ns1__alert_info_area*) deserialize from a stream
/// - int soap_write__ns1__alert_info_area(soap*, _ns1__alert_info_area*) serialize to a stream
/// - _ns1__alert_info_area* _ns1__alert_info_area::soap_dup(soap*) returns deep copy of _ns1__alert_info_area, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__alert_info_area::soap_del() deep deletes _ns1__alert_info_area data members, use only after _ns1__alert_info_area::soap_dup(NULL) (use soapcpp2 -Ed)
    class _ns1__alert_info_area
    {
/// Element "areaDesc" of XSD type xs:string.
    std::string                          areaDesc                       1;	///< Required element.
/// Vector of std::string of length 0..unbounded.
    std::vector<std::string            > polygon                        0;	///< Multiple elements.
/// Vector of std::string of length 0..unbounded.
    std::vector<std::string            > circle                         0;	///< Multiple elements.
/// Vector of geocode of length 0..unbounded.
    std::vector<
/// class _ns1__alert_info_area_geocode operations:
/// - _ns1__alert_info_area_geocode* soap_new__ns1__alert_info_area_geocode(soap*) allocate and default initialize
/// - _ns1__alert_info_area_geocode* soap_new__ns1__alert_info_area_geocode(soap*, int num) allocate array and default initialize values
/// - _ns1__alert_info_area_geocode* soap_new_req__ns1__alert_info_area_geocode(soap*, ...) allocate, set required members
/// - _ns1__alert_info_area_geocode* soap_new_set__ns1__alert_info_area_geocode(soap*, ...) allocate, set all public members
/// - _ns1__alert_info_area_geocode::soap_default(soap*) default initialize members
/// - int soap_read__ns1__alert_info_area_geocode(soap*, _ns1__alert_info_area_geocode*) deserialize from a stream
/// - int soap_write__ns1__alert_info_area_geocode(soap*, _ns1__alert_info_area_geocode*) serialize to a stream
/// - _ns1__alert_info_area_geocode* _ns1__alert_info_area_geocode::soap_dup(soap*) returns deep copy of _ns1__alert_info_area_geocode, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__alert_info_area_geocode::soap_del() deep deletes _ns1__alert_info_area_geocode data members, use only after _ns1__alert_info_area_geocode::soap_dup(NULL) (use soapcpp2 -Ed)
    class _ns1__alert_info_area_geocode
    {
/// Element reference "urn:oasis:names:tc:emergency:cap:1.2:""urn:oasis:names:tc:emergency:cap:1.2":valueName.
    std::string                          valueName                      1;	///< Required element.
/// Element reference "urn:oasis:names:tc:emergency:cap:1.2:""urn:oasis:names:tc:emergency:cap:1.2":value.
    std::string                          value                          1;	///< Required element.
    }>                                   geocode                        0;	///< Multiple elements.
/// Element "altitude" of XSD type xs:decimal.
    xsd__decimal*                        altitude                       0;	///< Optional element.
/// Element "ceiling" of XSD type xs:decimal.
    xsd__decimal*                        ceiling                        0;	///< Optional element.
    }>                                   area                           0;	///< Multiple elements.
    }>                                   info                           0;	///< Multiple elements.
/// @todo <any namespace="http://www.w3.org/2000/09/xmldsig#" minOccurs="0" maxOccurs="unbounded">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
    struct soap                         *soap                          ;
};


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Elements                                              *
 *   urn:oasis:names:tc:emergency:cap:1.2                                     *
 *                                                                            *
\******************************************************************************/

/// @brief Top-level root element "urn:oasis:names:tc:emergency:cap:1.2":valueName of XSD type xs:string.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "urn:oasis:names:tc:emergency:cap:1.2":value of XSD type xs:string.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Attributes                                            *
 *   urn:oasis:names:tc:emergency:cap:1.2                                     *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * XML Data Binding                                                           *
 *                                                                            *
\******************************************************************************/


/**

@page page_XMLDataBinding XML Data Binding

SOAP/XML services use data bindings contractually bound by WSDL and auto-
generated by wsdl2h and soapcpp2 (see Service Bindings). Plain data bindings
are adopted from XML schemas as part of the WSDL types section or when running
wsdl2h on a set of schemas to produce non-SOAP-based XML data bindings.

The following readers and writers are C/C++ data type (de)serializers auto-
generated by wsdl2h and soapcpp2. Run soapcpp2 on this file to generate the
(de)serialization code, which is stored in soapC.c[pp]. Include "soapH.h" in
your code to import these data type and function declarations. Only use the
soapcpp2-generated files in your project build. Do not include the wsdl2h-
generated .h file in your code.

Data can be read and deserialized from:
  - an int file descriptor, using soap->recvfd = fd
  - a socket, using soap->socket = (int)...
  - a C++ stream (istream, stringstream), using soap->is = (istream*)...
  - a C string, using soap->is = (const char*)...
  - any input, using the soap->frecv() callback

Data can be serialized and written to:
  - an int file descriptor, using soap->sendfd = (int)...
  - a socket, using soap->socket = (int)...
  - a C++ stream (ostream, stringstream), using soap->os = (ostream*)...
  - a C string, using soap->os = (const char**)...
  - any output, using the soap->fsend() callback

The following options are available for (de)serialization control:
  - soap->encodingStyle = NULL; to remove SOAP 1.1/1.2 encodingStyle
  - soap_mode(soap, SOAP_XML_TREE); XML without id-ref (no cycles!)
  - soap_mode(soap, SOAP_XML_GRAPH); XML with id-ref (including cycles)
  - soap_set_namespaces(soap, struct Namespace *nsmap); to set xmlns bindings


@section ns1 Top-level root elements of schema "urn:oasis:names:tc:emergency:cap:1.2"

  - <ns1:alert> @ref _ns1__alert
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__alert(struct soap*, _ns1__alert*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__alert(struct soap*, _ns1__alert*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__alert(struct soap*, const char *URL, _ns1__alert*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__alert(struct soap*, const char *URL, _ns1__alert*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__alert(struct soap*, const char *URL, _ns1__alert*);
    soap_POST_recv__ns1__alert(struct soap*, _ns1__alert*);
    @endcode

  - <ns1:valueName> (use wsdl2h option -g to auto-generate type _ns1__valueName)

  - <ns1:value> (use wsdl2h option -g to auto-generate type _ns1__value)

*/

} // namespace cadg_soap

/* End of cap_message.h */
