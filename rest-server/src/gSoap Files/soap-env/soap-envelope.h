// Reminder: Modify typemap.dat to customize the header file generated by wsdl2h
/* soap-envelope.h
   Generated by wsdl2h 2.8.28 from soap-envelope and typemap.dat
   2018-11-27 03:26:37 GMT

   DO NOT INCLUDE THIS FILE DIRECTLY INTO YOUR PROJECT BUILDS
   USE THE soapcpp2-GENERATED SOURCE CODE FILES FOR YOUR PROJECT BUILDS

gSOAP XML Web services tools
Copyright (C) 2000-2016, Robert van Engelen, Genivia Inc. All Rights Reserved.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial use license is available from Genivia Inc., contact@genivia.com
--------------------------------------------------------------------------------
*/

/** @page page_notes Notes

@note HINTS:
 - Run soapcpp2 on soap-envelope.h to generate the SOAP/XML processing logic.
   Use soapcpp2 -I to specify paths for #import
   To build with STL, 'stlvector.h' is imported from 'import' dir in package.
   Use soapcpp2 -j to generate improved proxy and server classes.
 - Use wsdl2h -c and -s to generate pure C code or C++ code without STL.
 - Use 'typemap.dat' to control namespace bindings and type mappings.
   It is strongly recommended to customize the names of the namespace prefixes
   generated by wsdl2h. To do so, modify the prefix bindings in the Namespaces
   section below and add the modified lines to 'typemap.dat' to rerun wsdl2h.
 - Use Doxygen (www.doxygen.org) on this file to generate documentation.
 - Use wsdl2h -R to generate REST operations.
 - Use wsdl2h -nname to use name as the base namespace prefix instead of 'ns'.
 - Use wsdl2h -Nname for service prefix and produce multiple service bindings
 - Use wsdl2h -d to enable DOM support for xsd:anyType.
 - Use wsdl2h -g to auto-generate readers and writers for root elements.
 - Use wsdl2h -b to auto-generate bi-directional operations (duplex ops).
 - Use wsdl2h -U to map XML names to C++ Unicode identifiers instead of _xNNNN.
 - Use wsdl2h -u to disable the generation of unions.
 - Struct/class members serialized as XML attributes are annotated with a '@'.
 - Struct/class members that have a special role are annotated with a '$'.

@warning
   DO NOT INCLUDE THIS ANNOTATED FILE DIRECTLY IN YOUR PROJECT SOURCE CODE.
   USE THE FILES GENERATED BY soapcpp2 FOR YOUR PROJECT'S SOURCE CODE:
   THE soapStub.h FILE CONTAINS THIS CONTENT WITHOUT ANNOTATIONS.

@copyright LICENSE:
@verbatim
--------------------------------------------------------------------------------
gSOAP XML Web services tools
Copyright (C) 2000-2016, Robert van Engelen, Genivia Inc. All Rights Reserved.
The wsdl2h tool and its generated software are released under the GPL.
This software is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
GPL license.

This program is free software; you can redistribute it and/or modify it under
the terms of the GNU General Public License as published by the Free Software
Foundation; either version 2 of the License, or (at your option) any later
version.

This program is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE. See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with
this program; if not, write to the Free Software Foundation, Inc., 59 Temple
Place, Suite 330, Boston, MA 02111-1307 USA

Author contact information:
engelen@genivia.com / engelen@acm.org

This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial-use license is available from Genivia, Inc., contact@genivia.com
--------------------------------------------------------------------------------
@endverbatim

*/


//gsoapopt c++,w

/******************************************************************************\
 *                                                                            *
 * Definitions                                                                *
 *   http://www.w3.org/2001/12/soap-envelope                                  *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * $CONTAINER                                                                 *
 *   std::vector                                                              *
 *                                                                            *
\******************************************************************************/

template <class T> class std::vector;

/******************************************************************************\
 *                                                                            *
 * Import                                                                     *
 *                                                                            *
\******************************************************************************/

#import "stl.h"	// enable STL containers when used (option -s removes STL dependency)

/******************************************************************************\
 *                                                                            *
 * Schema Namespaces                                                          *
 *                                                                            *
\******************************************************************************/


/* NOTE:

It is strongly recommended to customize the names of the namespace prefixes
generated by wsdl2h. To do so, modify the prefix bindings below and add the
modified lines to typemap.dat to rerun wsdl2h:

ns1 = "http://www.w3.org/2001/12/soap-envelope"

*/

#define SOAP_NAMESPACE_OF_ns1	"http://www.w3.org/2001/12/soap-envelope"
//gsoap ns1   schema namespace:	http://www.w3.org/2001/12/soap-envelope
//gsoap ns1   schema form:	unqualified

/******************************************************************************\
 *                                                                            *
 * Built-in Schema Types and Top-Level Elements and Attributes                *
 *                                                                            *
\******************************************************************************/

/// Built-in XSD type "SOAP-ENV:Envelope".
struct SOAP_ENV__Envelope { struct SOAP_ENV__Header *SOAP_ENV__Header; _XML SOAP_ENV__Body; };

/// Built-in XSD type "xs:QName".
typedef std::string xsd__QName;

/// Primitive built-in type "SOAP-ENV:Body".
typedef std::string SOAP_ENV__Body;

/// Primitive built-in type "SOAP-ENV:encodingStyle".
typedef std::string SOAP_ENV__encodingStyle;

/// Primitive built-in type "xs:anyURI".
typedef std::string xsd__anyURI;

/// Built-in element "SOAP-ENV:Body".
typedef _XML SOAP_ENV__Body;


/******************************************************************************\
 *                                                                            *
 * Forward Declarations                                                       *
 *                                                                            *
\******************************************************************************/


//  Forward declaration of class ns1__Envelope.
class ns1__Envelope;

//  Forward declaration of class ns1__Header.
class ns1__Header;

//  Forward declaration of class ns1__Body.
class ns1__Body;

//  Forward declaration of class ns1__Fault.
class ns1__Fault;

//  Forward declaration of class ns1__detail.
class ns1__detail;


/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   http://www.w3.org/2001/12/soap-envelope                                  *
 *                                                                            *
\******************************************************************************/

/// @brief "http://www.w3.org/2001/12/soap-envelope":encodingStyle is a simpleType containing a whitespace separated list of xs:anyURI.
///
/// <PRE><BLOCKQUOTE>
///   'encodingStyle' indicates any canonicalization conventions followed in the contents of the containing element. For example, the value 'http://schemas.xmlsoap.org/soap/encoding/' indicates the pattern described in SOAP specification
/// </BLOCKQUOTE></PRE>
typedef std::string ns1__encodingStyle;


/******************************************************************************\
 *                                                                            *
 * Schema Complex Types and Top-Level Elements                                *
 *   http://www.w3.org/2001/12/soap-envelope                                  *
 *                                                                            *
\******************************************************************************/

/// @brief "http://www.w3.org/2001/12/soap-envelope":Envelope is a complexType.
///
/// class ns1__Envelope operations:
/// - ns1__Envelope* soap_new_ns1__Envelope(soap*) allocate
/// - ns1__Envelope* soap_new_ns1__Envelope(soap*, int num) allocate array
/// - ns1__Envelope* soap_new_req_ns1__Envelope(soap*, ...) allocate, set required members
/// - ns1__Envelope* soap_new_set_ns1__Envelope(soap*, ...) allocate, set all public members
/// - ns1__Envelope::soap_default(soap*) reset members to default
/// - int soap_read_ns1__Envelope(soap*, ns1__Envelope*) deserialize from a stream
/// - int soap_write_ns1__Envelope(soap*, ns1__Envelope*) serialize to a stream
/// - ns1__Envelope* ns1__Envelope::soap_dup(soap*) returns deep copy of ns1__Envelope, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__Envelope::soap_del() deep deletes ns1__Envelope data members, use only after ns1__Envelope::soap_dup(NULL) (use soapcpp2 -Ed)
class ns1__Envelope
{ public:
/// Imported element reference SOAP-ENV:Header.
    struct SOAP_ENV__Header*             SOAP_ENV__Header               0;	///< Optional element.
/// Imported element reference SOAP-ENV:Body.
    SOAP_ENV__Body                       SOAP_ENV__Body_                1;	///< Required element.
/// @todo <anyAttribute namespace="##other">.
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://www.w3.org/2001/12/soap-envelope":Header is a complexType.
///
/// class ns1__Header operations:
/// - ns1__Header* soap_new_ns1__Header(soap*) allocate
/// - ns1__Header* soap_new_ns1__Header(soap*, int num) allocate array
/// - ns1__Header* soap_new_req_ns1__Header(soap*, ...) allocate, set required members
/// - ns1__Header* soap_new_set_ns1__Header(soap*, ...) allocate, set all public members
/// - ns1__Header::soap_default(soap*) reset members to default
/// - int soap_read_ns1__Header(soap*, ns1__Header*) deserialize from a stream
/// - int soap_write_ns1__Header(soap*, ns1__Header*) serialize to a stream
/// - ns1__Header* ns1__Header::soap_dup(soap*) returns deep copy of ns1__Header, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__Header::soap_del() deep deletes ns1__Header data members, use only after ns1__Header::soap_dup(NULL) (use soapcpp2 -Ed)
class ns1__Header
{ public:
/// @todo <any namespace="##other" minOccurs="0" maxOccurs="unbounded">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
/// @todo <anyAttribute namespace="##other">.
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://www.w3.org/2001/12/soap-envelope":Body is a complexType.
///
/// class ns1__Body operations:
/// - ns1__Body* soap_new_ns1__Body(soap*) allocate
/// - ns1__Body* soap_new_ns1__Body(soap*, int num) allocate array
/// - ns1__Body* soap_new_req_ns1__Body(soap*, ...) allocate, set required members
/// - ns1__Body* soap_new_set_ns1__Body(soap*, ...) allocate, set all public members
/// - ns1__Body::soap_default(soap*) reset members to default
/// - int soap_read_ns1__Body(soap*, ns1__Body*) deserialize from a stream
/// - int soap_write_ns1__Body(soap*, ns1__Body*) serialize to a stream
/// - ns1__Body* ns1__Body::soap_dup(soap*) returns deep copy of ns1__Body, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__Body::soap_del() deep deletes ns1__Body data members, use only after ns1__Body::soap_dup(NULL) (use soapcpp2 -Ed)
class ns1__Body
{ public:
/// @todo <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
/// @todo <anyAttribute namespace="##any">.
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://www.w3.org/2001/12/soap-envelope":Fault is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   Fault reporting structure
/// </BLOCKQUOTE></PRE>
/// class ns1__Fault operations:
/// - ns1__Fault* soap_new_ns1__Fault(soap*) allocate
/// - ns1__Fault* soap_new_ns1__Fault(soap*, int num) allocate array
/// - ns1__Fault* soap_new_req_ns1__Fault(soap*, ...) allocate, set required members
/// - ns1__Fault* soap_new_set_ns1__Fault(soap*, ...) allocate, set all public members
/// - ns1__Fault::soap_default(soap*) reset members to default
/// - int soap_read_ns1__Fault(soap*, ns1__Fault*) deserialize from a stream
/// - int soap_write_ns1__Fault(soap*, ns1__Fault*) serialize to a stream
/// - ns1__Fault* ns1__Fault::soap_dup(soap*) returns deep copy of ns1__Fault, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__Fault::soap_del() deep deletes ns1__Fault data members, use only after ns1__Fault::soap_dup(NULL) (use soapcpp2 -Ed)
class ns1__Fault
{ public:
/// Element "faultcode" of XSD type xs:QName.
    xsd__QName                           faultcode                      1;	///< Required element.
/// Element "faultstring" of XSD type xs:string.
    std::string                          faultstring                    1;	///< Required element.
/// Element "faultactor" of XSD type xs:anyURI.
    xsd__anyURI*                         faultactor                     0;	///< Optional element.
/// Element "detail" of XSD type SOAP-ENV:detail.
    struct SOAP_ENV__Detail*             detail                         0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://www.w3.org/2001/12/soap-envelope":detail is a complexType.
///
/// class ns1__detail operations:
/// - ns1__detail* soap_new_ns1__detail(soap*) allocate
/// - ns1__detail* soap_new_ns1__detail(soap*, int num) allocate array
/// - ns1__detail* soap_new_req_ns1__detail(soap*, ...) allocate, set required members
/// - ns1__detail* soap_new_set_ns1__detail(soap*, ...) allocate, set all public members
/// - ns1__detail::soap_default(soap*) reset members to default
/// - int soap_read_ns1__detail(soap*, ns1__detail*) deserialize from a stream
/// - int soap_write_ns1__detail(soap*, ns1__detail*) serialize to a stream
/// - ns1__detail* ns1__detail::soap_dup(soap*) returns deep copy of ns1__detail, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__detail::soap_del() deep deletes ns1__detail data members, use only after ns1__detail::soap_dup(NULL) (use soapcpp2 -Ed)
class ns1__detail
{ public:
/// @todo <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
/// @todo <anyAttribute namespace="##any">.
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Elements                                              *
 *   http://www.w3.org/2001/12/soap-envelope                                  *
 *                                                                            *
\******************************************************************************/

/// @brief Top-level root element "http://www.w3.org/2001/12/soap-envelope":Envelope of XSD type SOAP-ENV:Envelope.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://www.w3.org/2001/12/soap-envelope":Header of XSD type SOAP-ENV:Header.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://www.w3.org/2001/12/soap-envelope":Body of XSD type SOAP-ENV:Body.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://www.w3.org/2001/12/soap-envelope":Fault of XSD type SOAP-ENV:Fault.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Attributes                                            *
 *   http://www.w3.org/2001/12/soap-envelope                                  *
 *                                                                            *
\******************************************************************************/

/// @brief Top-level attribute "http://www.w3.org/2001/12/soap-envelope":mustUnderstand of simpleType xs:boolean.
/// @note Use wsdl2h option -g to auto-generate a top-level attribute declaration and processing code.

/// @brief Top-level attribute "http://www.w3.org/2001/12/soap-envelope":actor of simpleType xs:anyURI.
/// @note Use wsdl2h option -g to auto-generate a top-level attribute declaration and processing code.


/******************************************************************************\
 *                                                                            *
 * XML Data Binding                                                           *
 *                                                                            *
\******************************************************************************/


/**

@page page_XMLDataBinding XML Data Binding

SOAP/XML services use data bindings contractually bound by WSDL and auto-
generated by wsdl2h and soapcpp2 (see Service Bindings). Plain data bindings
are adopted from XML schemas as part of the WSDL types section or when running
wsdl2h on a set of schemas to produce non-SOAP-based XML data bindings.

The following readers and writers are C/C++ data type (de)serializers auto-
generated by wsdl2h and soapcpp2. Run soapcpp2 on this file to generate the
(de)serialization code, which is stored in soapC.c[pp]. Include "soapH.h" in
your code to import these data type and function declarations. Only use the
soapcpp2-generated files in your project build. Do not include the wsdl2h-
generated .h file in your code.

Data can be read and deserialized from:
  - an int file descriptor, using soap->recvfd = fd
  - a socket, using soap->socket = (int)...
  - a C++ stream (istream, stringstream), using soap->is = (istream*)...
  - a C string, using soap->is = (const char*)...
  - any input, using the soap->frecv() callback

Data can be serialized and written to:
  - an int file descriptor, using soap->sendfd = (int)...
  - a socket, using soap->socket = (int)...
  - a C++ stream (ostream, stringstream), using soap->os = (ostream*)...
  - a C string, using soap->os = (const char**)...
  - any output, using the soap->fsend() callback

The following options are available for (de)serialization control:
  - soap->encodingStyle = NULL; to remove SOAP 1.1/1.2 encodingStyle
  - soap_mode(soap, SOAP_XML_TREE); XML without id-ref (no cycles!)
  - soap_mode(soap, SOAP_XML_GRAPH); XML with id-ref (including cycles)
  - soap_set_namespaces(soap, struct Namespace *nsmap); to set xmlns bindings


@section ns1 Top-level root elements of schema "http://www.w3.org/2001/12/soap-envelope"

  - <ns1:Envelope> (use wsdl2h option -g to auto-generate type _ns1__Envelope)

  - <ns1:Header> (use wsdl2h option -g to auto-generate type _ns1__Header)

  - <ns1:Body> (use wsdl2h option -g to auto-generate type _ns1__Body)

  - <ns1:Fault> (use wsdl2h option -g to auto-generate type _ns1__Fault)

*/

/* End of soap-envelope.h */
