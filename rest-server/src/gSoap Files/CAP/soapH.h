/* soapH.h
   Generated by gSOAP 2.8.28 from CAP-v1.2.h

gSOAP XML Web services tools
Copyright (C) 2000-2016, Robert van Engelen, Genivia Inc. All Rights Reserved.
The soapcpp2 tool and its generated software are released under the GPL.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial use license is available from Genivia Inc., contact@genivia.com
--------------------------------------------------------------------------------
*/

#ifndef soapH_H
#define soapH_H
#include "soapStub.h"
#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_markelement(struct soap*, const void*, int);

#ifdef __cplusplus
}
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_putindependent(struct soap*);
SOAP_FMAC3 int SOAP_FMAC4 soap_getindependent(struct soap*);
#endif

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void *SOAP_FMAC4 soap_getelement(struct soap*, int*);
SOAP_FMAC3 int SOAP_FMAC4 soap_putelement(struct soap*, const void*, const char*, int, int);

#ifdef __cplusplus
}
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_ignore_element(struct soap*);

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultcode(struct soap *soap);
SOAP_FMAC3 void * SOAP_FMAC4 soap_instantiate(struct soap*, int, const char*, const char*, size_t*);
SOAP_FMAC3 int SOAP_FMAC4 soap_fdelete(struct soap_clist*);
SOAP_FMAC3 int SOAP_FMAC4 soap_fbase(int, int);
SOAP_FMAC3 void SOAP_FMAC4 soap_finsert(struct soap*, int, int, void*, size_t, const void*, void**);

#ifndef SOAP_TYPE_byte
#define SOAP_TYPE_byte (3)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_byte(struct soap*, char *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_byte(struct soap*, const char*, int, const char *, const char*);
SOAP_FMAC3 char * SOAP_FMAC4 soap_in_byte(struct soap*, const char*, char *, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_byte(struct soap*, const char *, const char*, const char*);

#ifndef soap_write_byte
#define soap_write_byte(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || soap_put_byte(soap, data, "byte", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 char * SOAP_FMAC4 soap_get_byte(struct soap*, char *, const char*, const char*);

#ifndef soap_read_byte
#define soap_read_byte(soap, data) ( ((data) ? (soap_default_byte(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_byte(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_int
#define SOAP_TYPE_int (1)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_int(struct soap*, int *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_int(struct soap*, const char*, int, const int *, const char*);
SOAP_FMAC3 int * SOAP_FMAC4 soap_in_int(struct soap*, const char*, int *, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_int(struct soap*, const int *, const char*, const char*);

#ifndef soap_write_int
#define soap_write_int(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || soap_put_int(soap, data, "int", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 int * SOAP_FMAC4 soap_get_int(struct soap*, int *, const char*, const char*);

#ifndef soap_read_int
#define soap_read_int(soap, data) ( ((data) ? (soap_default_int(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_int(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_dateTime
#define SOAP_TYPE_dateTime (17)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_dateTime(struct soap*, time_t *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_dateTime(struct soap*, const char*, int, const time_t *, const char*);
SOAP_FMAC3 time_t * SOAP_FMAC4 soap_in_dateTime(struct soap*, const char*, time_t *, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_dateTime(struct soap*, const time_t *, const char*, const char*);

#ifndef soap_write_dateTime
#define soap_write_dateTime(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || soap_put_dateTime(soap, data, "dateTime", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 time_t * SOAP_FMAC4 soap_get_dateTime(struct soap*, time_t *, const char*, const char*);

#ifndef soap_read_dateTime
#define soap_read_dateTime(soap, data) ( ((data) ? (soap_default_dateTime(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_dateTime(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE__ns1__alert_info_certainty
#define SOAP_TYPE__ns1__alert_info_certainty (31)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default__ns1__alert_info_certainty(struct soap*, enum _ns1__alert_info_certainty *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__alert_info_certainty(struct soap*, const char*, int, const enum _ns1__alert_info_certainty *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap__ns1__alert_info_certainty2s(struct soap*, enum _ns1__alert_info_certainty);
SOAP_FMAC3 enum _ns1__alert_info_certainty * SOAP_FMAC4 soap_in__ns1__alert_info_certainty(struct soap*, const char*, enum _ns1__alert_info_certainty *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2_ns1__alert_info_certainty(struct soap*, const char*, enum _ns1__alert_info_certainty *);
SOAP_FMAC3 int SOAP_FMAC4 soap_put__ns1__alert_info_certainty(struct soap*, const enum _ns1__alert_info_certainty *, const char*, const char*);

#ifndef soap_write__ns1__alert_info_certainty
#define soap_write__ns1__alert_info_certainty(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || soap_put__ns1__alert_info_certainty(soap, data, "ns1:alert-info-certainty", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 enum _ns1__alert_info_certainty * SOAP_FMAC4 soap_get__ns1__alert_info_certainty(struct soap*, enum _ns1__alert_info_certainty *, const char*, const char*);

#ifndef soap_read__ns1__alert_info_certainty
#define soap_read__ns1__alert_info_certainty(soap, data) ( ((data) ? (soap_default__ns1__alert_info_certainty(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get__ns1__alert_info_certainty(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE__ns1__alert_info_severity
#define SOAP_TYPE__ns1__alert_info_severity (30)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default__ns1__alert_info_severity(struct soap*, enum _ns1__alert_info_severity *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__alert_info_severity(struct soap*, const char*, int, const enum _ns1__alert_info_severity *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap__ns1__alert_info_severity2s(struct soap*, enum _ns1__alert_info_severity);
SOAP_FMAC3 enum _ns1__alert_info_severity * SOAP_FMAC4 soap_in__ns1__alert_info_severity(struct soap*, const char*, enum _ns1__alert_info_severity *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2_ns1__alert_info_severity(struct soap*, const char*, enum _ns1__alert_info_severity *);
SOAP_FMAC3 int SOAP_FMAC4 soap_put__ns1__alert_info_severity(struct soap*, const enum _ns1__alert_info_severity *, const char*, const char*);

#ifndef soap_write__ns1__alert_info_severity
#define soap_write__ns1__alert_info_severity(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || soap_put__ns1__alert_info_severity(soap, data, "ns1:alert-info-severity", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 enum _ns1__alert_info_severity * SOAP_FMAC4 soap_get__ns1__alert_info_severity(struct soap*, enum _ns1__alert_info_severity *, const char*, const char*);

#ifndef soap_read__ns1__alert_info_severity
#define soap_read__ns1__alert_info_severity(soap, data) ( ((data) ? (soap_default__ns1__alert_info_severity(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get__ns1__alert_info_severity(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE__ns1__alert_info_urgency
#define SOAP_TYPE__ns1__alert_info_urgency (29)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default__ns1__alert_info_urgency(struct soap*, enum _ns1__alert_info_urgency *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__alert_info_urgency(struct soap*, const char*, int, const enum _ns1__alert_info_urgency *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap__ns1__alert_info_urgency2s(struct soap*, enum _ns1__alert_info_urgency);
SOAP_FMAC3 enum _ns1__alert_info_urgency * SOAP_FMAC4 soap_in__ns1__alert_info_urgency(struct soap*, const char*, enum _ns1__alert_info_urgency *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2_ns1__alert_info_urgency(struct soap*, const char*, enum _ns1__alert_info_urgency *);
SOAP_FMAC3 int SOAP_FMAC4 soap_put__ns1__alert_info_urgency(struct soap*, const enum _ns1__alert_info_urgency *, const char*, const char*);

#ifndef soap_write__ns1__alert_info_urgency
#define soap_write__ns1__alert_info_urgency(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || soap_put__ns1__alert_info_urgency(soap, data, "ns1:alert-info-urgency", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 enum _ns1__alert_info_urgency * SOAP_FMAC4 soap_get__ns1__alert_info_urgency(struct soap*, enum _ns1__alert_info_urgency *, const char*, const char*);

#ifndef soap_read__ns1__alert_info_urgency
#define soap_read__ns1__alert_info_urgency(soap, data) ( ((data) ? (soap_default__ns1__alert_info_urgency(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get__ns1__alert_info_urgency(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE__ns1__alert_info_responseType
#define SOAP_TYPE__ns1__alert_info_responseType (26)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default__ns1__alert_info_responseType(struct soap*, enum _ns1__alert_info_responseType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__alert_info_responseType(struct soap*, const char*, int, const enum _ns1__alert_info_responseType *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap__ns1__alert_info_responseType2s(struct soap*, enum _ns1__alert_info_responseType);
SOAP_FMAC3 enum _ns1__alert_info_responseType * SOAP_FMAC4 soap_in__ns1__alert_info_responseType(struct soap*, const char*, enum _ns1__alert_info_responseType *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2_ns1__alert_info_responseType(struct soap*, const char*, enum _ns1__alert_info_responseType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_put__ns1__alert_info_responseType(struct soap*, const enum _ns1__alert_info_responseType *, const char*, const char*);

#ifndef soap_write__ns1__alert_info_responseType
#define soap_write__ns1__alert_info_responseType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || soap_put__ns1__alert_info_responseType(soap, data, "ns1:alert-info-responseType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 enum _ns1__alert_info_responseType * SOAP_FMAC4 soap_get__ns1__alert_info_responseType(struct soap*, enum _ns1__alert_info_responseType *, const char*, const char*);

#ifndef soap_read__ns1__alert_info_responseType
#define soap_read__ns1__alert_info_responseType(soap, data) ( ((data) ? (soap_default__ns1__alert_info_responseType(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get__ns1__alert_info_responseType(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE__ns1__alert_info_category
#define SOAP_TYPE__ns1__alert_info_category (24)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default__ns1__alert_info_category(struct soap*, enum _ns1__alert_info_category *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__alert_info_category(struct soap*, const char*, int, const enum _ns1__alert_info_category *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap__ns1__alert_info_category2s(struct soap*, enum _ns1__alert_info_category);
SOAP_FMAC3 enum _ns1__alert_info_category * SOAP_FMAC4 soap_in__ns1__alert_info_category(struct soap*, const char*, enum _ns1__alert_info_category *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2_ns1__alert_info_category(struct soap*, const char*, enum _ns1__alert_info_category *);
SOAP_FMAC3 int SOAP_FMAC4 soap_put__ns1__alert_info_category(struct soap*, const enum _ns1__alert_info_category *, const char*, const char*);

#ifndef soap_write__ns1__alert_info_category
#define soap_write__ns1__alert_info_category(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || soap_put__ns1__alert_info_category(soap, data, "ns1:alert-info-category", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 enum _ns1__alert_info_category * SOAP_FMAC4 soap_get__ns1__alert_info_category(struct soap*, enum _ns1__alert_info_category *, const char*, const char*);

#ifndef soap_read__ns1__alert_info_category
#define soap_read__ns1__alert_info_category(soap, data) ( ((data) ? (soap_default__ns1__alert_info_category(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get__ns1__alert_info_category(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE__ns1__alert_scope
#define SOAP_TYPE__ns1__alert_scope (21)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default__ns1__alert_scope(struct soap*, enum _ns1__alert_scope *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__alert_scope(struct soap*, const char*, int, const enum _ns1__alert_scope *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap__ns1__alert_scope2s(struct soap*, enum _ns1__alert_scope);
SOAP_FMAC3 enum _ns1__alert_scope * SOAP_FMAC4 soap_in__ns1__alert_scope(struct soap*, const char*, enum _ns1__alert_scope *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2_ns1__alert_scope(struct soap*, const char*, enum _ns1__alert_scope *);
SOAP_FMAC3 int SOAP_FMAC4 soap_put__ns1__alert_scope(struct soap*, const enum _ns1__alert_scope *, const char*, const char*);

#ifndef soap_write__ns1__alert_scope
#define soap_write__ns1__alert_scope(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || soap_put__ns1__alert_scope(soap, data, "ns1:alert-scope", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 enum _ns1__alert_scope * SOAP_FMAC4 soap_get__ns1__alert_scope(struct soap*, enum _ns1__alert_scope *, const char*, const char*);

#ifndef soap_read__ns1__alert_scope
#define soap_read__ns1__alert_scope(soap, data) ( ((data) ? (soap_default__ns1__alert_scope(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get__ns1__alert_scope(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE__ns1__alert_msgType
#define SOAP_TYPE__ns1__alert_msgType (19)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default__ns1__alert_msgType(struct soap*, enum _ns1__alert_msgType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__alert_msgType(struct soap*, const char*, int, const enum _ns1__alert_msgType *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap__ns1__alert_msgType2s(struct soap*, enum _ns1__alert_msgType);
SOAP_FMAC3 enum _ns1__alert_msgType * SOAP_FMAC4 soap_in__ns1__alert_msgType(struct soap*, const char*, enum _ns1__alert_msgType *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2_ns1__alert_msgType(struct soap*, const char*, enum _ns1__alert_msgType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_put__ns1__alert_msgType(struct soap*, const enum _ns1__alert_msgType *, const char*, const char*);

#ifndef soap_write__ns1__alert_msgType
#define soap_write__ns1__alert_msgType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || soap_put__ns1__alert_msgType(soap, data, "ns1:alert-msgType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 enum _ns1__alert_msgType * SOAP_FMAC4 soap_get__ns1__alert_msgType(struct soap*, enum _ns1__alert_msgType *, const char*, const char*);

#ifndef soap_read__ns1__alert_msgType
#define soap_read__ns1__alert_msgType(soap, data) ( ((data) ? (soap_default__ns1__alert_msgType(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get__ns1__alert_msgType(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE__ns1__alert_status
#define SOAP_TYPE__ns1__alert_status (18)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default__ns1__alert_status(struct soap*, enum _ns1__alert_status *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__alert_status(struct soap*, const char*, int, const enum _ns1__alert_status *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap__ns1__alert_status2s(struct soap*, enum _ns1__alert_status);
SOAP_FMAC3 enum _ns1__alert_status * SOAP_FMAC4 soap_in__ns1__alert_status(struct soap*, const char*, enum _ns1__alert_status *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2_ns1__alert_status(struct soap*, const char*, enum _ns1__alert_status *);
SOAP_FMAC3 int SOAP_FMAC4 soap_put__ns1__alert_status(struct soap*, const enum _ns1__alert_status *, const char*, const char*);

#ifndef soap_write__ns1__alert_status
#define soap_write__ns1__alert_status(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || soap_put__ns1__alert_status(soap, data, "ns1:alert-status", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 enum _ns1__alert_status * SOAP_FMAC4 soap_get__ns1__alert_status(struct soap*, enum _ns1__alert_status *, const char*, const char*);

#ifndef soap_read__ns1__alert_status
#define soap_read__ns1__alert_status(soap, data) ( ((data) ? (soap_default__ns1__alert_status(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get__ns1__alert_status(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE__ns1__alert_info_area_geocode
#define SOAP_TYPE__ns1__alert_info_area_geocode (45)
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__alert_info_area_geocode(struct soap*, const char*, int, const _ns1__alert_info_area_geocode *, const char*);
SOAP_FMAC3 _ns1__alert_info_area_geocode * SOAP_FMAC4 soap_in__ns1__alert_info_area_geocode(struct soap*, const char*, _ns1__alert_info_area_geocode *, const char*);
SOAP_FMAC1 _ns1__alert_info_area_geocode * SOAP_FMAC2 soap_instantiate__ns1__alert_info_area_geocode(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__alert_info_area_geocode * soap_new__ns1__alert_info_area_geocode(struct soap *soap, int n = -1) { return soap_instantiate__ns1__alert_info_area_geocode(soap, n, NULL, NULL, NULL); }

inline _ns1__alert_info_area_geocode * soap_new_req__ns1__alert_info_area_geocode(
	struct soap *soap,
	const std::string& valueName,
	const std::string& value)
{	_ns1__alert_info_area_geocode *_p = soap_new__ns1__alert_info_area_geocode(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__alert_info_area_geocode::valueName = valueName;
		_p->_ns1__alert_info_area_geocode::value = value;
	}
	return _p;
}

inline _ns1__alert_info_area_geocode * soap_new_set__ns1__alert_info_area_geocode(
	struct soap *soap,
	const std::string& valueName,
	const std::string& value)
{	_ns1__alert_info_area_geocode *_p = soap_new__ns1__alert_info_area_geocode(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__alert_info_area_geocode::valueName = valueName;
		_p->_ns1__alert_info_area_geocode::value = value;
	}
	return _p;
}

#ifndef soap_write__ns1__alert_info_area_geocode
#define soap_write__ns1__alert_info_area_geocode(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns1:alert-info-area-geocode", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__alert_info_area_geocode * SOAP_FMAC4 soap_get__ns1__alert_info_area_geocode(struct soap*, _ns1__alert_info_area_geocode *, const char*, const char*);

#ifndef soap_read__ns1__alert_info_area_geocode
#define soap_read__ns1__alert_info_area_geocode(soap, data) ( ((data) ? ((data)->soap_default(soap), 0) : 0) || soap_begin_recv(soap) || !soap_get__ns1__alert_info_area_geocode(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE__ns1__alert_info_area
#define SOAP_TYPE__ns1__alert_info_area (44)
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__alert_info_area(struct soap*, const char*, int, const _ns1__alert_info_area *, const char*);
SOAP_FMAC3 _ns1__alert_info_area * SOAP_FMAC4 soap_in__ns1__alert_info_area(struct soap*, const char*, _ns1__alert_info_area *, const char*);
SOAP_FMAC1 _ns1__alert_info_area * SOAP_FMAC2 soap_instantiate__ns1__alert_info_area(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__alert_info_area * soap_new__ns1__alert_info_area(struct soap *soap, int n = -1) { return soap_instantiate__ns1__alert_info_area(soap, n, NULL, NULL, NULL); }

inline _ns1__alert_info_area * soap_new_req__ns1__alert_info_area(
	struct soap *soap,
	const std::string& areaDesc)
{	_ns1__alert_info_area *_p = soap_new__ns1__alert_info_area(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__alert_info_area::areaDesc = areaDesc;
	}
	return _p;
}

inline _ns1__alert_info_area * soap_new_set__ns1__alert_info_area(
	struct soap *soap,
	const std::string& areaDesc,
	const std::vector<std::string> & polygon,
	const std::vector<std::string> & circle,
	std::vector<_ns1__alert_info_area_geocode> *geocode,
	std::string *altitude,
	std::string *ceiling)
{	_ns1__alert_info_area *_p = soap_new__ns1__alert_info_area(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__alert_info_area::areaDesc = areaDesc;
		_p->_ns1__alert_info_area::polygon = polygon;
		_p->_ns1__alert_info_area::circle = circle;
		_p->_ns1__alert_info_area::geocode = geocode;
		_p->_ns1__alert_info_area::altitude = altitude;
		_p->_ns1__alert_info_area::ceiling = ceiling;
	}
	return _p;
}

#ifndef soap_write__ns1__alert_info_area
#define soap_write__ns1__alert_info_area(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns1:alert-info-area", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__alert_info_area * SOAP_FMAC4 soap_get__ns1__alert_info_area(struct soap*, _ns1__alert_info_area *, const char*, const char*);

#ifndef soap_read__ns1__alert_info_area
#define soap_read__ns1__alert_info_area(soap, data) ( ((data) ? ((data)->soap_default(soap), 0) : 0) || soap_begin_recv(soap) || !soap_get__ns1__alert_info_area(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE__ns1__alert_info_resource
#define SOAP_TYPE__ns1__alert_info_resource (40)
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__alert_info_resource(struct soap*, const char*, int, const _ns1__alert_info_resource *, const char*);
SOAP_FMAC3 _ns1__alert_info_resource * SOAP_FMAC4 soap_in__ns1__alert_info_resource(struct soap*, const char*, _ns1__alert_info_resource *, const char*);
SOAP_FMAC1 _ns1__alert_info_resource * SOAP_FMAC2 soap_instantiate__ns1__alert_info_resource(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__alert_info_resource * soap_new__ns1__alert_info_resource(struct soap *soap, int n = -1) { return soap_instantiate__ns1__alert_info_resource(soap, n, NULL, NULL, NULL); }

inline _ns1__alert_info_resource * soap_new_req__ns1__alert_info_resource(
	struct soap *soap,
	const std::string& resourceDesc,
	const std::string& mimeType)
{	_ns1__alert_info_resource *_p = soap_new__ns1__alert_info_resource(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__alert_info_resource::resourceDesc = resourceDesc;
		_p->_ns1__alert_info_resource::mimeType = mimeType;
	}
	return _p;
}

inline _ns1__alert_info_resource * soap_new_set__ns1__alert_info_resource(
	struct soap *soap,
	const std::string& resourceDesc,
	const std::string& mimeType,
	std::string *size,
	std::string *uri,
	std::string *derefUri,
	std::string *digest)
{	_ns1__alert_info_resource *_p = soap_new__ns1__alert_info_resource(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__alert_info_resource::resourceDesc = resourceDesc;
		_p->_ns1__alert_info_resource::mimeType = mimeType;
		_p->_ns1__alert_info_resource::size = size;
		_p->_ns1__alert_info_resource::uri = uri;
		_p->_ns1__alert_info_resource::derefUri = derefUri;
		_p->_ns1__alert_info_resource::digest = digest;
	}
	return _p;
}

#ifndef soap_write__ns1__alert_info_resource
#define soap_write__ns1__alert_info_resource(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns1:alert-info-resource", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__alert_info_resource * SOAP_FMAC4 soap_get__ns1__alert_info_resource(struct soap*, _ns1__alert_info_resource *, const char*, const char*);

#ifndef soap_read__ns1__alert_info_resource
#define soap_read__ns1__alert_info_resource(soap, data) ( ((data) ? ((data)->soap_default(soap), 0) : 0) || soap_begin_recv(soap) || !soap_get__ns1__alert_info_resource(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE__ns1__alert_info_parameter
#define SOAP_TYPE__ns1__alert_info_parameter (37)
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__alert_info_parameter(struct soap*, const char*, int, const _ns1__alert_info_parameter *, const char*);
SOAP_FMAC3 _ns1__alert_info_parameter * SOAP_FMAC4 soap_in__ns1__alert_info_parameter(struct soap*, const char*, _ns1__alert_info_parameter *, const char*);
SOAP_FMAC1 _ns1__alert_info_parameter * SOAP_FMAC2 soap_instantiate__ns1__alert_info_parameter(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__alert_info_parameter * soap_new__ns1__alert_info_parameter(struct soap *soap, int n = -1) { return soap_instantiate__ns1__alert_info_parameter(soap, n, NULL, NULL, NULL); }

inline _ns1__alert_info_parameter * soap_new_req__ns1__alert_info_parameter(
	struct soap *soap,
	const std::string& valueName,
	const std::string& value)
{	_ns1__alert_info_parameter *_p = soap_new__ns1__alert_info_parameter(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__alert_info_parameter::valueName = valueName;
		_p->_ns1__alert_info_parameter::value = value;
	}
	return _p;
}

inline _ns1__alert_info_parameter * soap_new_set__ns1__alert_info_parameter(
	struct soap *soap,
	const std::string& valueName,
	const std::string& value)
{	_ns1__alert_info_parameter *_p = soap_new__ns1__alert_info_parameter(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__alert_info_parameter::valueName = valueName;
		_p->_ns1__alert_info_parameter::value = value;
	}
	return _p;
}

#ifndef soap_write__ns1__alert_info_parameter
#define soap_write__ns1__alert_info_parameter(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns1:alert-info-parameter", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__alert_info_parameter * SOAP_FMAC4 soap_get__ns1__alert_info_parameter(struct soap*, _ns1__alert_info_parameter *, const char*, const char*);

#ifndef soap_read__ns1__alert_info_parameter
#define soap_read__ns1__alert_info_parameter(soap, data) ( ((data) ? ((data)->soap_default(soap), 0) : 0) || soap_begin_recv(soap) || !soap_get__ns1__alert_info_parameter(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE__ns1__alert_info_eventCode
#define SOAP_TYPE__ns1__alert_info_eventCode (32)
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__alert_info_eventCode(struct soap*, const char*, int, const _ns1__alert_info_eventCode *, const char*);
SOAP_FMAC3 _ns1__alert_info_eventCode * SOAP_FMAC4 soap_in__ns1__alert_info_eventCode(struct soap*, const char*, _ns1__alert_info_eventCode *, const char*);
SOAP_FMAC1 _ns1__alert_info_eventCode * SOAP_FMAC2 soap_instantiate__ns1__alert_info_eventCode(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__alert_info_eventCode * soap_new__ns1__alert_info_eventCode(struct soap *soap, int n = -1) { return soap_instantiate__ns1__alert_info_eventCode(soap, n, NULL, NULL, NULL); }

inline _ns1__alert_info_eventCode * soap_new_req__ns1__alert_info_eventCode(
	struct soap *soap,
	const std::string& valueName,
	const std::string& value)
{	_ns1__alert_info_eventCode *_p = soap_new__ns1__alert_info_eventCode(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__alert_info_eventCode::valueName = valueName;
		_p->_ns1__alert_info_eventCode::value = value;
	}
	return _p;
}

inline _ns1__alert_info_eventCode * soap_new_set__ns1__alert_info_eventCode(
	struct soap *soap,
	const std::string& valueName,
	const std::string& value)
{	_ns1__alert_info_eventCode *_p = soap_new__ns1__alert_info_eventCode(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__alert_info_eventCode::valueName = valueName;
		_p->_ns1__alert_info_eventCode::value = value;
	}
	return _p;
}

#ifndef soap_write__ns1__alert_info_eventCode
#define soap_write__ns1__alert_info_eventCode(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns1:alert-info-eventCode", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__alert_info_eventCode * SOAP_FMAC4 soap_get__ns1__alert_info_eventCode(struct soap*, _ns1__alert_info_eventCode *, const char*, const char*);

#ifndef soap_read__ns1__alert_info_eventCode
#define soap_read__ns1__alert_info_eventCode(soap, data) ( ((data) ? ((data)->soap_default(soap), 0) : 0) || soap_begin_recv(soap) || !soap_get__ns1__alert_info_eventCode(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE__ns1__alert_info
#define SOAP_TYPE__ns1__alert_info (23)
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__alert_info(struct soap*, const char*, int, const _ns1__alert_info *, const char*);
SOAP_FMAC3 _ns1__alert_info * SOAP_FMAC4 soap_in__ns1__alert_info(struct soap*, const char*, _ns1__alert_info *, const char*);
SOAP_FMAC1 _ns1__alert_info * SOAP_FMAC2 soap_instantiate__ns1__alert_info(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__alert_info * soap_new__ns1__alert_info(struct soap *soap, int n = -1) { return soap_instantiate__ns1__alert_info(soap, n, NULL, NULL, NULL); }

inline _ns1__alert_info * soap_new_req__ns1__alert_info(
	struct soap *soap,
	const std::vector<enum _ns1__alert_info_category> & category,
	const std::string& event,
	enum _ns1__alert_info_urgency urgency,
	enum _ns1__alert_info_severity severity,
	enum _ns1__alert_info_certainty certainty)
{	_ns1__alert_info *_p = soap_new__ns1__alert_info(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__alert_info::category = category;
		_p->_ns1__alert_info::event = event;
		_p->_ns1__alert_info::urgency = urgency;
		_p->_ns1__alert_info::severity = severity;
		_p->_ns1__alert_info::certainty = certainty;
	}
	return _p;
}

inline _ns1__alert_info * soap_new_set__ns1__alert_info(
	struct soap *soap,
	const std::string& language,
	const std::vector<enum _ns1__alert_info_category> & category,
	const std::string& event,
	std::vector<enum _ns1__alert_info_responseType> *responseType,
	enum _ns1__alert_info_urgency urgency,
	enum _ns1__alert_info_severity severity,
	enum _ns1__alert_info_certainty certainty,
	std::string *audience,
	std::vector<_ns1__alert_info_eventCode> *eventCode,
	time_t *effective,
	time_t *onset,
	time_t *expires,
	std::string *senderName,
	std::string *headline,
	std::string *description,
	std::string *instruction,
	std::string *web,
	std::string *contact,
	std::vector<_ns1__alert_info_parameter> *parameter,
	std::vector<_ns1__alert_info_resource> *resource,
	std::vector<_ns1__alert_info_area> *area)
{	_ns1__alert_info *_p = soap_new__ns1__alert_info(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__alert_info::language = language;
		_p->_ns1__alert_info::category = category;
		_p->_ns1__alert_info::event = event;
		_p->_ns1__alert_info::responseType = responseType;
		_p->_ns1__alert_info::urgency = urgency;
		_p->_ns1__alert_info::severity = severity;
		_p->_ns1__alert_info::certainty = certainty;
		_p->_ns1__alert_info::audience = audience;
		_p->_ns1__alert_info::eventCode = eventCode;
		_p->_ns1__alert_info::effective = effective;
		_p->_ns1__alert_info::onset = onset;
		_p->_ns1__alert_info::expires = expires;
		_p->_ns1__alert_info::senderName = senderName;
		_p->_ns1__alert_info::headline = headline;
		_p->_ns1__alert_info::description = description;
		_p->_ns1__alert_info::instruction = instruction;
		_p->_ns1__alert_info::web = web;
		_p->_ns1__alert_info::contact = contact;
		_p->_ns1__alert_info::parameter = parameter;
		_p->_ns1__alert_info::resource = resource;
		_p->_ns1__alert_info::area = area;
	}
	return _p;
}

#ifndef soap_write__ns1__alert_info
#define soap_write__ns1__alert_info(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns1:alert-info", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__alert_info * SOAP_FMAC4 soap_get__ns1__alert_info(struct soap*, _ns1__alert_info *, const char*, const char*);

#ifndef soap_read__ns1__alert_info
#define soap_read__ns1__alert_info(soap, data) ( ((data) ? ((data)->soap_default(soap), 0) : 0) || soap_begin_recv(soap) || !soap_get__ns1__alert_info(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE__ns1__alert
#define SOAP_TYPE__ns1__alert (16)
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__alert(struct soap*, const char*, int, const _ns1__alert *, const char*);
SOAP_FMAC3 _ns1__alert * SOAP_FMAC4 soap_in__ns1__alert(struct soap*, const char*, _ns1__alert *, const char*);
SOAP_FMAC1 _ns1__alert * SOAP_FMAC2 soap_instantiate__ns1__alert(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__alert * soap_new__ns1__alert(struct soap *soap, int n = -1) { return soap_instantiate__ns1__alert(soap, n, NULL, NULL, NULL); }

inline _ns1__alert * soap_new_req__ns1__alert(
	struct soap *soap,
	const std::string& identifier,
	const std::string& sender,
	time_t sent,
	enum _ns1__alert_status status,
	enum _ns1__alert_msgType msgType,
	enum _ns1__alert_scope scope)
{	_ns1__alert *_p = soap_new__ns1__alert(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__alert::identifier = identifier;
		_p->_ns1__alert::sender = sender;
		_p->_ns1__alert::sent = sent;
		_p->_ns1__alert::status = status;
		_p->_ns1__alert::msgType = msgType;
		_p->_ns1__alert::scope = scope;
	}
	return _p;
}

inline _ns1__alert * soap_new_set__ns1__alert(
	struct soap *soap,
	const std::string& identifier,
	const std::string& sender,
	time_t sent,
	enum _ns1__alert_status status,
	enum _ns1__alert_msgType msgType,
	std::string *source,
	enum _ns1__alert_scope scope,
	std::string *restriction,
	std::string *addresses,
	const std::vector<std::string> & code,
	std::string *note,
	std::string *references,
	std::string *incidents,
	std::vector<_ns1__alert_info> *info,
	const std::vector<char *> & __any)
{	_ns1__alert *_p = soap_new__ns1__alert(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__alert::identifier = identifier;
		_p->_ns1__alert::sender = sender;
		_p->_ns1__alert::sent = sent;
		_p->_ns1__alert::status = status;
		_p->_ns1__alert::msgType = msgType;
		_p->_ns1__alert::source = source;
		_p->_ns1__alert::scope = scope;
		_p->_ns1__alert::restriction = restriction;
		_p->_ns1__alert::addresses = addresses;
		_p->_ns1__alert::code = code;
		_p->_ns1__alert::note = note;
		_p->_ns1__alert::references = references;
		_p->_ns1__alert::incidents = incidents;
		_p->_ns1__alert::info = info;
		_p->_ns1__alert::__any = __any;
	}
	return _p;
}

#ifndef soap_write__ns1__alert
#define soap_write__ns1__alert(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns1:alert", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__alert * SOAP_FMAC4 soap_get__ns1__alert(struct soap*, _ns1__alert *, const char*, const char*);

#ifndef soap_read__ns1__alert
#define soap_read__ns1__alert(soap, data) ( ((data) ? ((data)->soap_default(soap), 0) : 0) || soap_begin_recv(soap) || !soap_get__ns1__alert(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_xsd__language
#define SOAP_TYPE_xsd__language (15)
#endif

#define soap_default_xsd__language(soap, a) soap_default_std__string(soap, a)

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__language(struct soap*, const std::string *);

#define soap_xsd__language2s soap_std__string2s

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__language(struct soap*, const char*, int, const std::string*, const char*);

#define soap_s2xsd__language soap_s2std__string

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_xsd__language(struct soap*, const char*, std::string*, const char*);

#define soap_instantiate_xsd__language soap_instantiate_std__string


#define soap_new_xsd__language soap_new_std__string

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__language(struct soap*, const std::string *, const char*, const char*);

#ifndef soap_write_xsd__language
#define soap_write_xsd__language(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_xsd__language(soap, data), 0) || soap_put_xsd__language(soap, data, "xsd:language", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_xsd__language(struct soap*, std::string *, const char*, const char*);

#ifndef soap_read_xsd__language
#define soap_read_xsd__language(soap, data) ( ((data) ? (soap_default_xsd__language(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_xsd__language(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_xsd__integer
#define SOAP_TYPE_xsd__integer (14)
#endif

#define soap_default_xsd__integer(soap, a) soap_default_std__string(soap, a)

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__integer(struct soap*, const std::string *);

#define soap_xsd__integer2s soap_std__string2s

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__integer(struct soap*, const char*, int, const std::string*, const char*);

#define soap_s2xsd__integer soap_s2std__string

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_xsd__integer(struct soap*, const char*, std::string*, const char*);

#define soap_instantiate_xsd__integer soap_instantiate_std__string


#define soap_new_xsd__integer soap_new_std__string

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__integer(struct soap*, const std::string *, const char*, const char*);

#ifndef soap_write_xsd__integer
#define soap_write_xsd__integer(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_xsd__integer(soap, data), 0) || soap_put_xsd__integer(soap, data, "xsd:integer", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_xsd__integer(struct soap*, std::string *, const char*, const char*);

#ifndef soap_read_xsd__integer
#define soap_read_xsd__integer(soap, data) ( ((data) ? (soap_default_xsd__integer(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_xsd__integer(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_xsd__decimal
#define SOAP_TYPE_xsd__decimal (13)
#endif

#define soap_default_xsd__decimal(soap, a) soap_default_std__string(soap, a)

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__decimal(struct soap*, const std::string *);

#define soap_xsd__decimal2s soap_std__string2s

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__decimal(struct soap*, const char*, int, const std::string*, const char*);

#define soap_s2xsd__decimal soap_s2std__string

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_xsd__decimal(struct soap*, const char*, std::string*, const char*);

#define soap_instantiate_xsd__decimal soap_instantiate_std__string


#define soap_new_xsd__decimal soap_new_std__string

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__decimal(struct soap*, const std::string *, const char*, const char*);

#ifndef soap_write_xsd__decimal
#define soap_write_xsd__decimal(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_xsd__decimal(soap, data), 0) || soap_put_xsd__decimal(soap, data, "xsd:decimal", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_xsd__decimal(struct soap*, std::string *, const char*, const char*);

#ifndef soap_read_xsd__decimal
#define soap_read_xsd__decimal(soap, data) ( ((data) ? (soap_default_xsd__decimal(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_xsd__decimal(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_xsd__anyURI
#define SOAP_TYPE_xsd__anyURI (12)
#endif

#define soap_default_xsd__anyURI(soap, a) soap_default_std__string(soap, a)

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__anyURI(struct soap*, const std::string *);

#define soap_xsd__anyURI2s soap_std__string2s

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__anyURI(struct soap*, const char*, int, const std::string*, const char*);

#define soap_s2xsd__anyURI soap_s2std__string

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_xsd__anyURI(struct soap*, const char*, std::string*, const char*);

#define soap_instantiate_xsd__anyURI soap_instantiate_std__string


#define soap_new_xsd__anyURI soap_new_std__string

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__anyURI(struct soap*, const std::string *, const char*, const char*);

#ifndef soap_write_xsd__anyURI
#define soap_write_xsd__anyURI(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_xsd__anyURI(soap, data), 0) || soap_put_xsd__anyURI(soap, data, "xsd:anyURI", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_xsd__anyURI(struct soap*, std::string *, const char*, const char*);

#ifndef soap_read_xsd__anyURI
#define soap_read_xsd__anyURI(soap, data) ( ((data) ? (soap_default_xsd__anyURI(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_xsd__anyURI(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_std__string
#define SOAP_TYPE_std__string (11)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__string(struct soap*, std::string *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__string(struct soap*, const std::string *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__string(struct soap*, const char*, int, const std::string*, const char*);
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_std__string(struct soap*, const char*, std::string*, const char*);
SOAP_FMAC1 std::string * SOAP_FMAC2 soap_instantiate_std__string(struct soap*, int, const char*, const char*, size_t*);

inline std::string * soap_new_std__string(struct soap *soap, int n = -1) { return soap_instantiate_std__string(soap, n, NULL, NULL, NULL); }

inline std::string * soap_new_req_std__string(
	struct soap *soap)
{	std::string *_p = soap_new_std__string(soap);
	if (_p)
	{	soap_default_std__string(soap, _p);
	}
	return _p;
}

inline std::string * soap_new_set_std__string(
	struct soap *soap)
{	std::string *_p = soap_new_std__string(soap);
	if (_p)
	{	soap_default_std__string(soap, _p);
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_std__string(struct soap*, const std::string *, const char*, const char*);

#ifndef soap_write_std__string
#define soap_write_std__string(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_std__string(soap, data), 0) || soap_put_std__string(soap, data, "string", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_std__string(struct soap*, std::string *, const char*, const char*);

#ifndef soap_read_std__string
#define soap_read_std__string(soap, data) ( ((data) ? (soap_default_std__string(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_std__string(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Fault
#define SOAP_TYPE_SOAP_ENV__Fault (62)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Fault(struct soap*, struct SOAP_ENV__Fault *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Fault(struct soap*, const struct SOAP_ENV__Fault *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Fault(struct soap*, const char*, int, const struct SOAP_ENV__Fault *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_in_SOAP_ENV__Fault(struct soap*, const char*, struct SOAP_ENV__Fault *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Fault * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Fault(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Fault * soap_new_SOAP_ENV__Fault(struct soap *soap, int n = -1) { return soap_instantiate_SOAP_ENV__Fault(soap, n, NULL, NULL, NULL); }

inline struct SOAP_ENV__Fault * soap_new_req_SOAP_ENV__Fault(
	struct soap *soap)
{	struct SOAP_ENV__Fault *_p = soap_new_SOAP_ENV__Fault(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Fault(soap, _p);
	}
	return _p;
}

inline struct SOAP_ENV__Fault * soap_new_set_SOAP_ENV__Fault(
	struct soap *soap,
	char *faultcode,
	char *faultstring,
	char *faultactor,
	struct SOAP_ENV__Detail *detail,
	struct SOAP_ENV__Code *SOAP_ENV__Code,
	struct SOAP_ENV__Reason *SOAP_ENV__Reason,
	char *SOAP_ENV__Node,
	char *SOAP_ENV__Role,
	struct SOAP_ENV__Detail *SOAP_ENV__Detail)
{	struct SOAP_ENV__Fault *_p = soap_new_SOAP_ENV__Fault(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Fault(soap, _p);
		_p->faultcode = faultcode;
		_p->faultstring = faultstring;
		_p->faultactor = faultactor;
		_p->detail = detail;
		_p->SOAP_ENV__Code = SOAP_ENV__Code;
		_p->SOAP_ENV__Reason = SOAP_ENV__Reason;
		_p->SOAP_ENV__Node = SOAP_ENV__Node;
		_p->SOAP_ENV__Role = SOAP_ENV__Role;
		_p->SOAP_ENV__Detail = SOAP_ENV__Detail;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Fault(struct soap*, const struct SOAP_ENV__Fault *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Fault
#define soap_write_SOAP_ENV__Fault(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Fault(soap, data), 0) || soap_put_SOAP_ENV__Fault(soap, data, "SOAP-ENV:Fault", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_get_SOAP_ENV__Fault(struct soap*, struct SOAP_ENV__Fault *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Fault
#define soap_read_SOAP_ENV__Fault(soap, data) ( ((data) ? (soap_default_SOAP_ENV__Fault(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_SOAP_ENV__Fault(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Reason
#define SOAP_TYPE_SOAP_ENV__Reason (61)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Reason(struct soap*, const struct SOAP_ENV__Reason *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Reason(struct soap*, const char*, int, const struct SOAP_ENV__Reason *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_in_SOAP_ENV__Reason(struct soap*, const char*, struct SOAP_ENV__Reason *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Reason * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Reason(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Reason * soap_new_SOAP_ENV__Reason(struct soap *soap, int n = -1) { return soap_instantiate_SOAP_ENV__Reason(soap, n, NULL, NULL, NULL); }

inline struct SOAP_ENV__Reason * soap_new_req_SOAP_ENV__Reason(
	struct soap *soap)
{	struct SOAP_ENV__Reason *_p = soap_new_SOAP_ENV__Reason(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Reason(soap, _p);
	}
	return _p;
}

inline struct SOAP_ENV__Reason * soap_new_set_SOAP_ENV__Reason(
	struct soap *soap,
	char *SOAP_ENV__Text)
{	struct SOAP_ENV__Reason *_p = soap_new_SOAP_ENV__Reason(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Reason(soap, _p);
		_p->SOAP_ENV__Text = SOAP_ENV__Text;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Reason(struct soap*, const struct SOAP_ENV__Reason *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Reason
#define soap_write_SOAP_ENV__Reason(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Reason(soap, data), 0) || soap_put_SOAP_ENV__Reason(soap, data, "SOAP-ENV:Reason", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_get_SOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Reason
#define soap_read_SOAP_ENV__Reason(soap, data) ( ((data) ? (soap_default_SOAP_ENV__Reason(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_SOAP_ENV__Reason(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Detail
#define SOAP_TYPE_SOAP_ENV__Detail (58)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Detail(struct soap*, const struct SOAP_ENV__Detail *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Detail(struct soap*, const char*, int, const struct SOAP_ENV__Detail *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_in_SOAP_ENV__Detail(struct soap*, const char*, struct SOAP_ENV__Detail *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Detail * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Detail(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Detail * soap_new_SOAP_ENV__Detail(struct soap *soap, int n = -1) { return soap_instantiate_SOAP_ENV__Detail(soap, n, NULL, NULL, NULL); }

inline struct SOAP_ENV__Detail * soap_new_req_SOAP_ENV__Detail(
	struct soap *soap,
	int __type,
	void *fault)
{	struct SOAP_ENV__Detail *_p = soap_new_SOAP_ENV__Detail(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Detail(soap, _p);
		_p->__type = __type;
		_p->fault = fault;
	}
	return _p;
}

inline struct SOAP_ENV__Detail * soap_new_set_SOAP_ENV__Detail(
	struct soap *soap,
	char *__any,
	int __type,
	void *fault)
{	struct SOAP_ENV__Detail *_p = soap_new_SOAP_ENV__Detail(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Detail(soap, _p);
		_p->__any = __any;
		_p->__type = __type;
		_p->fault = fault;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Detail(struct soap*, const struct SOAP_ENV__Detail *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Detail
#define soap_write_SOAP_ENV__Detail(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Detail(soap, data), 0) || soap_put_SOAP_ENV__Detail(soap, data, "SOAP-ENV:Detail", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_get_SOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Detail
#define soap_read_SOAP_ENV__Detail(soap, data) ( ((data) ? (soap_default_SOAP_ENV__Detail(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_SOAP_ENV__Detail(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Code
#define SOAP_TYPE_SOAP_ENV__Code (56)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Code(struct soap*, const struct SOAP_ENV__Code *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Code(struct soap*, const char*, int, const struct SOAP_ENV__Code *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_in_SOAP_ENV__Code(struct soap*, const char*, struct SOAP_ENV__Code *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Code * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Code(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Code * soap_new_SOAP_ENV__Code(struct soap *soap, int n = -1) { return soap_instantiate_SOAP_ENV__Code(soap, n, NULL, NULL, NULL); }

inline struct SOAP_ENV__Code * soap_new_req_SOAP_ENV__Code(
	struct soap *soap)
{	struct SOAP_ENV__Code *_p = soap_new_SOAP_ENV__Code(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Code(soap, _p);
	}
	return _p;
}

inline struct SOAP_ENV__Code * soap_new_set_SOAP_ENV__Code(
	struct soap *soap,
	char *SOAP_ENV__Value,
	struct SOAP_ENV__Code *SOAP_ENV__Subcode)
{	struct SOAP_ENV__Code *_p = soap_new_SOAP_ENV__Code(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Code(soap, _p);
		_p->SOAP_ENV__Value = SOAP_ENV__Value;
		_p->SOAP_ENV__Subcode = SOAP_ENV__Subcode;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Code(struct soap*, const struct SOAP_ENV__Code *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Code
#define soap_write_SOAP_ENV__Code(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Code(soap, data), 0) || soap_put_SOAP_ENV__Code(soap, data, "SOAP-ENV:Code", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_get_SOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Code
#define soap_read_SOAP_ENV__Code(soap, data) ( ((data) ? (soap_default_SOAP_ENV__Code(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_SOAP_ENV__Code(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Header
#define SOAP_TYPE_SOAP_ENV__Header (55)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Header(struct soap*, struct SOAP_ENV__Header *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Header(struct soap*, const struct SOAP_ENV__Header *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Header(struct soap*, const char*, int, const struct SOAP_ENV__Header *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_in_SOAP_ENV__Header(struct soap*, const char*, struct SOAP_ENV__Header *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Header * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Header(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Header * soap_new_SOAP_ENV__Header(struct soap *soap, int n = -1) { return soap_instantiate_SOAP_ENV__Header(soap, n, NULL, NULL, NULL); }

inline struct SOAP_ENV__Header * soap_new_req_SOAP_ENV__Header(
	struct soap *soap)
{	struct SOAP_ENV__Header *_p = soap_new_SOAP_ENV__Header(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Header(soap, _p);
	}
	return _p;
}

inline struct SOAP_ENV__Header * soap_new_set_SOAP_ENV__Header(
	struct soap *soap)
{	struct SOAP_ENV__Header *_p = soap_new_SOAP_ENV__Header(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Header(soap, _p);
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Header(struct soap*, const struct SOAP_ENV__Header *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Header
#define soap_write_SOAP_ENV__Header(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Header(soap, data), 0) || soap_put_SOAP_ENV__Header(soap, data, "SOAP-ENV:Header", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_get_SOAP_ENV__Header(struct soap*, struct SOAP_ENV__Header *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Header
#define soap_read_SOAP_ENV__Header(soap, data) ( ((data) ? (soap_default_SOAP_ENV__Header(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_SOAP_ENV__Header(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Reason
#define SOAP_TYPE_PointerToSOAP_ENV__Reason (64)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Reason(struct soap*, const char *, int, struct SOAP_ENV__Reason *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Reason(struct soap*, const char*, struct SOAP_ENV__Reason **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *const*, const char*, const char*);

#ifndef soap_write_PointerToSOAP_ENV__Reason
#define soap_write_PointerToSOAP_ENV__Reason(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerToSOAP_ENV__Reason(soap, data), 0) || soap_put_PointerToSOAP_ENV__Reason(soap, data, "SOAP-ENV:Reason", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason **, const char*, const char*);

#ifndef soap_read_PointerToSOAP_ENV__Reason
#define soap_read_PointerToSOAP_ENV__Reason(soap, data) ( ((data) ? (soap_default_PointerToSOAP_ENV__Reason(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_PointerToSOAP_ENV__Reason(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Detail
#define SOAP_TYPE_PointerToSOAP_ENV__Detail (63)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Detail(struct soap*, const char *, int, struct SOAP_ENV__Detail *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Detail(struct soap*, const char*, struct SOAP_ENV__Detail **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *const*, const char*, const char*);

#ifndef soap_write_PointerToSOAP_ENV__Detail
#define soap_write_PointerToSOAP_ENV__Detail(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerToSOAP_ENV__Detail(soap, data), 0) || soap_put_PointerToSOAP_ENV__Detail(soap, data, "SOAP-ENV:Detail", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail **, const char*, const char*);

#ifndef soap_read_PointerToSOAP_ENV__Detail
#define soap_read_PointerToSOAP_ENV__Detail(soap, data) ( ((data) ? (soap_default_PointerToSOAP_ENV__Detail(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_PointerToSOAP_ENV__Detail(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Code
#define SOAP_TYPE_PointerToSOAP_ENV__Code (57)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Code(struct soap*, const char *, int, struct SOAP_ENV__Code *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Code(struct soap*, const char*, struct SOAP_ENV__Code **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *const*, const char*, const char*);

#ifndef soap_write_PointerToSOAP_ENV__Code
#define soap_write_PointerToSOAP_ENV__Code(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerToSOAP_ENV__Code(soap, data), 0) || soap_put_PointerToSOAP_ENV__Code(soap, data, "SOAP-ENV:Code", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code **, const char*, const char*);

#ifndef soap_read_PointerToSOAP_ENV__Code
#define soap_read_PointerToSOAP_ENV__Code(soap, data) ( ((data) ? (soap_default_PointerToSOAP_ENV__Code(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_PointerToSOAP_ENV__Code(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#endif

#ifndef SOAP_TYPE_PointerTostd__vectorTemplateOf_ns1__alert_info
#define SOAP_TYPE_PointerTostd__vectorTemplateOf_ns1__alert_info (52)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTostd__vectorTemplateOf_ns1__alert_info(struct soap*, std::vector<_ns1__alert_info> *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTostd__vectorTemplateOf_ns1__alert_info(struct soap*, const char *, int, std::vector<_ns1__alert_info> *const*, const char *);
SOAP_FMAC3 std::vector<_ns1__alert_info> ** SOAP_FMAC4 soap_in_PointerTostd__vectorTemplateOf_ns1__alert_info(struct soap*, const char*, std::vector<_ns1__alert_info> **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTostd__vectorTemplateOf_ns1__alert_info(struct soap*, std::vector<_ns1__alert_info> *const*, const char*, const char*);

#ifndef soap_write_PointerTostd__vectorTemplateOf_ns1__alert_info
#define soap_write_PointerTostd__vectorTemplateOf_ns1__alert_info(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTostd__vectorTemplateOf_ns1__alert_info(soap, data), 0) || soap_put_PointerTostd__vectorTemplateOf_ns1__alert_info(soap, data, "", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 std::vector<_ns1__alert_info> ** SOAP_FMAC4 soap_get_PointerTostd__vectorTemplateOf_ns1__alert_info(struct soap*, std::vector<_ns1__alert_info> **, const char*, const char*);

#ifndef soap_read_PointerTostd__vectorTemplateOf_ns1__alert_info
#define soap_read_PointerTostd__vectorTemplateOf_ns1__alert_info(soap, data) ( ((data) ? (soap_default_PointerTostd__vectorTemplateOf_ns1__alert_info(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_PointerTostd__vectorTemplateOf_ns1__alert_info(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTostd__vectorTemplateOf_ns1__alert_info_area
#define SOAP_TYPE_PointerTostd__vectorTemplateOf_ns1__alert_info_area (50)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTostd__vectorTemplateOf_ns1__alert_info_area(struct soap*, std::vector<_ns1__alert_info_area> *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTostd__vectorTemplateOf_ns1__alert_info_area(struct soap*, const char *, int, std::vector<_ns1__alert_info_area> *const*, const char *);
SOAP_FMAC3 std::vector<_ns1__alert_info_area> ** SOAP_FMAC4 soap_in_PointerTostd__vectorTemplateOf_ns1__alert_info_area(struct soap*, const char*, std::vector<_ns1__alert_info_area> **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTostd__vectorTemplateOf_ns1__alert_info_area(struct soap*, std::vector<_ns1__alert_info_area> *const*, const char*, const char*);

#ifndef soap_write_PointerTostd__vectorTemplateOf_ns1__alert_info_area
#define soap_write_PointerTostd__vectorTemplateOf_ns1__alert_info_area(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTostd__vectorTemplateOf_ns1__alert_info_area(soap, data), 0) || soap_put_PointerTostd__vectorTemplateOf_ns1__alert_info_area(soap, data, "", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 std::vector<_ns1__alert_info_area> ** SOAP_FMAC4 soap_get_PointerTostd__vectorTemplateOf_ns1__alert_info_area(struct soap*, std::vector<_ns1__alert_info_area> **, const char*, const char*);

#ifndef soap_read_PointerTostd__vectorTemplateOf_ns1__alert_info_area
#define soap_read_PointerTostd__vectorTemplateOf_ns1__alert_info_area(soap, data) ( ((data) ? (soap_default_PointerTostd__vectorTemplateOf_ns1__alert_info_area(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_PointerTostd__vectorTemplateOf_ns1__alert_info_area(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerToxsd__decimal
#define SOAP_TYPE_PointerToxsd__decimal (48)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToxsd__decimal(struct soap*, std::string *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToxsd__decimal(struct soap*, const char *, int, std::string *const*, const char *);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerToxsd__decimal(struct soap*, const char*, std::string **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToxsd__decimal(struct soap*, std::string *const*, const char*, const char*);

#ifndef soap_write_PointerToxsd__decimal
#define soap_write_PointerToxsd__decimal(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerToxsd__decimal(soap, data), 0) || soap_put_PointerToxsd__decimal(soap, data, "xsd:decimal", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerToxsd__decimal(struct soap*, std::string **, const char*, const char*);

#ifndef soap_read_PointerToxsd__decimal
#define soap_read_PointerToxsd__decimal(soap, data) ( ((data) ? (soap_default_PointerToxsd__decimal(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_PointerToxsd__decimal(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTostd__vectorTemplateOf_ns1__alert_info_area_geocode
#define SOAP_TYPE_PointerTostd__vectorTemplateOf_ns1__alert_info_area_geocode (47)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTostd__vectorTemplateOf_ns1__alert_info_area_geocode(struct soap*, std::vector<_ns1__alert_info_area_geocode> *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTostd__vectorTemplateOf_ns1__alert_info_area_geocode(struct soap*, const char *, int, std::vector<_ns1__alert_info_area_geocode> *const*, const char *);
SOAP_FMAC3 std::vector<_ns1__alert_info_area_geocode> ** SOAP_FMAC4 soap_in_PointerTostd__vectorTemplateOf_ns1__alert_info_area_geocode(struct soap*, const char*, std::vector<_ns1__alert_info_area_geocode> **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTostd__vectorTemplateOf_ns1__alert_info_area_geocode(struct soap*, std::vector<_ns1__alert_info_area_geocode> *const*, const char*, const char*);

#ifndef soap_write_PointerTostd__vectorTemplateOf_ns1__alert_info_area_geocode
#define soap_write_PointerTostd__vectorTemplateOf_ns1__alert_info_area_geocode(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTostd__vectorTemplateOf_ns1__alert_info_area_geocode(soap, data), 0) || soap_put_PointerTostd__vectorTemplateOf_ns1__alert_info_area_geocode(soap, data, "", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 std::vector<_ns1__alert_info_area_geocode> ** SOAP_FMAC4 soap_get_PointerTostd__vectorTemplateOf_ns1__alert_info_area_geocode(struct soap*, std::vector<_ns1__alert_info_area_geocode> **, const char*, const char*);

#ifndef soap_read_PointerTostd__vectorTemplateOf_ns1__alert_info_area_geocode
#define soap_read_PointerTostd__vectorTemplateOf_ns1__alert_info_area_geocode(soap, data) ( ((data) ? (soap_default_PointerTostd__vectorTemplateOf_ns1__alert_info_area_geocode(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_PointerTostd__vectorTemplateOf_ns1__alert_info_area_geocode(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTostd__vectorTemplateOf_ns1__alert_info_resource
#define SOAP_TYPE_PointerTostd__vectorTemplateOf_ns1__alert_info_resource (43)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTostd__vectorTemplateOf_ns1__alert_info_resource(struct soap*, std::vector<_ns1__alert_info_resource> *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTostd__vectorTemplateOf_ns1__alert_info_resource(struct soap*, const char *, int, std::vector<_ns1__alert_info_resource> *const*, const char *);
SOAP_FMAC3 std::vector<_ns1__alert_info_resource> ** SOAP_FMAC4 soap_in_PointerTostd__vectorTemplateOf_ns1__alert_info_resource(struct soap*, const char*, std::vector<_ns1__alert_info_resource> **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTostd__vectorTemplateOf_ns1__alert_info_resource(struct soap*, std::vector<_ns1__alert_info_resource> *const*, const char*, const char*);

#ifndef soap_write_PointerTostd__vectorTemplateOf_ns1__alert_info_resource
#define soap_write_PointerTostd__vectorTemplateOf_ns1__alert_info_resource(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTostd__vectorTemplateOf_ns1__alert_info_resource(soap, data), 0) || soap_put_PointerTostd__vectorTemplateOf_ns1__alert_info_resource(soap, data, "", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 std::vector<_ns1__alert_info_resource> ** SOAP_FMAC4 soap_get_PointerTostd__vectorTemplateOf_ns1__alert_info_resource(struct soap*, std::vector<_ns1__alert_info_resource> **, const char*, const char*);

#ifndef soap_read_PointerTostd__vectorTemplateOf_ns1__alert_info_resource
#define soap_read_PointerTostd__vectorTemplateOf_ns1__alert_info_resource(soap, data) ( ((data) ? (soap_default_PointerTostd__vectorTemplateOf_ns1__alert_info_resource(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_PointerTostd__vectorTemplateOf_ns1__alert_info_resource(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerToxsd__integer
#define SOAP_TYPE_PointerToxsd__integer (41)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToxsd__integer(struct soap*, std::string *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToxsd__integer(struct soap*, const char *, int, std::string *const*, const char *);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerToxsd__integer(struct soap*, const char*, std::string **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToxsd__integer(struct soap*, std::string *const*, const char*, const char*);

#ifndef soap_write_PointerToxsd__integer
#define soap_write_PointerToxsd__integer(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerToxsd__integer(soap, data), 0) || soap_put_PointerToxsd__integer(soap, data, "xsd:integer", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerToxsd__integer(struct soap*, std::string **, const char*, const char*);

#ifndef soap_read_PointerToxsd__integer
#define soap_read_PointerToxsd__integer(soap, data) ( ((data) ? (soap_default_PointerToxsd__integer(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_PointerToxsd__integer(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTostd__vectorTemplateOf_ns1__alert_info_parameter
#define SOAP_TYPE_PointerTostd__vectorTemplateOf_ns1__alert_info_parameter (39)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTostd__vectorTemplateOf_ns1__alert_info_parameter(struct soap*, std::vector<_ns1__alert_info_parameter> *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTostd__vectorTemplateOf_ns1__alert_info_parameter(struct soap*, const char *, int, std::vector<_ns1__alert_info_parameter> *const*, const char *);
SOAP_FMAC3 std::vector<_ns1__alert_info_parameter> ** SOAP_FMAC4 soap_in_PointerTostd__vectorTemplateOf_ns1__alert_info_parameter(struct soap*, const char*, std::vector<_ns1__alert_info_parameter> **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTostd__vectorTemplateOf_ns1__alert_info_parameter(struct soap*, std::vector<_ns1__alert_info_parameter> *const*, const char*, const char*);

#ifndef soap_write_PointerTostd__vectorTemplateOf_ns1__alert_info_parameter
#define soap_write_PointerTostd__vectorTemplateOf_ns1__alert_info_parameter(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTostd__vectorTemplateOf_ns1__alert_info_parameter(soap, data), 0) || soap_put_PointerTostd__vectorTemplateOf_ns1__alert_info_parameter(soap, data, "", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 std::vector<_ns1__alert_info_parameter> ** SOAP_FMAC4 soap_get_PointerTostd__vectorTemplateOf_ns1__alert_info_parameter(struct soap*, std::vector<_ns1__alert_info_parameter> **, const char*, const char*);

#ifndef soap_read_PointerTostd__vectorTemplateOf_ns1__alert_info_parameter
#define soap_read_PointerTostd__vectorTemplateOf_ns1__alert_info_parameter(soap, data) ( ((data) ? (soap_default_PointerTostd__vectorTemplateOf_ns1__alert_info_parameter(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_PointerTostd__vectorTemplateOf_ns1__alert_info_parameter(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerToxsd__anyURI
#define SOAP_TYPE_PointerToxsd__anyURI (36)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToxsd__anyURI(struct soap*, std::string *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToxsd__anyURI(struct soap*, const char *, int, std::string *const*, const char *);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerToxsd__anyURI(struct soap*, const char*, std::string **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToxsd__anyURI(struct soap*, std::string *const*, const char*, const char*);

#ifndef soap_write_PointerToxsd__anyURI
#define soap_write_PointerToxsd__anyURI(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerToxsd__anyURI(soap, data), 0) || soap_put_PointerToxsd__anyURI(soap, data, "xsd:anyURI", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerToxsd__anyURI(struct soap*, std::string **, const char*, const char*);

#ifndef soap_read_PointerToxsd__anyURI
#define soap_read_PointerToxsd__anyURI(soap, data) ( ((data) ? (soap_default_PointerToxsd__anyURI(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_PointerToxsd__anyURI(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTodateTime
#define SOAP_TYPE_PointerTodateTime (35)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTodateTime(struct soap*, time_t *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTodateTime(struct soap*, const char *, int, time_t *const*, const char *);
SOAP_FMAC3 time_t ** SOAP_FMAC4 soap_in_PointerTodateTime(struct soap*, const char*, time_t **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTodateTime(struct soap*, time_t *const*, const char*, const char*);

#ifndef soap_write_PointerTodateTime
#define soap_write_PointerTodateTime(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTodateTime(soap, data), 0) || soap_put_PointerTodateTime(soap, data, "dateTime", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 time_t ** SOAP_FMAC4 soap_get_PointerTodateTime(struct soap*, time_t **, const char*, const char*);

#ifndef soap_read_PointerTodateTime
#define soap_read_PointerTodateTime(soap, data) ( ((data) ? (soap_default_PointerTodateTime(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_PointerTodateTime(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTostd__vectorTemplateOf_ns1__alert_info_eventCode
#define SOAP_TYPE_PointerTostd__vectorTemplateOf_ns1__alert_info_eventCode (34)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTostd__vectorTemplateOf_ns1__alert_info_eventCode(struct soap*, std::vector<_ns1__alert_info_eventCode> *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTostd__vectorTemplateOf_ns1__alert_info_eventCode(struct soap*, const char *, int, std::vector<_ns1__alert_info_eventCode> *const*, const char *);
SOAP_FMAC3 std::vector<_ns1__alert_info_eventCode> ** SOAP_FMAC4 soap_in_PointerTostd__vectorTemplateOf_ns1__alert_info_eventCode(struct soap*, const char*, std::vector<_ns1__alert_info_eventCode> **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTostd__vectorTemplateOf_ns1__alert_info_eventCode(struct soap*, std::vector<_ns1__alert_info_eventCode> *const*, const char*, const char*);

#ifndef soap_write_PointerTostd__vectorTemplateOf_ns1__alert_info_eventCode
#define soap_write_PointerTostd__vectorTemplateOf_ns1__alert_info_eventCode(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTostd__vectorTemplateOf_ns1__alert_info_eventCode(soap, data), 0) || soap_put_PointerTostd__vectorTemplateOf_ns1__alert_info_eventCode(soap, data, "", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 std::vector<_ns1__alert_info_eventCode> ** SOAP_FMAC4 soap_get_PointerTostd__vectorTemplateOf_ns1__alert_info_eventCode(struct soap*, std::vector<_ns1__alert_info_eventCode> **, const char*, const char*);

#ifndef soap_read_PointerTostd__vectorTemplateOf_ns1__alert_info_eventCode
#define soap_read_PointerTostd__vectorTemplateOf_ns1__alert_info_eventCode(soap, data) ( ((data) ? (soap_default_PointerTostd__vectorTemplateOf_ns1__alert_info_eventCode(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_PointerTostd__vectorTemplateOf_ns1__alert_info_eventCode(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTostd__vectorTemplateOf_ns1__alert_info_responseType
#define SOAP_TYPE_PointerTostd__vectorTemplateOf_ns1__alert_info_responseType (28)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTostd__vectorTemplateOf_ns1__alert_info_responseType(struct soap*, std::vector<enum _ns1__alert_info_responseType> *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTostd__vectorTemplateOf_ns1__alert_info_responseType(struct soap*, const char *, int, std::vector<enum _ns1__alert_info_responseType> *const*, const char *);
SOAP_FMAC3 std::vector<enum _ns1__alert_info_responseType> ** SOAP_FMAC4 soap_in_PointerTostd__vectorTemplateOf_ns1__alert_info_responseType(struct soap*, const char*, std::vector<enum _ns1__alert_info_responseType> **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTostd__vectorTemplateOf_ns1__alert_info_responseType(struct soap*, std::vector<enum _ns1__alert_info_responseType> *const*, const char*, const char*);

#ifndef soap_write_PointerTostd__vectorTemplateOf_ns1__alert_info_responseType
#define soap_write_PointerTostd__vectorTemplateOf_ns1__alert_info_responseType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTostd__vectorTemplateOf_ns1__alert_info_responseType(soap, data), 0) || soap_put_PointerTostd__vectorTemplateOf_ns1__alert_info_responseType(soap, data, "", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 std::vector<enum _ns1__alert_info_responseType> ** SOAP_FMAC4 soap_get_PointerTostd__vectorTemplateOf_ns1__alert_info_responseType(struct soap*, std::vector<enum _ns1__alert_info_responseType> **, const char*, const char*);

#ifndef soap_read_PointerTostd__vectorTemplateOf_ns1__alert_info_responseType
#define soap_read_PointerTostd__vectorTemplateOf_ns1__alert_info_responseType(soap, data) ( ((data) ? (soap_default_PointerTostd__vectorTemplateOf_ns1__alert_info_responseType(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_PointerTostd__vectorTemplateOf_ns1__alert_info_responseType(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTostd__string
#define SOAP_TYPE_PointerTostd__string (20)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTostd__string(struct soap*, std::string *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTostd__string(struct soap*, const char *, int, std::string *const*, const char *);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerTostd__string(struct soap*, const char*, std::string **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTostd__string(struct soap*, std::string *const*, const char*, const char*);

#ifndef soap_write_PointerTostd__string
#define soap_write_PointerTostd__string(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTostd__string(soap, data), 0) || soap_put_PointerTostd__string(soap, data, "string", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerTostd__string(struct soap*, std::string **, const char*, const char*);

#ifndef soap_read_PointerTostd__string
#define soap_read_PointerTostd__string(soap, data) ( ((data) ? (soap_default_PointerTostd__string(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_PointerTostd__string(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE__QName
#define SOAP_TYPE__QName (5)
#endif

#define soap_default__QName(soap, a) soap_default_string(soap, a)

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__QName(struct soap*, char *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out__QName(struct soap*, const char*, int, char*const*, const char*);
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in__QName(struct soap*, const char*, char **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put__QName(struct soap*, char *const*, const char*, const char*);

#ifndef soap_write__QName
#define soap_write__QName(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize__QName(soap, data), 0) || soap_put__QName(soap, data, "QName", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get__QName(struct soap*, char **, const char*, const char*);

#ifndef soap_read__QName
#define soap_read__QName(soap, data) ( ((data) ? (soap_default__QName(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get__QName(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_string
#define SOAP_TYPE_string (4)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_string(struct soap*, char **);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_string(struct soap*, char *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_string(struct soap*, const char*, int, char*const*, const char*);
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_string(struct soap*, const char*, char **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_string(struct soap*, char *const*, const char*, const char*);

#ifndef soap_write_string
#define soap_write_string(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_string(soap, data), 0) || soap_put_string(soap, data, "string", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_string(struct soap*, char **, const char*, const char*);

#ifndef soap_read_string
#define soap_read_string(soap, data) ( ((data) ? (soap_default_string(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_string(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_std__vectorTemplateOf_XML
#define SOAP_TYPE_std__vectorTemplateOf_XML (53)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOf_XML(struct soap*, std::vector<char *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOf_XML(struct soap*, const std::vector<char *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOf_XML(struct soap*, const char*, int, const std::vector<char *> *, const char*);
SOAP_FMAC3 std::vector<char *> * SOAP_FMAC4 soap_in_std__vectorTemplateOf_XML(struct soap*, const char*, std::vector<char *> *, const char*);
SOAP_FMAC1 std::vector<char *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOf_XML(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<char *>  * soap_new_std__vectorTemplateOf_XML(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOf_XML(soap, n, NULL, NULL, NULL); }

#ifndef SOAP_TYPE_std__vectorTemplateOf_ns1__alert_info
#define SOAP_TYPE_std__vectorTemplateOf_ns1__alert_info (51)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOf_ns1__alert_info(struct soap*, std::vector<_ns1__alert_info> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOf_ns1__alert_info(struct soap*, const std::vector<_ns1__alert_info> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOf_ns1__alert_info(struct soap*, const char*, int, const std::vector<_ns1__alert_info> *, const char*);
SOAP_FMAC3 std::vector<_ns1__alert_info> * SOAP_FMAC4 soap_in_std__vectorTemplateOf_ns1__alert_info(struct soap*, const char*, std::vector<_ns1__alert_info> *, const char*);
SOAP_FMAC1 std::vector<_ns1__alert_info>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOf_ns1__alert_info(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<_ns1__alert_info>  * soap_new_std__vectorTemplateOf_ns1__alert_info(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOf_ns1__alert_info(soap, n, NULL, NULL, NULL); }

#ifndef SOAP_TYPE_std__vectorTemplateOf_ns1__alert_info_area
#define SOAP_TYPE_std__vectorTemplateOf_ns1__alert_info_area (49)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOf_ns1__alert_info_area(struct soap*, std::vector<_ns1__alert_info_area> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOf_ns1__alert_info_area(struct soap*, const std::vector<_ns1__alert_info_area> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOf_ns1__alert_info_area(struct soap*, const char*, int, const std::vector<_ns1__alert_info_area> *, const char*);
SOAP_FMAC3 std::vector<_ns1__alert_info_area> * SOAP_FMAC4 soap_in_std__vectorTemplateOf_ns1__alert_info_area(struct soap*, const char*, std::vector<_ns1__alert_info_area> *, const char*);
SOAP_FMAC1 std::vector<_ns1__alert_info_area>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOf_ns1__alert_info_area(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<_ns1__alert_info_area>  * soap_new_std__vectorTemplateOf_ns1__alert_info_area(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOf_ns1__alert_info_area(soap, n, NULL, NULL, NULL); }

#ifndef SOAP_TYPE_std__vectorTemplateOf_ns1__alert_info_area_geocode
#define SOAP_TYPE_std__vectorTemplateOf_ns1__alert_info_area_geocode (46)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOf_ns1__alert_info_area_geocode(struct soap*, std::vector<_ns1__alert_info_area_geocode> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOf_ns1__alert_info_area_geocode(struct soap*, const std::vector<_ns1__alert_info_area_geocode> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOf_ns1__alert_info_area_geocode(struct soap*, const char*, int, const std::vector<_ns1__alert_info_area_geocode> *, const char*);
SOAP_FMAC3 std::vector<_ns1__alert_info_area_geocode> * SOAP_FMAC4 soap_in_std__vectorTemplateOf_ns1__alert_info_area_geocode(struct soap*, const char*, std::vector<_ns1__alert_info_area_geocode> *, const char*);
SOAP_FMAC1 std::vector<_ns1__alert_info_area_geocode>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOf_ns1__alert_info_area_geocode(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<_ns1__alert_info_area_geocode>  * soap_new_std__vectorTemplateOf_ns1__alert_info_area_geocode(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOf_ns1__alert_info_area_geocode(soap, n, NULL, NULL, NULL); }

#ifndef SOAP_TYPE_std__vectorTemplateOf_ns1__alert_info_resource
#define SOAP_TYPE_std__vectorTemplateOf_ns1__alert_info_resource (42)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOf_ns1__alert_info_resource(struct soap*, std::vector<_ns1__alert_info_resource> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOf_ns1__alert_info_resource(struct soap*, const std::vector<_ns1__alert_info_resource> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOf_ns1__alert_info_resource(struct soap*, const char*, int, const std::vector<_ns1__alert_info_resource> *, const char*);
SOAP_FMAC3 std::vector<_ns1__alert_info_resource> * SOAP_FMAC4 soap_in_std__vectorTemplateOf_ns1__alert_info_resource(struct soap*, const char*, std::vector<_ns1__alert_info_resource> *, const char*);
SOAP_FMAC1 std::vector<_ns1__alert_info_resource>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOf_ns1__alert_info_resource(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<_ns1__alert_info_resource>  * soap_new_std__vectorTemplateOf_ns1__alert_info_resource(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOf_ns1__alert_info_resource(soap, n, NULL, NULL, NULL); }

#ifndef SOAP_TYPE_std__vectorTemplateOf_ns1__alert_info_parameter
#define SOAP_TYPE_std__vectorTemplateOf_ns1__alert_info_parameter (38)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOf_ns1__alert_info_parameter(struct soap*, std::vector<_ns1__alert_info_parameter> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOf_ns1__alert_info_parameter(struct soap*, const std::vector<_ns1__alert_info_parameter> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOf_ns1__alert_info_parameter(struct soap*, const char*, int, const std::vector<_ns1__alert_info_parameter> *, const char*);
SOAP_FMAC3 std::vector<_ns1__alert_info_parameter> * SOAP_FMAC4 soap_in_std__vectorTemplateOf_ns1__alert_info_parameter(struct soap*, const char*, std::vector<_ns1__alert_info_parameter> *, const char*);
SOAP_FMAC1 std::vector<_ns1__alert_info_parameter>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOf_ns1__alert_info_parameter(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<_ns1__alert_info_parameter>  * soap_new_std__vectorTemplateOf_ns1__alert_info_parameter(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOf_ns1__alert_info_parameter(soap, n, NULL, NULL, NULL); }

#ifndef SOAP_TYPE_std__vectorTemplateOf_ns1__alert_info_eventCode
#define SOAP_TYPE_std__vectorTemplateOf_ns1__alert_info_eventCode (33)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOf_ns1__alert_info_eventCode(struct soap*, std::vector<_ns1__alert_info_eventCode> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOf_ns1__alert_info_eventCode(struct soap*, const std::vector<_ns1__alert_info_eventCode> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOf_ns1__alert_info_eventCode(struct soap*, const char*, int, const std::vector<_ns1__alert_info_eventCode> *, const char*);
SOAP_FMAC3 std::vector<_ns1__alert_info_eventCode> * SOAP_FMAC4 soap_in_std__vectorTemplateOf_ns1__alert_info_eventCode(struct soap*, const char*, std::vector<_ns1__alert_info_eventCode> *, const char*);
SOAP_FMAC1 std::vector<_ns1__alert_info_eventCode>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOf_ns1__alert_info_eventCode(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<_ns1__alert_info_eventCode>  * soap_new_std__vectorTemplateOf_ns1__alert_info_eventCode(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOf_ns1__alert_info_eventCode(soap, n, NULL, NULL, NULL); }

#ifndef SOAP_TYPE_std__vectorTemplateOf_ns1__alert_info_responseType
#define SOAP_TYPE_std__vectorTemplateOf_ns1__alert_info_responseType (27)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOf_ns1__alert_info_responseType(struct soap*, std::vector<enum _ns1__alert_info_responseType> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOf_ns1__alert_info_responseType(struct soap*, const std::vector<enum _ns1__alert_info_responseType> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOf_ns1__alert_info_responseType(struct soap*, const char*, int, const std::vector<enum _ns1__alert_info_responseType> *, const char*);
SOAP_FMAC3 std::vector<enum _ns1__alert_info_responseType> * SOAP_FMAC4 soap_in_std__vectorTemplateOf_ns1__alert_info_responseType(struct soap*, const char*, std::vector<enum _ns1__alert_info_responseType> *, const char*);
SOAP_FMAC1 std::vector<enum _ns1__alert_info_responseType>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOf_ns1__alert_info_responseType(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<enum _ns1__alert_info_responseType>  * soap_new_std__vectorTemplateOf_ns1__alert_info_responseType(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOf_ns1__alert_info_responseType(soap, n, NULL, NULL, NULL); }

#ifndef SOAP_TYPE_std__vectorTemplateOf_ns1__alert_info_category
#define SOAP_TYPE_std__vectorTemplateOf_ns1__alert_info_category (25)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOf_ns1__alert_info_category(struct soap*, std::vector<enum _ns1__alert_info_category> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOf_ns1__alert_info_category(struct soap*, const std::vector<enum _ns1__alert_info_category> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOf_ns1__alert_info_category(struct soap*, const char*, int, const std::vector<enum _ns1__alert_info_category> *, const char*);
SOAP_FMAC3 std::vector<enum _ns1__alert_info_category> * SOAP_FMAC4 soap_in_std__vectorTemplateOf_ns1__alert_info_category(struct soap*, const char*, std::vector<enum _ns1__alert_info_category> *, const char*);
SOAP_FMAC1 std::vector<enum _ns1__alert_info_category>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOf_ns1__alert_info_category(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<enum _ns1__alert_info_category>  * soap_new_std__vectorTemplateOf_ns1__alert_info_category(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOf_ns1__alert_info_category(soap, n, NULL, NULL, NULL); }

#ifndef SOAP_TYPE_std__vectorTemplateOfstd__string
#define SOAP_TYPE_std__vectorTemplateOfstd__string (22)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfstd__string(struct soap*, std::vector<std::string> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfstd__string(struct soap*, const std::vector<std::string> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfstd__string(struct soap*, const char*, int, const std::vector<std::string> *, const char*);
SOAP_FMAC3 std::vector<std::string> * SOAP_FMAC4 soap_in_std__vectorTemplateOfstd__string(struct soap*, const char*, std::vector<std::string> *, const char*);
SOAP_FMAC1 std::vector<std::string>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfstd__string(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<std::string>  * soap_new_std__vectorTemplateOfstd__string(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfstd__string(soap, n, NULL, NULL, NULL); }

#endif

/* End of soapH.h */
