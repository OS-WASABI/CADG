/* soapStub.h
   Generated by gSOAP 2.8.28 from CAP-v1.2.h

gSOAP XML Web services tools
Copyright (C) 2000-2016, Robert van Engelen, Genivia Inc. All Rights Reserved.
The soapcpp2 tool and its generated software are released under the GPL.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial use license is available from Genivia Inc., contact@genivia.com
--------------------------------------------------------------------------------
*/

#include <deque>
#include <list>
#include <vector>
#include <set>
#define SOAP_NAMESPACE_OF_ns1	"urn:oasis:names:tc:emergency:cap:1.2"

#ifndef soapStub_H
#define soapStub_H
#include "stdsoap2.h"
#if GSOAP_VERSION != 20828
# error "GSOAP VERSION 20828 MISMATCH IN GENERATED CODE VERSUS LIBRARY CODE: PLEASE REINSTALL PACKAGE"
#endif


/******************************************************************************\
 *                                                                            *
 * Enumerations                                                               *
 *                                                                            *
\******************************************************************************/


/* CAP-v1.2.h:204 */
#ifndef SOAP_TYPE__ns1__alert_status
#define SOAP_TYPE__ns1__alert_status (18)
/* ns1:alert-status */
enum _ns1__alert_status
{
	_ns1__alert_status__Actual = 0,
	_ns1__alert_status__Exercise = 1,
	_ns1__alert_status__System = 2,
	_ns1__alert_status__Test = 3,
	_ns1__alert_status__Draft = 4
};
#endif

/* CAP-v1.2.h:213 */
#ifndef SOAP_TYPE__ns1__alert_msgType
#define SOAP_TYPE__ns1__alert_msgType (19)
/* ns1:alert-msgType */
enum _ns1__alert_msgType
{
	_ns1__alert_msgType__Alert = 0,
	_ns1__alert_msgType__Update = 1,
	_ns1__alert_msgType__Cancel = 2,
	_ns1__alert_msgType__Ack = 3,
	_ns1__alert_msgType__Error = 4
};
#endif

/* CAP-v1.2.h:224 */
#ifndef SOAP_TYPE__ns1__alert_scope
#define SOAP_TYPE__ns1__alert_scope (21)
/* ns1:alert-scope */
enum _ns1__alert_scope
{
	_ns1__alert_scope__Public = 0,
	_ns1__alert_scope__Restricted = 1,
	_ns1__alert_scope__Private = 2
};
#endif

/* CAP-v1.2.h:261 */
#ifndef SOAP_TYPE__ns1__alert_info_category
#define SOAP_TYPE__ns1__alert_info_category (24)
/* ns1:alert-info-category */
enum _ns1__alert_info_category
{
	_ns1__alert_info_category__Geo = 0,
	_ns1__alert_info_category__Met = 1,
	_ns1__alert_info_category__Safety = 2,
	_ns1__alert_info_category__Security = 3,
	_ns1__alert_info_category__Rescue = 4,
	_ns1__alert_info_category__Fire = 5,
	_ns1__alert_info_category__Health = 6,
	_ns1__alert_info_category__Env = 7,
	_ns1__alert_info_category__Transport = 8,
	_ns1__alert_info_category__Infra = 9,
	_ns1__alert_info_category__CBRNE = 10,
	_ns1__alert_info_category__Other = 11
};
#endif

/* CAP-v1.2.h:281 */
#ifndef SOAP_TYPE__ns1__alert_info_responseType
#define SOAP_TYPE__ns1__alert_info_responseType (26)
/* ns1:alert-info-responseType */
enum _ns1__alert_info_responseType
{
	_ns1__alert_info_responseType__Shelter = 0,
	_ns1__alert_info_responseType__Evacuate = 1,
	_ns1__alert_info_responseType__Prepare = 2,
	_ns1__alert_info_responseType__Execute = 3,
	_ns1__alert_info_responseType__Avoid = 4,
	_ns1__alert_info_responseType__Monitor = 5,
	_ns1__alert_info_responseType__Assess = 6,
	_ns1__alert_info_responseType__AllClear = 7,
	_ns1__alert_info_responseType__None = 8
};
#endif

/* CAP-v1.2.h:294 */
#ifndef SOAP_TYPE__ns1__alert_info_urgency
#define SOAP_TYPE__ns1__alert_info_urgency (29)
/* ns1:alert-info-urgency */
enum _ns1__alert_info_urgency
{
	_ns1__alert_info_urgency__Immediate = 0,
	_ns1__alert_info_urgency__Expected = 1,
	_ns1__alert_info_urgency__Future = 2,
	_ns1__alert_info_urgency__Past = 3,
	_ns1__alert_info_urgency__Unknown = 4
};
#endif

/* CAP-v1.2.h:303 */
#ifndef SOAP_TYPE__ns1__alert_info_severity
#define SOAP_TYPE__ns1__alert_info_severity (30)
/* ns1:alert-info-severity */
enum _ns1__alert_info_severity
{
	_ns1__alert_info_severity__Extreme = 0,
	_ns1__alert_info_severity__Severe = 1,
	_ns1__alert_info_severity__Moderate = 2,
	_ns1__alert_info_severity__Minor = 3,
	_ns1__alert_info_severity__Unknown = 4
};
#endif

/* CAP-v1.2.h:312 */
#ifndef SOAP_TYPE__ns1__alert_info_certainty
#define SOAP_TYPE__ns1__alert_info_certainty (31)
/* ns1:alert-info-certainty */
enum _ns1__alert_info_certainty
{
	_ns1__alert_info_certainty__Observed = 0,
	_ns1__alert_info_certainty__Likely = 1,
	_ns1__alert_info_certainty__Possible = 2,
	_ns1__alert_info_certainty__Unlikely = 3,
	_ns1__alert_info_certainty__Unknown = 4
};
#endif

/******************************************************************************\
 *                                                                            *
 * Types with Custom Serializers                                              *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Classes, Structs, and Unions                                               *
 *                                                                            *
\******************************************************************************/

class _ns1__alert_info_eventCode;	/* CAP-v1.2.h:334 */
class _ns1__alert_info_parameter;	/* CAP-v1.2.h:374 */
class _ns1__alert_info_resource;	/* CAP-v1.2.h:393 */
class _ns1__alert_info_area_geocode;	/* CAP-v1.2.h:440 */
class _ns1__alert_info_area;	/* CAP-v1.2.h:420 */
class _ns1__alert_info;	/* CAP-v1.2.h:254 */
class _ns1__alert;	/* CAP-v1.2.h:160 */

/* CAP-v1.2.h:334 */
#ifndef SOAP_TYPE__ns1__alert_info_eventCode
#define SOAP_TYPE__ns1__alert_info_eventCode (32)
/* ns1:alert-info-eventCode complex type: */
class SOAP_CMAC _ns1__alert_info_eventCode
{
public:
	std::string valueName;	/* required element of XSD type xsd:string */
	std::string value;	/* required element of XSD type xsd:string */
public:
	/// Return the unique type ID value SOAP_TYPE__ns1__alert_info_eventCode (32)
	virtual int soap_type(void) const { return 32; }
	/// Set object's data members to default values
	virtual void soap_default(struct soap*);
	/// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
	virtual void soap_serialize(struct soap*) const;
	/// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
	virtual int soap_put(struct soap*, const char *tag, const char *type) const;
	/// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
	virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
	/// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
	virtual void *soap_get(struct soap*, const char *tag, const char *type);
	/// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
	virtual void *soap_in(struct soap*, const char *tag, const char *type);
	/// Return a new object of type _ns1__alert_info_eventCode, default initialized and not managed by a soap context
	virtual _ns1__alert_info_eventCode *soap_alloc(void) const { return SOAP_NEW(_ns1__alert_info_eventCode); }
	         _ns1__alert_info_eventCode() { _ns1__alert_info_eventCode::soap_default(NULL); }
	virtual ~_ns1__alert_info_eventCode() { }
	friend SOAP_FMAC1 _ns1__alert_info_eventCode * SOAP_FMAC2 soap_instantiate__ns1__alert_info_eventCode(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* CAP-v1.2.h:374 */
#ifndef SOAP_TYPE__ns1__alert_info_parameter
#define SOAP_TYPE__ns1__alert_info_parameter (37)
/* ns1:alert-info-parameter complex type: */
class SOAP_CMAC _ns1__alert_info_parameter
{
public:
	std::string valueName;	/* required element of XSD type xsd:string */
	std::string value;	/* required element of XSD type xsd:string */
public:
	/// Return the unique type ID value SOAP_TYPE__ns1__alert_info_parameter (37)
	virtual int soap_type(void) const { return 37; }
	/// Set object's data members to default values
	virtual void soap_default(struct soap*);
	/// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
	virtual void soap_serialize(struct soap*) const;
	/// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
	virtual int soap_put(struct soap*, const char *tag, const char *type) const;
	/// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
	virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
	/// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
	virtual void *soap_get(struct soap*, const char *tag, const char *type);
	/// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
	virtual void *soap_in(struct soap*, const char *tag, const char *type);
	/// Return a new object of type _ns1__alert_info_parameter, default initialized and not managed by a soap context
	virtual _ns1__alert_info_parameter *soap_alloc(void) const { return SOAP_NEW(_ns1__alert_info_parameter); }
	         _ns1__alert_info_parameter() { _ns1__alert_info_parameter::soap_default(NULL); }
	virtual ~_ns1__alert_info_parameter() { }
	friend SOAP_FMAC1 _ns1__alert_info_parameter * SOAP_FMAC2 soap_instantiate__ns1__alert_info_parameter(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* CAP-v1.2.h:393 */
#ifndef SOAP_TYPE__ns1__alert_info_resource
#define SOAP_TYPE__ns1__alert_info_resource (40)
/* ns1:alert-info-resource complex type: */
class SOAP_CMAC _ns1__alert_info_resource
{
public:
	std::string resourceDesc;	/* required element of XSD type xsd:string */
	std::string mimeType;	/* required element of XSD type xsd:string */
	std::string *size;	/* optional element of XSD type xsd:integer */
	std::string *uri;	/* optional element of XSD type xsd:anyURI */
	std::string *derefUri;	/* optional element of XSD type xsd:string */
	std::string *digest;	/* optional element of XSD type xsd:string */
public:
	/// Return the unique type ID value SOAP_TYPE__ns1__alert_info_resource (40)
	virtual int soap_type(void) const { return 40; }
	/// Set object's data members to default values
	virtual void soap_default(struct soap*);
	/// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
	virtual void soap_serialize(struct soap*) const;
	/// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
	virtual int soap_put(struct soap*, const char *tag, const char *type) const;
	/// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
	virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
	/// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
	virtual void *soap_get(struct soap*, const char *tag, const char *type);
	/// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
	virtual void *soap_in(struct soap*, const char *tag, const char *type);
	/// Return a new object of type _ns1__alert_info_resource, default initialized and not managed by a soap context
	virtual _ns1__alert_info_resource *soap_alloc(void) const { return SOAP_NEW(_ns1__alert_info_resource); }
	         _ns1__alert_info_resource() { _ns1__alert_info_resource::soap_default(NULL); }
	virtual ~_ns1__alert_info_resource() { }
	friend SOAP_FMAC1 _ns1__alert_info_resource * SOAP_FMAC2 soap_instantiate__ns1__alert_info_resource(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* CAP-v1.2.h:440 */
#ifndef SOAP_TYPE__ns1__alert_info_area_geocode
#define SOAP_TYPE__ns1__alert_info_area_geocode (45)
/* ns1:alert-info-area-geocode complex type: */
class SOAP_CMAC _ns1__alert_info_area_geocode
{
public:
	std::string valueName;	/* required element of XSD type xsd:string */
	std::string value;	/* required element of XSD type xsd:string */
public:
	/// Return the unique type ID value SOAP_TYPE__ns1__alert_info_area_geocode (45)
	virtual int soap_type(void) const { return 45; }
	/// Set object's data members to default values
	virtual void soap_default(struct soap*);
	/// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
	virtual void soap_serialize(struct soap*) const;
	/// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
	virtual int soap_put(struct soap*, const char *tag, const char *type) const;
	/// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
	virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
	/// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
	virtual void *soap_get(struct soap*, const char *tag, const char *type);
	/// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
	virtual void *soap_in(struct soap*, const char *tag, const char *type);
	/// Return a new object of type _ns1__alert_info_area_geocode, default initialized and not managed by a soap context
	virtual _ns1__alert_info_area_geocode *soap_alloc(void) const { return SOAP_NEW(_ns1__alert_info_area_geocode); }
	         _ns1__alert_info_area_geocode() { _ns1__alert_info_area_geocode::soap_default(NULL); }
	virtual ~_ns1__alert_info_area_geocode() { }
	friend SOAP_FMAC1 _ns1__alert_info_area_geocode * SOAP_FMAC2 soap_instantiate__ns1__alert_info_area_geocode(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* CAP-v1.2.h:420 */
#ifndef SOAP_TYPE__ns1__alert_info_area
#define SOAP_TYPE__ns1__alert_info_area (44)
/* ns1:alert-info-area complex type: */
class SOAP_CMAC _ns1__alert_info_area
{
public:
	std::string areaDesc;	/* required element of XSD type xsd:string */
	std::vector<std::string> polygon;	/* optional element of XSD type xsd:string */
	std::vector<std::string> circle;	/* optional element of XSD type xsd:string */
	std::vector<_ns1__alert_info_area_geocode> *geocode;	/* optional element of XSD type ns1:alert-info-area-geocode */
	std::string *altitude;	/* optional element of XSD type xsd:decimal */
	std::string *ceiling;	/* optional element of XSD type xsd:decimal */
public:
	/// Return the unique type ID value SOAP_TYPE__ns1__alert_info_area (44)
	virtual int soap_type(void) const { return 44; }
	/// Set object's data members to default values
	virtual void soap_default(struct soap*);
	/// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
	virtual void soap_serialize(struct soap*) const;
	/// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
	virtual int soap_put(struct soap*, const char *tag, const char *type) const;
	/// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
	virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
	/// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
	virtual void *soap_get(struct soap*, const char *tag, const char *type);
	/// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
	virtual void *soap_in(struct soap*, const char *tag, const char *type);
	/// Return a new object of type _ns1__alert_info_area, default initialized and not managed by a soap context
	virtual _ns1__alert_info_area *soap_alloc(void) const { return SOAP_NEW(_ns1__alert_info_area); }
	         _ns1__alert_info_area() { _ns1__alert_info_area::soap_default(NULL); }
	virtual ~_ns1__alert_info_area() { }
	friend SOAP_FMAC1 _ns1__alert_info_area * SOAP_FMAC2 soap_instantiate__ns1__alert_info_area(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* CAP-v1.2.h:254 */
#ifndef SOAP_TYPE__ns1__alert_info
#define SOAP_TYPE__ns1__alert_info (23)
/* ns1:alert-info complex type: */
class SOAP_CMAC _ns1__alert_info
{
public:
	std::string language;	/* optional element of XSD type xsd:language */
	std::vector<enum _ns1__alert_info_category> category;	/* required element of XSD type ns1:alert-info-category */
	std::string event;	/* required element of XSD type xsd:string */
	std::vector<enum _ns1__alert_info_responseType> *responseType;	/* optional element of XSD type ns1:alert-info-responseType */
	enum _ns1__alert_info_urgency urgency;	/* required element of XSD type ns1:alert-info-urgency */
	enum _ns1__alert_info_severity severity;	/* required element of XSD type ns1:alert-info-severity */
	enum _ns1__alert_info_certainty certainty;	/* required element of XSD type ns1:alert-info-certainty */
	std::string *audience;	/* optional element of XSD type xsd:string */
	std::vector<_ns1__alert_info_eventCode> *eventCode;	/* optional element of XSD type ns1:alert-info-eventCode */
	time_t *effective;	/* optional element of XSD type xsd:dateTime */
	time_t *onset;	/* optional element of XSD type xsd:dateTime */
	time_t *expires;	/* optional element of XSD type xsd:dateTime */
	std::string *senderName;	/* optional element of XSD type xsd:string */
	std::string *headline;	/* optional element of XSD type xsd:string */
	std::string *description;	/* optional element of XSD type xsd:string */
	std::string *instruction;	/* optional element of XSD type xsd:string */
	std::string *web;	/* optional element of XSD type xsd:anyURI */
	std::string *contact;	/* optional element of XSD type xsd:string */
	std::vector<_ns1__alert_info_parameter> *parameter;	/* optional element of XSD type ns1:alert-info-parameter */
	std::vector<_ns1__alert_info_resource> *resource;	/* optional element of XSD type ns1:alert-info-resource */
	std::vector<_ns1__alert_info_area> *area;	/* optional element of XSD type ns1:alert-info-area */
public:
	/// Return the unique type ID value SOAP_TYPE__ns1__alert_info (23)
	virtual int soap_type(void) const { return 23; }
	/// Set object's data members to default values
	virtual void soap_default(struct soap*);
	/// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
	virtual void soap_serialize(struct soap*) const;
	/// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
	virtual int soap_put(struct soap*, const char *tag, const char *type) const;
	/// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
	virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
	/// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
	virtual void *soap_get(struct soap*, const char *tag, const char *type);
	/// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
	virtual void *soap_in(struct soap*, const char *tag, const char *type);
	/// Return a new object of type _ns1__alert_info, default initialized and not managed by a soap context
	virtual _ns1__alert_info *soap_alloc(void) const { return SOAP_NEW(_ns1__alert_info); }
	         _ns1__alert_info() { _ns1__alert_info::soap_default(NULL); }
	virtual ~_ns1__alert_info() { }
	friend SOAP_FMAC1 _ns1__alert_info * SOAP_FMAC2 soap_instantiate__ns1__alert_info(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* CAP-v1.2.h:160 */
#ifndef SOAP_TYPE__ns1__alert
#define SOAP_TYPE__ns1__alert (16)
/* ns1:alert complex type: */
class SOAP_CMAC _ns1__alert
{
public:
	std::string identifier;	/* required element of XSD type xsd:string */
	std::string sender;	/* required element of XSD type xsd:string */
	time_t sent;	/* required element of XSD type xsd:dateTime */
	enum _ns1__alert_status status;	/* required element of XSD type ns1:alert-status */
	enum _ns1__alert_msgType msgType;	/* required element of XSD type ns1:alert-msgType */
	std::string *source;	/* optional element of XSD type xsd:string */
	enum _ns1__alert_scope scope;	/* required element of XSD type ns1:alert-scope */
	std::string *restriction;	/* optional element of XSD type xsd:string */
	std::string *addresses;	/* optional element of XSD type xsd:string */
	std::vector<std::string> code;	/* optional element of XSD type xsd:string */
	std::string *note;	/* optional element of XSD type xsd:string */
	std::string *references;	/* optional element of XSD type xsd:string */
	std::string *incidents;	/* optional element of XSD type xsd:string */
	std::vector<_ns1__alert_info> *info;	/* optional element of XSD type ns1:alert-info */
	std::vector<char *> __any;
	struct soap *soap;	/* transient (not serialized) */
public:
	/// Return the unique type ID value SOAP_TYPE__ns1__alert (16)
	virtual int soap_type(void) const { return 16; }
	/// Set object's data members to default values
	virtual void soap_default(struct soap*);
	/// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
	virtual void soap_serialize(struct soap*) const;
	/// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
	virtual int soap_put(struct soap*, const char *tag, const char *type) const;
	/// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
	virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
	/// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
	virtual void *soap_get(struct soap*, const char *tag, const char *type);
	/// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
	virtual void *soap_in(struct soap*, const char *tag, const char *type);
	/// Return a new object of type _ns1__alert, default initialized and not managed by a soap context
	virtual _ns1__alert *soap_alloc(void) const { return SOAP_NEW(_ns1__alert); }
	         _ns1__alert() { _ns1__alert::soap_default(NULL); }
	virtual ~_ns1__alert() { }
	friend SOAP_FMAC1 _ns1__alert * SOAP_FMAC2 soap_instantiate__ns1__alert(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* CAP-v1.2.h:549 */
#ifndef WITH_NOGLOBAL
#ifndef SOAP_TYPE_SOAP_ENV__Header
#define SOAP_TYPE_SOAP_ENV__Header (55)
/* SOAP Header: */
struct SOAP_ENV__Header
{
public:
	int soap_type() const { return 55; } /* = unique type id SOAP_TYPE_SOAP_ENV__Header */
	         SOAP_ENV__Header();
	friend SOAP_FMAC1 SOAP_ENV__Header * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Header(struct soap*, int, const char*, const char*, size_t*);
};
#endif
#endif

/* CAP-v1.2.h:549 */
#ifndef WITH_NOGLOBAL
#ifndef SOAP_TYPE_SOAP_ENV__Code
#define SOAP_TYPE_SOAP_ENV__Code (56)
/* Type SOAP_ENV__Code is a recursive data type (in)directly referencing itself through its (base) class members */
/* SOAP Fault Code: */
struct SOAP_ENV__Code
{
public:
	char *SOAP_ENV__Value;	/* optional element of XSD type xsd:QName */
	struct SOAP_ENV__Code *SOAP_ENV__Subcode;	/* optional element of XSD type SOAP-ENV:Code */
public:
	int soap_type() const { return 56; } /* = unique type id SOAP_TYPE_SOAP_ENV__Code */
	         SOAP_ENV__Code();
	friend SOAP_FMAC1 SOAP_ENV__Code * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Code(struct soap*, int, const char*, const char*, size_t*);
};
#endif
#endif

/* CAP-v1.2.h:549 */
#ifndef WITH_NOGLOBAL
#ifndef SOAP_TYPE_SOAP_ENV__Detail
#define SOAP_TYPE_SOAP_ENV__Detail (58)
/* SOAP-ENV:Detail complex type: */
struct SOAP_ENV__Detail
{
public:
	char *__any;
	int __type;	/* any type of element <fault> (defined below)
	   WARNING: do not create a cyclic data structure graph throught this element unless SOAP encoding or SOAP_XML_GRAPH are used for id-ref serialization */
	void *fault;	/* transient (not serialized) */
public:
	int soap_type() const { return 58; } /* = unique type id SOAP_TYPE_SOAP_ENV__Detail */
	         SOAP_ENV__Detail();
	friend SOAP_FMAC1 SOAP_ENV__Detail * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Detail(struct soap*, int, const char*, const char*, size_t*);
};
#endif
#endif

/* CAP-v1.2.h:549 */
#ifndef WITH_NOGLOBAL
#ifndef SOAP_TYPE_SOAP_ENV__Reason
#define SOAP_TYPE_SOAP_ENV__Reason (61)
/* SOAP-ENV:Reason complex type: */
struct SOAP_ENV__Reason
{
public:
	char *SOAP_ENV__Text;	/* optional element of XSD type xsd:string */
public:
	int soap_type() const { return 61; } /* = unique type id SOAP_TYPE_SOAP_ENV__Reason */
	         SOAP_ENV__Reason();
	friend SOAP_FMAC1 SOAP_ENV__Reason * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Reason(struct soap*, int, const char*, const char*, size_t*);
};
#endif
#endif

/* CAP-v1.2.h:549 */
#ifndef WITH_NOGLOBAL
#ifndef SOAP_TYPE_SOAP_ENV__Fault
#define SOAP_TYPE_SOAP_ENV__Fault (62)
/* SOAP Fault: */
struct SOAP_ENV__Fault
{
public:
	char *faultcode;	/* optional element of XSD type xsd:QName */
	char *faultstring;	/* optional element of XSD type xsd:string */
	char *faultactor;	/* optional element of XSD type xsd:string */
	struct SOAP_ENV__Detail *detail;	/* optional element of XSD type SOAP-ENV:Detail */
	struct SOAP_ENV__Code *SOAP_ENV__Code;	/* optional element of XSD type SOAP-ENV:Code */
	struct SOAP_ENV__Reason *SOAP_ENV__Reason;	/* optional element of XSD type SOAP-ENV:Reason */
	char *SOAP_ENV__Node;	/* optional element of XSD type xsd:string */
	char *SOAP_ENV__Role;	/* optional element of XSD type xsd:string */
	struct SOAP_ENV__Detail *SOAP_ENV__Detail;	/* optional element of XSD type SOAP-ENV:Detail */
public:
	int soap_type() const { return 62; } /* = unique type id SOAP_TYPE_SOAP_ENV__Fault */
	         SOAP_ENV__Fault();
	friend SOAP_FMAC1 SOAP_ENV__Fault * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Fault(struct soap*, int, const char*, const char*, size_t*);
};
#endif
#endif

/******************************************************************************\
 *                                                                            *
 * Typedefs                                                                   *
 *                                                                            *
\******************************************************************************/


/* CAP-v1.2.h:101 */
#ifndef SOAP_TYPE__QName
#define SOAP_TYPE__QName (5)
typedef char *_QName;
#endif

/* CAP-v1.2.h:101 */
#ifndef SOAP_TYPE__XML
#define SOAP_TYPE__XML (6)
typedef char *_XML;
#endif

/* CAP-v1.2.h:140 */
#ifndef SOAP_TYPE_xsd__anyURI
#define SOAP_TYPE_xsd__anyURI (12)
typedef std::string xsd__anyURI;
#endif

/* CAP-v1.2.h:143 */
#ifndef SOAP_TYPE_xsd__decimal
#define SOAP_TYPE_xsd__decimal (13)
typedef std::string xsd__decimal;
#endif

/* CAP-v1.2.h:146 */
#ifndef SOAP_TYPE_xsd__integer
#define SOAP_TYPE_xsd__integer (14)
typedef std::string xsd__integer;
#endif

/* CAP-v1.2.h:149 */
#ifndef SOAP_TYPE_xsd__language
#define SOAP_TYPE_xsd__language (15)
typedef std::string xsd__language;
#endif

/******************************************************************************\
 *                                                                            *
 * Externals                                                                  *
 *                                                                            *
\******************************************************************************/


#endif

/* End of soapStub.h */
